{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"Home"},{"location":"operating_systems/linux/index.html","text":"Ubuntu 18.04/20.04 \u00b6 Adding custom applications launch icon to favorites Google Remote Desktop Desktop launcher to connect remote server (e.g. Sharcnet)","title":"Overview"},{"location":"operating_systems/linux/index.html#ubuntu-18042004","text":"Adding custom applications launch icon to favorites Google Remote Desktop Desktop launcher to connect remote server (e.g. Sharcnet)","title":"Ubuntu 18.04/20.04"},{"location":"operating_systems/linux/app_icon.html","text":"Adding application launch icon to favorites \u00b6 Download your own icon image Find path to the executable of your application by running (replace brackets with name of applicaion): which [name_application] Copy the path from this output. Create\\edit the .desktop file for the application by running the command (remember to edit the application name): gedit Desktop/[name_application].desktop Add the following lines (replace the items in square brackets with your respect application) and save the file with the extension .desktop (e.g. [application name].desktop ): #!/usr/bin/env xdg-open [Desktop Entry] Type=Application Icon=[path_to_icon_file] Name=[Name your application] Comment=[Name your application] Exec=[path_to_executable file_from_step2] Categories=Development Right click on the file (should now be on your desktop), select properties, then permissions and select Allow executing file as program Finally, move this file to the desktop launcher path on your system: sudo mv /Desktop/*[name_of_file]* /usr/share/applications/","title":"Desktop App Launcher"},{"location":"operating_systems/linux/app_icon.html#adding-application-launch-icon-to-favorites","text":"Download your own icon image Find path to the executable of your application by running (replace brackets with name of applicaion): which [name_application] Copy the path from this output. Create\\edit the .desktop file for the application by running the command (remember to edit the application name): gedit Desktop/[name_application].desktop Add the following lines (replace the items in square brackets with your respect application) and save the file with the extension .desktop (e.g. [application name].desktop ): #!/usr/bin/env xdg-open [Desktop Entry] Type=Application Icon=[path_to_icon_file] Name=[Name your application] Comment=[Name your application] Exec=[path_to_executable file_from_step2] Categories=Development Right click on the file (should now be on your desktop), select properties, then permissions and select Allow executing file as program Finally, move this file to the desktop launcher path on your system: sudo mv /Desktop/*[name_of_file]* /usr/share/applications/","title":"Adding application launch icon to favorites"},{"location":"operating_systems/linux/remote_desktop.html","text":"Google Remote Desktop \u00b6 Install Remote Desktop Extension \u00b6 1. Navigate to Chrome Remote Desktop Web Store and install it by clicking Add to Chrome . 2. Click Launch App and the remote desktop app window should open. Install Chrome Remote Desktop Package \u00b6 1. You will now need to get the .deb for remote desktop with the following command in terminal: wget https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb 2. Then install it by running: sudo apt install ./chrome-remote-desktop_current_amd64.deb 3. If the initial installation attempt will fail, simply run sudo apt install -f to fix the missing dependencies and to complete the installation. sudo apt-get install -f 4. You will need to add yourself to the chrome-remote-desktop group then reboot for the changes to take effect. sudo usermod -a -G chrome-remote-desktop $USER sudo reboot Create Session File \u00b6 1. You will need to create a remote desktop session file in your home directory: gedit ~/.chrome-remote-desktop-session 2. Look in /usr/share/xsessions/ for the .desktop file for your linux environment. For example, ElementaryOS has a file named Pantheon with the following command: gnome-session --session=pantheon . 3. Within the chrome-remote-desktop-session file enter the following (make sure to use your respective distro .desktop file): exec /usr/sbin/lightdm-session \"gnome-session --session=pantheon\" 4. If running ElementayOS you will also need to add the following to the file: DESKTOP_SESSION=pantheon XDG_CURRENT_DESKTOP=Pantheon XDG_RUNTIME_DIR=/run/user/1000 5. Save the file and close. Post-Install Configuration (Setting up Displays) \u00b6 1. Stop Chrome Remote Desktop: /opt/google/chrome-remote-desktop/chrome-remote-desktop --stop 2. Backup the original configuration: sudo cp /opt/google/chrome-remote-desktop/chrome-remote-desktop /opt/google/chrome-remote-desktop/chrome-remote-desktop.orig 3. Edit the config ( chrome-remote-desktop ) file: gedit /opt/google/chrome-remote-desktop/chrome-remote-desktop 4. Find DEFAULT_SIZES and update the remote desktop resolution. For example: DEFAULT_SIZES = \"2560x1440\" 5. For multiple displays you will need to enter in the resolution for each one: DEFAULT_SIZES = \"2560x1440,2560x1440,2560x1440\" 6. Determine your main display number (obtain it with echo $DISPLAY from terminal). Find FIRST_X_DISPLAY_NUMBER and set the FIRST_X_DISPLAY_NUMBER to the display number (Ubuntu 17.10 and lower: usually 0, Ubuntu 18.04: usually 1) echo $DISPLAY FIRST_X_DISPLAY_NUMBER = 0 7. Around line 425, within the definition for get_unused_display_number() , comment out sections that look for additional displays by adding # infront: # while os.path.exists(X_LOCK_FILE_TEMPLATE % display): # display += 1 8. Lastly, find launch_session() and comment out launch_x_server() and launch_x_session() within launch_session() . You will then add display = self.get_unused_display_number() and self.child_env[\"DISPLAY\"] = \":%d\" % display to the definition. The function definition should look like the following: def launch_session(self, x_args): self._init_child_env() self._setup_pulseaudio() self._setup_gnubby() #self._launch_x_server(x_args) #self._launch_x_session() display = self.get_unused_display_number() self.child_env[\"DISPLAY\"] = \":%d\" % display 9. Save and exit the editor. Start Chrome Remote Desktop: /opt/google/chrome-remote-desktop/chrome-remote-desktop --start Launch Remote Desktop \u00b6 1. Finally, head to Chrome Remote Web and Click TURN ON to enable remote desktop access. Set the system name, set the remote desktop connection PIN and click START .","title":"Chrome Remote Desktop"},{"location":"operating_systems/linux/remote_desktop.html#google-remote-desktop","text":"","title":"Google Remote Desktop"},{"location":"operating_systems/linux/remote_desktop.html#install-remote-desktop-extension","text":"1. Navigate to Chrome Remote Desktop Web Store and install it by clicking Add to Chrome . 2. Click Launch App and the remote desktop app window should open.","title":"Install Remote Desktop Extension"},{"location":"operating_systems/linux/remote_desktop.html#install-chrome-remote-desktop-package","text":"1. You will now need to get the .deb for remote desktop with the following command in terminal: wget https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb 2. Then install it by running: sudo apt install ./chrome-remote-desktop_current_amd64.deb 3. If the initial installation attempt will fail, simply run sudo apt install -f to fix the missing dependencies and to complete the installation. sudo apt-get install -f 4. You will need to add yourself to the chrome-remote-desktop group then reboot for the changes to take effect. sudo usermod -a -G chrome-remote-desktop $USER sudo reboot","title":"Install Chrome Remote Desktop Package"},{"location":"operating_systems/linux/remote_desktop.html#create-session-file","text":"1. You will need to create a remote desktop session file in your home directory: gedit ~/.chrome-remote-desktop-session 2. Look in /usr/share/xsessions/ for the .desktop file for your linux environment. For example, ElementaryOS has a file named Pantheon with the following command: gnome-session --session=pantheon . 3. Within the chrome-remote-desktop-session file enter the following (make sure to use your respective distro .desktop file): exec /usr/sbin/lightdm-session \"gnome-session --session=pantheon\" 4. If running ElementayOS you will also need to add the following to the file: DESKTOP_SESSION=pantheon XDG_CURRENT_DESKTOP=Pantheon XDG_RUNTIME_DIR=/run/user/1000 5. Save the file and close.","title":"Create Session File"},{"location":"operating_systems/linux/remote_desktop.html#post-install-configuration-setting-up-displays","text":"1. Stop Chrome Remote Desktop: /opt/google/chrome-remote-desktop/chrome-remote-desktop --stop 2. Backup the original configuration: sudo cp /opt/google/chrome-remote-desktop/chrome-remote-desktop /opt/google/chrome-remote-desktop/chrome-remote-desktop.orig 3. Edit the config ( chrome-remote-desktop ) file: gedit /opt/google/chrome-remote-desktop/chrome-remote-desktop 4. Find DEFAULT_SIZES and update the remote desktop resolution. For example: DEFAULT_SIZES = \"2560x1440\" 5. For multiple displays you will need to enter in the resolution for each one: DEFAULT_SIZES = \"2560x1440,2560x1440,2560x1440\" 6. Determine your main display number (obtain it with echo $DISPLAY from terminal). Find FIRST_X_DISPLAY_NUMBER and set the FIRST_X_DISPLAY_NUMBER to the display number (Ubuntu 17.10 and lower: usually 0, Ubuntu 18.04: usually 1) echo $DISPLAY FIRST_X_DISPLAY_NUMBER = 0 7. Around line 425, within the definition for get_unused_display_number() , comment out sections that look for additional displays by adding # infront: # while os.path.exists(X_LOCK_FILE_TEMPLATE % display): # display += 1 8. Lastly, find launch_session() and comment out launch_x_server() and launch_x_session() within launch_session() . You will then add display = self.get_unused_display_number() and self.child_env[\"DISPLAY\"] = \":%d\" % display to the definition. The function definition should look like the following: def launch_session(self, x_args): self._init_child_env() self._setup_pulseaudio() self._setup_gnubby() #self._launch_x_server(x_args) #self._launch_x_session() display = self.get_unused_display_number() self.child_env[\"DISPLAY\"] = \":%d\" % display 9. Save and exit the editor. Start Chrome Remote Desktop: /opt/google/chrome-remote-desktop/chrome-remote-desktop --start","title":"Post-Install Configuration (Setting up Displays)"},{"location":"operating_systems/linux/remote_desktop.html#launch-remote-desktop","text":"1. Finally, head to Chrome Remote Web and Click TURN ON to enable remote desktop access. Set the system name, set the remote desktop connection PIN and click START .","title":"Launch Remote Desktop"},{"location":"operating_systems/linux/server_shortcut.html","text":"SSHFS Desktop Application \u00b6 Setup fuse \u00b6 Run the following in a terminal: modprobe fuse Create a FUSE usergroup and add yourself to the group sudo groupadd fuse sudo usermod -a -G fuse $USER Create a set of ssh-keys, press enter when asked to name the file (blank) and press enter when asked to enter a passphrase (blank): ssh-keygen -t rsa Transport the key to the remote server: ssh-copy-id -i .ssh/id_rsa.pub user@example.com Now when you run sshfs you will not need to enter your password. Create Shell Script \u00b6 Run the following command to create an empty shell script: touch +x ~/Documents/sshfs_mount.sh chmod +x ~/Documents/sshfs_mount.sh gedit ~/Documents/sshfs_mount.sh Enter the command you normally run to connect to the remote server, change mount_dir to match your local mount location: #!/bin/bash mount_dir=\"/path/to/mount/directory\" if (! mountpoint -q $mount_dir); then sshfs user@example.com:/home/[user]/ $mount_dir -o ServerAliveInterval=15,ServerAliveCountMax=3,Compression=no,follow_symlinks else umount $mount_dir fi In the script, the filesystem will be mounted/unmounted depending on the status. Save and close the file. Create Desktop Entry File \u00b6 Run the following command to create an empty shell script: touch ~/Documents/sshfs_mount.desktop chmod +x ~/Documents/sshfs_mount.desktop gedit ~/Documents/sshfs_mount.desktop Paste the following into the document, ensure you update the brackets: #!/usr/bin/env xdg-open [Desktop Entry] Version=1.0 Type=Application Terminal=false Icon=[path/to/icon] Name=[Name the application] Exec=[path/to/sshfs_mount.sh] Save and close. Move the desktop entry file into the applications directory: sudo mv ~/Documents/sshfs_mount.desktop /usr/share/applications/ Search in applications for the desktop entry file, right-click and add to favorites.","title":"Remote Server Desktop App"},{"location":"operating_systems/linux/server_shortcut.html#sshfs-desktop-application","text":"","title":"SSHFS Desktop Application"},{"location":"operating_systems/linux/server_shortcut.html#setup-fuse","text":"Run the following in a terminal: modprobe fuse Create a FUSE usergroup and add yourself to the group sudo groupadd fuse sudo usermod -a -G fuse $USER Create a set of ssh-keys, press enter when asked to name the file (blank) and press enter when asked to enter a passphrase (blank): ssh-keygen -t rsa Transport the key to the remote server: ssh-copy-id -i .ssh/id_rsa.pub user@example.com Now when you run sshfs you will not need to enter your password.","title":"Setup fuse"},{"location":"operating_systems/linux/server_shortcut.html#create-shell-script","text":"Run the following command to create an empty shell script: touch +x ~/Documents/sshfs_mount.sh chmod +x ~/Documents/sshfs_mount.sh gedit ~/Documents/sshfs_mount.sh Enter the command you normally run to connect to the remote server, change mount_dir to match your local mount location: #!/bin/bash mount_dir=\"/path/to/mount/directory\" if (! mountpoint -q $mount_dir); then sshfs user@example.com:/home/[user]/ $mount_dir -o ServerAliveInterval=15,ServerAliveCountMax=3,Compression=no,follow_symlinks else umount $mount_dir fi In the script, the filesystem will be mounted/unmounted depending on the status. Save and close the file.","title":"Create Shell Script"},{"location":"operating_systems/linux/server_shortcut.html#create-desktop-entry-file","text":"Run the following command to create an empty shell script: touch ~/Documents/sshfs_mount.desktop chmod +x ~/Documents/sshfs_mount.desktop gedit ~/Documents/sshfs_mount.desktop Paste the following into the document, ensure you update the brackets: #!/usr/bin/env xdg-open [Desktop Entry] Version=1.0 Type=Application Terminal=false Icon=[path/to/icon] Name=[Name the application] Exec=[path/to/sshfs_mount.sh] Save and close. Move the desktop entry file into the applications directory: sudo mv ~/Documents/sshfs_mount.desktop /usr/share/applications/ Search in applications for the desktop entry file, right-click and add to favorites.","title":"Create Desktop Entry File"},{"location":"operating_systems/windows/index.html","text":"Windows 10 \u00b6 SSHFS mount remote drive Obtain Windows Product Key","title":"Overview"},{"location":"operating_systems/windows/index.html#windows-10","text":"SSHFS mount remote drive Obtain Windows Product Key","title":"Windows 10"},{"location":"operating_systems/windows/product_key.html","text":"Obtain Windows Product Key \u00b6 Open Powershell and run the following code (Get-WmiObject -query 'select * from SoftwareLicensingService') .OA3xOriginalProductKey","title":"Obtain Product Key"},{"location":"operating_systems/windows/product_key.html#obtain-windows-product-key","text":"Open Powershell and run the following code (Get-WmiObject -query 'select * from SoftwareLicensingService') .OA3xOriginalProductKey","title":"Obtain Windows Product Key"},{"location":"operating_systems/windows/sshfs.html","text":"Mount Remote Drive with SSHFS \u00b6 Install the latest stable installer of WinFSP Install the latest stable installer of SSHFS-Win Open File Explorer , right-click on This PC and choose Map network drive . Choose a drive to mount at and enter the following in the folder field: \\\\sshfs\\[your_login_name]@graham.computecanada.ca/projects/rrg-akhanf/cfmm-bids Ensure you check the box Connect using different credentials if your computer login password is different from Sharcnet. You should then see the network drive in your file explorer!","title":"SSHFS"},{"location":"operating_systems/windows/sshfs.html#mount-remote-drive-with-sshfs","text":"Install the latest stable installer of WinFSP Install the latest stable installer of SSHFS-Win Open File Explorer , right-click on This PC and choose Map network drive . Choose a drive to mount at and enter the following in the folder field: \\\\sshfs\\[your_login_name]@graham.computecanada.ca/projects/rrg-akhanf/cfmm-bids Ensure you check the box Connect using different credentials if your computer login password is different from Sharcnet. You should then see the network drive in your file explorer!","title":"Mount Remote Drive with SSHFS"},{"location":"operating_systems/wsl/index.html","text":"Subsystem for Linux (WSL) \u00b6 Advanced Normalization Tools (ANTs) Automatic Registration Toolbox (ART) Cmake/Make dcm2niix Freesurfer FMRIB Software Library (FSL) NiftyReg Terminator linux emulator Windows Subsystem for Linux activation Newest/greatest: WSL 2 WSL 1","title":"Overview"},{"location":"operating_systems/wsl/index.html#subsystem-for-linux-wsl","text":"Advanced Normalization Tools (ANTs) Automatic Registration Toolbox (ART) Cmake/Make dcm2niix Freesurfer FMRIB Software Library (FSL) NiftyReg Terminator linux emulator Windows Subsystem for Linux activation Newest/greatest: WSL 2 WSL 1","title":"Subsystem for Linux (WSL)"},{"location":"operating_systems/wsl/ants.html","text":"Get the latest ANTs code \u00b6 Download the latest code into an arbitrary directory, I use ~/code: mkdir ~/code cd ~/code git clone https://github.com/ANTsX/ANTs.git You will also need to install the ZLIB libraries: sudo apt-get install zlib1g-dev Run CMake/Make \u00b6 I install my applications in ~/Applications , however the following will install ANTs in ~/bin : mkdir -p ~/bin/ants cd ~/bin/ants ccmake ~/code/ANTs Hit 'c' to do an initial configuration. CMake will do some checking and then present options for review. Hit 'c' again to do another round of configuration. If there are no errors, you're ready to generate the make files by pressing 'g' . Now you are back at the command line, it's time to compile: make This compiles in the most resource-efficient manner. To save time, you can use multiple threads, for example: make -j 2 Post-install Configuration \u00b6 If you want to use ANTs scripts, copy them from the source directory Scripts/ to the bin directory where antsRegistration etc are located: cp -r ~/bin/ants/Scripts/* ~/bin/ants/bin/ Assuming you've built in ~/bin/ants , there will now be a binary directory ~/bin/ants/bin , containing the programs (and scripts if you've included them). The scripts additionally require ANTSPATH to point to the bin directory including a trailing slash. You will need to edit your .bashrc or .profile file by adding the following lines: export ANTSPATH=${HOME}/bin/ants/bin export PATH=${ANTSPATH}:$PATH Now check this worked correctly: which antsRegistration","title":"Advanced Normalization Tools"},{"location":"operating_systems/wsl/ants.html#get-the-latest-ants-code","text":"Download the latest code into an arbitrary directory, I use ~/code: mkdir ~/code cd ~/code git clone https://github.com/ANTsX/ANTs.git You will also need to install the ZLIB libraries: sudo apt-get install zlib1g-dev","title":"Get the latest ANTs code"},{"location":"operating_systems/wsl/ants.html#run-cmakemake","text":"I install my applications in ~/Applications , however the following will install ANTs in ~/bin : mkdir -p ~/bin/ants cd ~/bin/ants ccmake ~/code/ANTs Hit 'c' to do an initial configuration. CMake will do some checking and then present options for review. Hit 'c' again to do another round of configuration. If there are no errors, you're ready to generate the make files by pressing 'g' . Now you are back at the command line, it's time to compile: make This compiles in the most resource-efficient manner. To save time, you can use multiple threads, for example: make -j 2","title":"Run CMake/Make"},{"location":"operating_systems/wsl/ants.html#post-install-configuration","text":"If you want to use ANTs scripts, copy them from the source directory Scripts/ to the bin directory where antsRegistration etc are located: cp -r ~/bin/ants/Scripts/* ~/bin/ants/bin/ Assuming you've built in ~/bin/ants , there will now be a binary directory ~/bin/ants/bin , containing the programs (and scripts if you've included them). The scripts additionally require ANTSPATH to point to the bin directory including a trailing slash. You will need to edit your .bashrc or .profile file by adding the following lines: export ANTSPATH=${HOME}/bin/ants/bin export PATH=${ANTSPATH}:$PATH Now check this worked correctly: which antsRegistration","title":"Post-install Configuration"},{"location":"operating_systems/wsl/art.html","text":"Download ART \u00b6 Download the newest version of ART Make a new directory for the install and extract the tar package into it: mkdir ~/Applications/ART cd ~/Applications/ART tar -xvzf /mnt/c/Users/*[your_username]*/Downloads/acpcdetect2.0*.tar.gz Post Configuration \u00b6 Set the ARTHOME environment variable and add the binary directory to your PATH by editing your ~/.bashrc file: vim ~/.basrc Add these lines to the end: export ARTHOME=/path/to/ART export PATH=$ARTHOME/bin:$PATH Confirm Installation \u00b6 Execute acpcdetect by running command in terminal You may get an error when executing acpcdetect : acpcdetect: error while loading shared libraries: liblapack.so.3: cannot open shared object file: No such file or directory If you get this error, run the following: sudo apt-get install libatlas-base-dev You will also need to install pnmtopng sudo apt-get install -y pnmtopng","title":"Automatic Registration Toolbox"},{"location":"operating_systems/wsl/art.html#download-art","text":"Download the newest version of ART Make a new directory for the install and extract the tar package into it: mkdir ~/Applications/ART cd ~/Applications/ART tar -xvzf /mnt/c/Users/*[your_username]*/Downloads/acpcdetect2.0*.tar.gz","title":"Download ART"},{"location":"operating_systems/wsl/art.html#post-configuration","text":"Set the ARTHOME environment variable and add the binary directory to your PATH by editing your ~/.bashrc file: vim ~/.basrc Add these lines to the end: export ARTHOME=/path/to/ART export PATH=$ARTHOME/bin:$PATH","title":"Post Configuration"},{"location":"operating_systems/wsl/art.html#confirm-installation","text":"Execute acpcdetect by running command in terminal You may get an error when executing acpcdetect : acpcdetect: error while loading shared libraries: liblapack.so.3: cannot open shared object file: No such file or directory If you get this error, run the following: sudo apt-get install libatlas-base-dev You will also need to install pnmtopng sudo apt-get install -y pnmtopng","title":"Confirm Installation"},{"location":"operating_systems/wsl/cmake.html","text":"Install Make \u00b6 Install build essentials and Make first: sudo apt-get install make sudo apt-get update && sudo apt-get install build-essential Install CMake \u00b6 Download the latest version of the CMake executable . In your linux shell run: chmod +x /mnt/c/Users/*[your_username]*/Downloads/cmake-*-Linux-x86_64.sh sudo /mnt/c/Users/*[your_username]*/Downloads/cmake-*-Linux-x86_64.sh export PATH=~/cmake-3.13.3-Linux-x86_64/bin/:$PATH","title":"Make/Cmake"},{"location":"operating_systems/wsl/cmake.html#install-make","text":"Install build essentials and Make first: sudo apt-get install make sudo apt-get update && sudo apt-get install build-essential","title":"Install Make"},{"location":"operating_systems/wsl/cmake.html#install-cmake","text":"Download the latest version of the CMake executable . In your linux shell run: chmod +x /mnt/c/Users/*[your_username]*/Downloads/cmake-*-Linux-x86_64.sh sudo /mnt/c/Users/*[your_username]*/Downloads/cmake-*-Linux-x86_64.sh export PATH=~/cmake-3.13.3-Linux-x86_64/bin/:$PATH","title":"Install CMake"},{"location":"operating_systems/wsl/dcm2niix.html","text":"Run Install \u00b6 Run the following code in a linux terminal: sudo apt-get install dcm2niix Install Dependencies \u00b6 There are a few packages that allow dcm2niix to run faster: sudo apt-get install python-gdcm sudo apt-get install pigz","title":"dcm2niix"},{"location":"operating_systems/wsl/dcm2niix.html#run-install","text":"Run the following code in a linux terminal: sudo apt-get install dcm2niix","title":"Run Install"},{"location":"operating_systems/wsl/dcm2niix.html#install-dependencies","text":"There are a few packages that allow dcm2niix to run faster: sudo apt-get install python-gdcm sudo apt-get install pigz","title":"Install Dependencies"},{"location":"operating_systems/wsl/freesurfer.html","text":"Download software \u00b6 Download the linux software version . Run the following command: sudo tar -C /usr/local -xzvf /mnt/c/Users/*[your_username]*/Downloads/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz You will also need to install some dependancies: sudo apt-get install tcsh sudo apt-get install libglu1 sudo apt-get install libxss1 Post-Install Configurations \u00b6 Add Freesurfer to your path: echo \"FREESURFER_HOME=/usr/local/freesurfer\" >> ~/.bashrc echo 'source $FREESURFER_HOME/SetUpFreeSurfer.sh' >> ~/.bashrc If you have run the install correctly you will see this output: Setting up environment for FreeSurfer/FS-FAST (and FSL) FREESURFER_HOME /usr/local/freesurfer FSFAST_HOME /usr/local/freesurfer/fsfast FSF_OUTPUT_FORMAT nii SUBJECTS_DIR /usr/local/freesurfer/subjects MNI_DIR /usr/local/freesurfer/mni Define subjects_dir \u00b6 FreeSurfer requires an environment variable called SUBJECTS_DIR . This is the directory where subject data is stored. export SUBJECTS_DIR=<path to subject data> Obtain license \u00b6 You will need to obtain a license key . Once you obtain the license.txt key file, copy it to your FreeSurfer installation directory. This is also the location defined by the FREESURFER_HOME environment variable. sudo mv /mnt/c/Users/*[your_username]*/Downloads/license.txt $FREESURFER_HOME","title":"Freesurfer"},{"location":"operating_systems/wsl/freesurfer.html#download-software","text":"Download the linux software version . Run the following command: sudo tar -C /usr/local -xzvf /mnt/c/Users/*[your_username]*/Downloads/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz You will also need to install some dependancies: sudo apt-get install tcsh sudo apt-get install libglu1 sudo apt-get install libxss1","title":"Download software"},{"location":"operating_systems/wsl/freesurfer.html#post-install-configurations","text":"Add Freesurfer to your path: echo \"FREESURFER_HOME=/usr/local/freesurfer\" >> ~/.bashrc echo 'source $FREESURFER_HOME/SetUpFreeSurfer.sh' >> ~/.bashrc If you have run the install correctly you will see this output: Setting up environment for FreeSurfer/FS-FAST (and FSL) FREESURFER_HOME /usr/local/freesurfer FSFAST_HOME /usr/local/freesurfer/fsfast FSF_OUTPUT_FORMAT nii SUBJECTS_DIR /usr/local/freesurfer/subjects MNI_DIR /usr/local/freesurfer/mni","title":"Post-Install Configurations"},{"location":"operating_systems/wsl/freesurfer.html#define-subjects_dir","text":"FreeSurfer requires an environment variable called SUBJECTS_DIR . This is the directory where subject data is stored. export SUBJECTS_DIR=<path to subject data>","title":"Define subjects_dir"},{"location":"operating_systems/wsl/freesurfer.html#obtain-license","text":"You will need to obtain a license key . Once you obtain the license.txt key file, copy it to your FreeSurfer installation directory. This is also the location defined by the FREESURFER_HOME environment variable. sudo mv /mnt/c/Users/*[your_username]*/Downloads/license.txt $FREESURFER_HOME","title":"Obtain license"},{"location":"operating_systems/wsl/fsl.html","text":"Download FSL \u00b6 The easiest method is to download this python script . You will need to register. On the subsequent page you will download the fslinstaller.py file. Run the following in a linux terminal (the install will take awhile): python /mnt/c/Users/*[your_username]*/Downloads/fslinstaller.py You will also need to install the package wxpython : pip install wxpython If that does not work then run: pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-16.04 wxPython Libraries you may need to install \u00b6 Multiple-image Network Graphics library (libmng) \u00b6 sudo apt-get install libmng2 sudo apt-get install libmng-dev PNG library - development (libpng-dev) \u00b6 sudo apt-get install libpng-dev Optimized BLAS (linear algebra) library (libopenblas-base) \u00b6 sudo apt-get install libopenblas-base export LD_LIBRARY_PATH=/usr/lib/openblas-base/ libmng.so.1 Error \u00b6 You will need to create a symbolic link for the library dll libmng.so.1 : sudo ln -s /usr/lib/x86_64-linux-gnu/libmng.so.2 /usr/lib/x86_64-linux-gnu/libmng.so.1 Independent JPEG Group's JPEG runtime library (libjpeg62) \u00b6 sudo apt-get install libjpeg62 PNG library - runtime (libpng12.deb) \u00b6 wget -q -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb \\ && sudo dpkg -i /tmp/libpng12.deb \\ && rm /tmp/libpng12.deb GTK+ graphical user interface library (gtk2.0) \u00b6 sudo apt-get install gtk2.0 Pulseaudio for other random libraries \u00b6 sudo apt-get install pulseaudio You may also receive an error No D-BUS daemon running , run the following: \u00b6 sudo chown -R *[your username]*:admin ~/.dbus","title":"FMRIB Software Library"},{"location":"operating_systems/wsl/fsl.html#download-fsl","text":"The easiest method is to download this python script . You will need to register. On the subsequent page you will download the fslinstaller.py file. Run the following in a linux terminal (the install will take awhile): python /mnt/c/Users/*[your_username]*/Downloads/fslinstaller.py You will also need to install the package wxpython : pip install wxpython If that does not work then run: pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-16.04 wxPython","title":"Download FSL"},{"location":"operating_systems/wsl/fsl.html#libraries-you-may-need-to-install","text":"","title":"Libraries you may need to install"},{"location":"operating_systems/wsl/fsl.html#multiple-image-network-graphics-library-libmng","text":"sudo apt-get install libmng2 sudo apt-get install libmng-dev","title":"Multiple-image Network Graphics library (libmng)"},{"location":"operating_systems/wsl/fsl.html#png-library-development-libpng-dev","text":"sudo apt-get install libpng-dev","title":"PNG library - development (libpng-dev)"},{"location":"operating_systems/wsl/fsl.html#optimized-blas-linear-algebra-library-libopenblas-base","text":"sudo apt-get install libopenblas-base export LD_LIBRARY_PATH=/usr/lib/openblas-base/","title":"Optimized BLAS (linear algebra) library (libopenblas-base)"},{"location":"operating_systems/wsl/fsl.html#libmngso1-error","text":"You will need to create a symbolic link for the library dll libmng.so.1 : sudo ln -s /usr/lib/x86_64-linux-gnu/libmng.so.2 /usr/lib/x86_64-linux-gnu/libmng.so.1","title":"libmng.so.1 Error"},{"location":"operating_systems/wsl/fsl.html#independent-jpeg-groups-jpeg-runtime-library-libjpeg62","text":"sudo apt-get install libjpeg62","title":"Independent JPEG Group's JPEG runtime library (libjpeg62)"},{"location":"operating_systems/wsl/fsl.html#png-library-runtime-libpng12deb","text":"wget -q -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb \\ && sudo dpkg -i /tmp/libpng12.deb \\ && rm /tmp/libpng12.deb","title":"PNG library - runtime (libpng12.deb)"},{"location":"operating_systems/wsl/fsl.html#gtk-graphical-user-interface-library-gtk20","text":"sudo apt-get install gtk2.0","title":"GTK+ graphical user interface library (gtk2.0)"},{"location":"operating_systems/wsl/fsl.html#pulseaudio-for-other-random-libraries","text":"sudo apt-get install pulseaudio","title":"Pulseaudio for other random libraries"},{"location":"operating_systems/wsl/fsl.html#you-may-also-receive-an-error-no-d-bus-daemon-running-run-the-following","text":"sudo chown -R *[your username]*:admin ~/.dbus","title":"You may also receive an error No D-BUS daemon running, run the following:"},{"location":"operating_systems/wsl/niftyreg.html","text":"Download NiftyReg \u00b6 Obtain the newest version of NiftyReg or by running the following: mkdir -p ~/code/niftyreg_source cd ~/code/niftyreg_source git clone https://github.com/SuperElastix/niftyreg.git Run CMake/Make \u00b6 Make the build and install directories. The default install location is /usr/local , which falls on your PATH. This is the easiest location to install. If you want to install somwhere else then specify the path in the CMAKE_INSTALL_PREFIX variable. mkdir -p ~/bin/niftyreg cd ~/bin/niftyreg ccmake ~/code/niftyreg_source/niftyreg The following options will be displayed, ensure you change CMAKE_INSTALL_PREFIX variable to the install directory path if you don't want to use default: Parameter Value BUILD_ALL_DEP Set to ON if you want to build All the dependencies BUILD_SHARED_LIBS Build the libraries as shared build the libraries as shared BUILD_TESTING Set to ON if you want to build the unit tests CMAKE_BUILD_TYPE Compiling options: Debug Release RelWithDebInfo MinSizeRel CMAKE_INSTALL_PREFIX Set the path where the final install will be copied M_LIBRARY Path to a library. PNG_INCLUDE_DIR Set if you want NiftyReg to support the PNG file format for 2D images. Note that CMake will try to find the libpng on your system and will build it automatically if it does not find it. USE_CUDA Set to ON if you want to build the GPU code. The CUDA toolkit must be install otherwise CMake will return an error message USE_OPENCL Set to ON to use OpenCL for multi-CPU implementation. USE_OPENMP Set to ON to use OpenMP for multi-CPU implementation. USE_SSE Set to ON to use SIMD based implementation, mostly for cubic B-Spline related computation. Note that SIMD implementation has only be done for single precision. Press 'c' to configure the NiftyReg project, press 'c' to configure the project. Once the project is correctly configured, press the 'g' key to generate the Makefiles. You can then build and install the project: sudo make sudo make install Post-Install Configuration \u00b6 The project should then be installed into the CMAKE_INSTALL_PREFIX directory you previously created. If you changed the install prefix directory, to one not on your PATH, you will need to add NiftyReg to your PATH. In order to use NiftyReg in any terminal, you will need to edit your .bashrc or .profile file by adding the following lines: NREG=<path_to_your_niftyreg_install> export PATH={NREG}/bin:${PATH} export LD_LIBRARY_PATH={NREG}/lib:${LD_LIBRARY_PATH} Close and re-open the linux terminal then run: reg_f3d","title":"NiftyReg"},{"location":"operating_systems/wsl/niftyreg.html#download-niftyreg","text":"Obtain the newest version of NiftyReg or by running the following: mkdir -p ~/code/niftyreg_source cd ~/code/niftyreg_source git clone https://github.com/SuperElastix/niftyreg.git","title":"Download NiftyReg"},{"location":"operating_systems/wsl/niftyreg.html#run-cmakemake","text":"Make the build and install directories. The default install location is /usr/local , which falls on your PATH. This is the easiest location to install. If you want to install somwhere else then specify the path in the CMAKE_INSTALL_PREFIX variable. mkdir -p ~/bin/niftyreg cd ~/bin/niftyreg ccmake ~/code/niftyreg_source/niftyreg The following options will be displayed, ensure you change CMAKE_INSTALL_PREFIX variable to the install directory path if you don't want to use default: Parameter Value BUILD_ALL_DEP Set to ON if you want to build All the dependencies BUILD_SHARED_LIBS Build the libraries as shared build the libraries as shared BUILD_TESTING Set to ON if you want to build the unit tests CMAKE_BUILD_TYPE Compiling options: Debug Release RelWithDebInfo MinSizeRel CMAKE_INSTALL_PREFIX Set the path where the final install will be copied M_LIBRARY Path to a library. PNG_INCLUDE_DIR Set if you want NiftyReg to support the PNG file format for 2D images. Note that CMake will try to find the libpng on your system and will build it automatically if it does not find it. USE_CUDA Set to ON if you want to build the GPU code. The CUDA toolkit must be install otherwise CMake will return an error message USE_OPENCL Set to ON to use OpenCL for multi-CPU implementation. USE_OPENMP Set to ON to use OpenMP for multi-CPU implementation. USE_SSE Set to ON to use SIMD based implementation, mostly for cubic B-Spline related computation. Note that SIMD implementation has only be done for single precision. Press 'c' to configure the NiftyReg project, press 'c' to configure the project. Once the project is correctly configured, press the 'g' key to generate the Makefiles. You can then build and install the project: sudo make sudo make install","title":"Run CMake/Make"},{"location":"operating_systems/wsl/niftyreg.html#post-install-configuration","text":"The project should then be installed into the CMAKE_INSTALL_PREFIX directory you previously created. If you changed the install prefix directory, to one not on your PATH, you will need to add NiftyReg to your PATH. In order to use NiftyReg in any terminal, you will need to edit your .bashrc or .profile file by adding the following lines: NREG=<path_to_your_niftyreg_install> export PATH={NREG}/bin:${PATH} export LD_LIBRARY_PATH={NREG}/lib:${LD_LIBRARY_PATH} Close and re-open the linux terminal then run: reg_f3d","title":"Post-Install Configuration"},{"location":"operating_systems/wsl/terminator.html","text":"Installing an X Server \u00b6 To run an X Window application, you will need to have an X Server installed and running on your Windows 10 machine. The most popular application is: VcXsrv After installing, VcXsrv creates a desktop shortcut. To start the server in multi-window mode run the following command in a command prompt: \"C:\\Program Files\\VcXsrv\\vcxsrv.exe\" :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl -dpi auto Configuring Terminator \u00b6 Once VcXsrv is installed, the next step is to install Terminator on WSL Bash: sudo apt-get install terminator Terminator will not initalize a config file so you will need to do this manually: mkdir -p ~/.config/terminator touch ~/.config/terminator/config Try launching Terminator by specifying the X Display to connect to (:0) in the linux shell: DISPLAY=:0 terminator & If you receive an error about D-Bus ( No D-BUS daemon running ) then press CTRL+C to abort the previous command and run the following: sudo apt-get install dbus-x11 sudo service dbus start Once you have completed the above run the previous command again: DISPLAY=:0 terminator & A nice Terminator window should pop up. Installing Zsh \u00b6 The next step is to install Zsh with oh-my-zsh. Installation is straightfoward: sudo apt-get install curl wget git zsh curl -L https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | bash You may receive a message Password: chsh: PAM: Authentication failure you can ignore this. Set the theme to \"ys\" at line 11 by replacing robbyrussell in .zshrc : vi ~/.zshrc ZSH_THEME=\"ys\" If you have never used vi editor before, you will need to press the i key to enter inout mode to make changes. Once you have made the change you will need to exit input mode by pressing esc . In order to exit the editor and save you need to press : followed by wq to exit the editor with save. The only problem with Bash in WSL is it will always run Bash instead of Zsh. To get around that, add this to the end of your ~/.bashrc which will launch zsh instead when it starts up: vi ~/.bashrc if [ -t 1 ]; then exec zsh fi Terminator Colorscheme \u00b6 The next thing is to change the default Terminator colorscheme to Solarized Dark. The easiest way to do this, is to use the awesome node package base16-builder . You need to first install Node.js: curl -sL https://deb.nodesource.com/setup_10.x | sudo bash - sudo apt install nodejs Once you have installed Node.js you can then run the base-16builder install: sudo npm install --global base16-builder You need to change directory access to the configstore directory just created: sudo chown -R [your_username] /home/[your_username]/.config/configstore Now you need to apply the scheme to the terminator config file: mkdir -p .config/terminator base16-builder -s solarized -t terminator -b dark > .config/terminator/config Dircolors \u00b6 To change the dircolors you can use Solarized dircolors on Github and downloaded them to .dir_colors : wget https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.256dark mv dircolors.256dark .dir_colors Finally, added this to your .zshrc to eval the Solarized dircolors on startup: if [ -f ~/.dir_colors ]; then eval `dircolors ~/.dir_colors` fi Launching Terminator Directly \u00b6 To launch a hidden command window using the WShell Object in VBS you need to type the folowing script into a text document. Right click on your desktop and create a new text doc. Then copy the following and save the file with the .vbs extension (e.g. startTerminator.vbs): args = \"-c\" & \" -l \" & \"\"\"DISPLAY=:0 terminator\"\"\" WScript.CreateObject(\"Shell.Application\").ShellExecute \"bash\", args, \"\", \"open\", 0 Move this .vbs file into a safe place such as \"C:\\Users[your_username]\". Right click on the file and 'Send to' the desktop as a shortcut. Right click on the new shortcut and select properties. In the 'Target' field type: C:\\Windows\\System32\\wscript.exe C:\\Users\\*[your_username]*\\startTerminator.vbs Click 'Apply'. You can then set the icon of the shortcut by saving this icon file to the same place you saved the .vbs file. Right click on the shortcut again, properties and at the bottom select 'Change Icon...'. From here you can select the icon file you just downloaded. In the 'Start in' field type: %USERPROFILE% It's impossible to have Termiator start in your Linux home directory through this method since that path is not \"known\" to Windows. To get around it, add this to your .zshrc so it CD's to your home directory on startup: vi ~/.zshrc if [ -t 1 ]; then cd ~ fi Other customizations \u00b6 If you want to further modify your terminator theme you can add lines to the file ~/.config/terminator/config . To change the opening size of the terminal window add the variable size under layouts: vi ~/.config/terminator/config [layouts] [[default]] [[[child1]]] parent = window0 profile = Base16 Solarized Dark type = Terminal [[[window0]]] parent = \"\" size = 1594, 465 type = Window Close terminator and re-open.","title":"Terminator"},{"location":"operating_systems/wsl/terminator.html#installing-an-x-server","text":"To run an X Window application, you will need to have an X Server installed and running on your Windows 10 machine. The most popular application is: VcXsrv After installing, VcXsrv creates a desktop shortcut. To start the server in multi-window mode run the following command in a command prompt: \"C:\\Program Files\\VcXsrv\\vcxsrv.exe\" :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl -dpi auto","title":"Installing an X Server"},{"location":"operating_systems/wsl/terminator.html#configuring-terminator","text":"Once VcXsrv is installed, the next step is to install Terminator on WSL Bash: sudo apt-get install terminator Terminator will not initalize a config file so you will need to do this manually: mkdir -p ~/.config/terminator touch ~/.config/terminator/config Try launching Terminator by specifying the X Display to connect to (:0) in the linux shell: DISPLAY=:0 terminator & If you receive an error about D-Bus ( No D-BUS daemon running ) then press CTRL+C to abort the previous command and run the following: sudo apt-get install dbus-x11 sudo service dbus start Once you have completed the above run the previous command again: DISPLAY=:0 terminator & A nice Terminator window should pop up.","title":"Configuring Terminator"},{"location":"operating_systems/wsl/terminator.html#installing-zsh","text":"The next step is to install Zsh with oh-my-zsh. Installation is straightfoward: sudo apt-get install curl wget git zsh curl -L https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | bash You may receive a message Password: chsh: PAM: Authentication failure you can ignore this. Set the theme to \"ys\" at line 11 by replacing robbyrussell in .zshrc : vi ~/.zshrc ZSH_THEME=\"ys\" If you have never used vi editor before, you will need to press the i key to enter inout mode to make changes. Once you have made the change you will need to exit input mode by pressing esc . In order to exit the editor and save you need to press : followed by wq to exit the editor with save. The only problem with Bash in WSL is it will always run Bash instead of Zsh. To get around that, add this to the end of your ~/.bashrc which will launch zsh instead when it starts up: vi ~/.bashrc if [ -t 1 ]; then exec zsh fi","title":"Installing Zsh"},{"location":"operating_systems/wsl/terminator.html#terminator-colorscheme","text":"The next thing is to change the default Terminator colorscheme to Solarized Dark. The easiest way to do this, is to use the awesome node package base16-builder . You need to first install Node.js: curl -sL https://deb.nodesource.com/setup_10.x | sudo bash - sudo apt install nodejs Once you have installed Node.js you can then run the base-16builder install: sudo npm install --global base16-builder You need to change directory access to the configstore directory just created: sudo chown -R [your_username] /home/[your_username]/.config/configstore Now you need to apply the scheme to the terminator config file: mkdir -p .config/terminator base16-builder -s solarized -t terminator -b dark > .config/terminator/config","title":"Terminator Colorscheme"},{"location":"operating_systems/wsl/terminator.html#dircolors","text":"To change the dircolors you can use Solarized dircolors on Github and downloaded them to .dir_colors : wget https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.256dark mv dircolors.256dark .dir_colors Finally, added this to your .zshrc to eval the Solarized dircolors on startup: if [ -f ~/.dir_colors ]; then eval `dircolors ~/.dir_colors` fi","title":"Dircolors"},{"location":"operating_systems/wsl/terminator.html#launching-terminator-directly","text":"To launch a hidden command window using the WShell Object in VBS you need to type the folowing script into a text document. Right click on your desktop and create a new text doc. Then copy the following and save the file with the .vbs extension (e.g. startTerminator.vbs): args = \"-c\" & \" -l \" & \"\"\"DISPLAY=:0 terminator\"\"\" WScript.CreateObject(\"Shell.Application\").ShellExecute \"bash\", args, \"\", \"open\", 0 Move this .vbs file into a safe place such as \"C:\\Users[your_username]\". Right click on the file and 'Send to' the desktop as a shortcut. Right click on the new shortcut and select properties. In the 'Target' field type: C:\\Windows\\System32\\wscript.exe C:\\Users\\*[your_username]*\\startTerminator.vbs Click 'Apply'. You can then set the icon of the shortcut by saving this icon file to the same place you saved the .vbs file. Right click on the shortcut again, properties and at the bottom select 'Change Icon...'. From here you can select the icon file you just downloaded. In the 'Start in' field type: %USERPROFILE% It's impossible to have Termiator start in your Linux home directory through this method since that path is not \"known\" to Windows. To get around it, add this to your .zshrc so it CD's to your home directory on startup: vi ~/.zshrc if [ -t 1 ]; then cd ~ fi","title":"Launching Terminator Directly"},{"location":"operating_systems/wsl/terminator.html#other-customizations","text":"If you want to further modify your terminator theme you can add lines to the file ~/.config/terminator/config . To change the opening size of the terminal window add the variable size under layouts: vi ~/.config/terminator/config [layouts] [[default]] [[[child1]]] parent = window0 profile = Base16 Solarized Dark type = Terminal [[[window0]]] parent = \"\" size = 1594, 465 type = Window Close terminator and re-open.","title":"Other customizations"},{"location":"operating_systems/wsl/wsl.html","text":"Turn on linux subsystem feature \u00b6 Open Windows PowerShell as administrator and run the command: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Restart your computer when prompted. Download the linux distro \u00b6 Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select \"Get\". To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro. The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete. Once installation is complete, you will be prompted to create a new user account (and its password). Most distros ship with an empty/minimal package catalog. I strongly recommend regularly updating your package catalog, and upgrading your installed packages using your distro's preferred package manager. sudo apt update && sudo apt upgrade Add link to the linux subsystem in Windows Quick Access \u00b6 Depending on the version of linux you installed, the absolute path will be found either: C:\\Users\\*[your_username]*\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_*[unique_code]*\\LocalState\\rootfs C:\\Users\\*[your_username]*\\AppData\\Local\\lxss When you find the correct location, right click on the parent folder and select 'Pin to Quick Access'","title":"WSL"},{"location":"operating_systems/wsl/wsl.html#turn-on-linux-subsystem-feature","text":"Open Windows PowerShell as administrator and run the command: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Restart your computer when prompted.","title":"Turn on linux subsystem feature"},{"location":"operating_systems/wsl/wsl.html#download-the-linux-distro","text":"Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select \"Get\". To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro. The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete. Once installation is complete, you will be prompted to create a new user account (and its password). Most distros ship with an empty/minimal package catalog. I strongly recommend regularly updating your package catalog, and upgrading your installed packages using your distro's preferred package manager. sudo apt update && sudo apt upgrade","title":"Download the linux distro"},{"location":"operating_systems/wsl/wsl.html#add-link-to-the-linux-subsystem-in-windows-quick-access","text":"Depending on the version of linux you installed, the absolute path will be found either: C:\\Users\\*[your_username]*\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_*[unique_code]*\\LocalState\\rootfs C:\\Users\\*[your_username]*\\AppData\\Local\\lxss When you find the correct location, right click on the parent folder and select 'Pin to Quick Access'","title":"Add link to the linux subsystem in Windows Quick Access"},{"location":"operating_systems/wsl/wsl2.html","text":"Sign up for Windows Insider program \u00b6 Go to Register for Windows Insider Sign up for Windows Insider program Activate Windows Insider Builds \u00b6 Enable Full Diagnostic Data go to Settings \u2192 Privacy \u2192 Diagnostics & feedback \u2192 Diagnostic data Choose Full as the option Enable Telemetry Data via Registry Open Registry Editor Press Windows Key + R then type regedit to open registry editor Navigate to: HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DataCollection Right-click DataCollection , click New and then click DWORD (32-bit) Value Name it as AllowTelemetry , and then press ENTER Double-click AllowTelemetry , set the value as 3, and then click OK . Repeat the above steps for: HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\DataCollection Restart your computer Group Policy to enable Telemetry Press Windows key + r and type gpedit.msc in the Run prompt, hit ENTER to launch group policy editor Go to Computer Configuration \u2192 Administrative Templates \u2192 Windows Components \u2192 Data Collection and Preview Builds Double-click Allow Telemetry In the Options box, configure the level as 3, and then click OK Activate Insider Build \u00b6 Search for Check for Updates in the Windows search menu In the new window select Windows Insider Program at the bottom of the menu Select Get Started and follow the instructions, making sure you select Fast when asked Once you have completed the registration you will need to check for updates and let Windows install the new insider build. Once done you should restart your computer Turn on linux subsystem feature \u00b6 Open Windows PowerShell as administrator and run the commands: Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux You will need to restart your computer again Download the linux distro \u00b6 Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select Get Once done installing, open up Powershell as administrator and run (replace distro with the name of the distro you installed): wsl --set-version [Distro] 2 wsl --set-default-version 2 Finalizing \u00b6 To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete Once installation is complete, you will be prompted to create a new user account (and its password) Most distros ship with an empty/minimal package catalog. You should regularly be updating your package catalog, and upgrading your installed packages using your distro's preferred package manager sudo apt-get update && sudo apt-get upgrade","title":"WSL2"},{"location":"operating_systems/wsl/wsl2.html#sign-up-for-windows-insider-program","text":"Go to Register for Windows Insider Sign up for Windows Insider program","title":"Sign up for Windows Insider program"},{"location":"operating_systems/wsl/wsl2.html#activate-windows-insider-builds","text":"Enable Full Diagnostic Data go to Settings \u2192 Privacy \u2192 Diagnostics & feedback \u2192 Diagnostic data Choose Full as the option Enable Telemetry Data via Registry Open Registry Editor Press Windows Key + R then type regedit to open registry editor Navigate to: HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DataCollection Right-click DataCollection , click New and then click DWORD (32-bit) Value Name it as AllowTelemetry , and then press ENTER Double-click AllowTelemetry , set the value as 3, and then click OK . Repeat the above steps for: HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\DataCollection Restart your computer Group Policy to enable Telemetry Press Windows key + r and type gpedit.msc in the Run prompt, hit ENTER to launch group policy editor Go to Computer Configuration \u2192 Administrative Templates \u2192 Windows Components \u2192 Data Collection and Preview Builds Double-click Allow Telemetry In the Options box, configure the level as 3, and then click OK","title":"Activate Windows Insider Builds"},{"location":"operating_systems/wsl/wsl2.html#activate-insider-build","text":"Search for Check for Updates in the Windows search menu In the new window select Windows Insider Program at the bottom of the menu Select Get Started and follow the instructions, making sure you select Fast when asked Once you have completed the registration you will need to check for updates and let Windows install the new insider build. Once done you should restart your computer","title":"Activate Insider Build"},{"location":"operating_systems/wsl/wsl2.html#turn-on-linux-subsystem-feature","text":"Open Windows PowerShell as administrator and run the commands: Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux You will need to restart your computer again","title":"Turn on linux subsystem feature"},{"location":"operating_systems/wsl/wsl2.html#download-the-linux-distro","text":"Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select Get Once done installing, open up Powershell as administrator and run (replace distro with the name of the distro you installed): wsl --set-version [Distro] 2 wsl --set-default-version 2","title":"Download the linux distro"},{"location":"operating_systems/wsl/wsl2.html#finalizing","text":"To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete Once installation is complete, you will be prompted to create a new user account (and its password) Most distros ship with an empty/minimal package catalog. You should regularly be updating your package catalog, and upgrading your installed packages using your distro's preferred package manager sudo apt-get update && sudo apt-get upgrade","title":"Finalizing"},{"location":"phd_related/index.html","text":"Blog \u00b6 The blog posts here are related to life as a graduate student. Posts range from things I have learned to rants. Enjoy! Mendeley database decrypting Tips on reading academic papers GitHub Desktop install","title":"Overview"},{"location":"phd_related/index.html#blog","text":"The blog posts here are related to life as a graduate student. Posts range from things I have learned to rants. Enjoy! Mendeley database decrypting Tips on reading academic papers GitHub Desktop install","title":"Blog"},{"location":"phd_related/mendeley_decrypt.html","text":"In an effort to stop users from porting their databases to other software like Zotero, Mendeley has begun encrypting the user database. Mendeley is using the SQLite Encryption Extension (\u201cSEE\u201d) with a hidden key. The SEE library is closed-source and very proprietary. Its API is documented, but its on-disk structures are not (publicly) documented, and the source code is not publicly available. Applications using SEE are required to make it impossible to access SEE functionality from outside the application. Prep \u00b6 This method is working on Linux (Ubuntu 20.04 and Pop!_OS 20.04). You will need to install: gdm: sudo apt-get install -y gdm Mendeley should be installed in either two ways: Flatpak app from a .deb file Extract your data \u00b6 Make sure you quit Mendeley before proceeding. Locate your Mendeley database, the database is usually found in either: ~/.local/share/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ ~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ You will find several sqlite databases: @ www.mendeley.com.sqlite \u2190this is the one we want @ www.mendeley.com.sqlite-wal @ www.mendeley.com.sqlite-shm -monitor.sqlite -monitor.sqlite-wal -monitor.sqlite-shm Make a backup copy of the encrypted database. In my case, I installed Mendeley as a Flatpak app so I ran the following to make a backup copy: cd ~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite ~/backup-encrypted.sqlite You will now run Mendeley in debug mode, depending on how you installed it: a. if you installed with a .deb package, debug using gdb directly: mendeleydesktop --debug b. if you installed with Flatpak, you need to run with Flatpak first then gdb : # Run with Flatpak $ flatpak run --devel --command = sh com.elsevier.MendeleyDesktop # Run gdb within the Flatpak sandbox [\ud83d\udce6 com.elsevier.MendeleyDesktop ~]$ QT_QPA_PLATFORM_PLUGIN_PATH = /app/extra/plugins/qt/plugins/platforms/ gdb --args /app/extra/bin/mendeleydesktop # Once inside ( gdb ) run the following (gdb) set unwindonsignal on Add a breakpoint that captures the moment a SQLite database is opened: (gdb) b sqlite3_open_v2 Start the program now: (gdb) run The program will stop at the breakpoint several times. Keep continuing the program until the string pointed to by $rdi names the file you backed up in the step above (press c to continue and enter x/s $rdi to check the filename): # Run x/s $rdi and look at the filename Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x1dca928: \"/home/greydon/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/Settings.sqlite\" # Enter c to continue (gdb) c Continuing. Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x1dcb318: \"/home/greydon/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/Settings.sqlite\" (gdb) c # Keep repeating the above until you find the .sqlite file that you backed up earlier Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x25f1818: \"/home/greydon/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite\" Now, set a breakpoint for the moment the key is supplied to SQLite Encryption Extension by using b sqlite3_key : # Set a new breakpoint (gdb) b sqlite3_key Breakpoint 2 at 0x101b2c0 # Press c to continue (gdb) c Continuing. when the subsequent breakpoint is hit, enter info registers to determine the value of rdi : # When the breakpoint is hit, run ` info registers ` Thread 1 \"mendeleydesktop\" hit Breakpoint 2, 0x000000000101b2c0 in sqlite3_key () (gdb) info registers rax 0x7fffffffc6b0 140737488340656 rbx 0x25f0590 39781776 rcx 0x7fffea9a0c40 140737129352256 rdx 0x20 32 rsi 0x260fd68 39910760 rdi 0x25ef4e8 39777512 rbp 0x7fffffffc730 0x7fffffffc730 rsp 0x7fffffffc688 0x7fffffffc688 r8 0xc1 193 r9 0x7fffea9a0cc0 140737129352384 r10 0x0 0 r11 0x1 1 r12 0x7fffffffc6b0 140737488340656 r13 0x7fffffffc6a0 140737488340640 r14 0x7fffffffc790 140737488340880 r15 0x7fffffffc790 140737488340880 rip 0x101b2c0 0x101b2c0 <sqlite3_key> eflags 0x202 [ IF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 Copy down the value of rdi from the second column of the info registers output. It is the pointer to the open SQLite database handle. Then, finish execution of sqlite3_key by running fin . (gdb) fin Run till exit from #0 0x000000000101b2c0 in sqlite3_key () 0x0000000000f94e54 in SqliteDatabase::openInternal(QString const&, SqlDatabaseKey*) () Use gdb\u2019s ability to call C functions to rekey the database to the null key, thereby decrypting it in-place and allowing export of the SQL data: (gdb) p (int) sqlite3_rekey_v2(0x25ef4e8, 0, 0, 0) $ 1 = 0 If you see $1 = 0 from the rekey command then you are ready to export the SQL data (step 12), if you see $1 = 8 then you need to follow the below steps. Mendeley will sometimes re-open the database a few times during startup sp this may have caused the error To work around the random opening of the database, check if the program opens the main database a second time Run step 7-8 again up tp the p sqlite3_rekey_v2(...) step, but do not run sqlite3_rekey_v2 Instead, just type c to continue, returning to the step where you inspect each call to sqlite3_open_v2 , waiting for one with $rdi pointing to a string with the right database filename. When you see it come round again, then try the sqlite3_rekey_v2 step If you see $1 = 0 this time, you\u2019re all set, and can proceed as described above for a successful call to sqlite3_rekey_v2 Once the database is decrypted it is a good idea to save a copy of the database to a new location: cd ~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite ~/backup-decrypted.sqlite Now you can quit gbd : (gdb) quit A debugging session is active. Inferior 1 [process 32750] will be killed. Quit anyway? (y or n) y [322:322:0100/000000.491674:ERROR:broker_posix.cc(43)] Invalid node channel message if also running Flatpak : [\ud83d\udce6 com.elsevier.MendeleyDesktop ~]$ exit Lastly, restore your backup copy of the encrypted database, so that Mendeley will continue to run OK: cd ~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp ~/backup-encrypted.sqlite 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite You can now use software like SQLite Browser to open and view the database ( ~/backup-decrypted.sqlite )","title":"Decrypt Mendeley"},{"location":"phd_related/mendeley_decrypt.html#prep","text":"This method is working on Linux (Ubuntu 20.04 and Pop!_OS 20.04). You will need to install: gdm: sudo apt-get install -y gdm Mendeley should be installed in either two ways: Flatpak app from a .deb file","title":"Prep"},{"location":"phd_related/mendeley_decrypt.html#extract-your-data","text":"Make sure you quit Mendeley before proceeding. Locate your Mendeley database, the database is usually found in either: ~/.local/share/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ ~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ You will find several sqlite databases: @ www.mendeley.com.sqlite \u2190this is the one we want @ www.mendeley.com.sqlite-wal @ www.mendeley.com.sqlite-shm -monitor.sqlite -monitor.sqlite-wal -monitor.sqlite-shm Make a backup copy of the encrypted database. In my case, I installed Mendeley as a Flatpak app so I ran the following to make a backup copy: cd ~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite ~/backup-encrypted.sqlite You will now run Mendeley in debug mode, depending on how you installed it: a. if you installed with a .deb package, debug using gdb directly: mendeleydesktop --debug b. if you installed with Flatpak, you need to run with Flatpak first then gdb : # Run with Flatpak $ flatpak run --devel --command = sh com.elsevier.MendeleyDesktop # Run gdb within the Flatpak sandbox [\ud83d\udce6 com.elsevier.MendeleyDesktop ~]$ QT_QPA_PLATFORM_PLUGIN_PATH = /app/extra/plugins/qt/plugins/platforms/ gdb --args /app/extra/bin/mendeleydesktop # Once inside ( gdb ) run the following (gdb) set unwindonsignal on Add a breakpoint that captures the moment a SQLite database is opened: (gdb) b sqlite3_open_v2 Start the program now: (gdb) run The program will stop at the breakpoint several times. Keep continuing the program until the string pointed to by $rdi names the file you backed up in the step above (press c to continue and enter x/s $rdi to check the filename): # Run x/s $rdi and look at the filename Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x1dca928: \"/home/greydon/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/Settings.sqlite\" # Enter c to continue (gdb) c Continuing. Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x1dcb318: \"/home/greydon/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/Settings.sqlite\" (gdb) c # Keep repeating the above until you find the .sqlite file that you backed up earlier Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x25f1818: \"/home/greydon/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite\" Now, set a breakpoint for the moment the key is supplied to SQLite Encryption Extension by using b sqlite3_key : # Set a new breakpoint (gdb) b sqlite3_key Breakpoint 2 at 0x101b2c0 # Press c to continue (gdb) c Continuing. when the subsequent breakpoint is hit, enter info registers to determine the value of rdi : # When the breakpoint is hit, run ` info registers ` Thread 1 \"mendeleydesktop\" hit Breakpoint 2, 0x000000000101b2c0 in sqlite3_key () (gdb) info registers rax 0x7fffffffc6b0 140737488340656 rbx 0x25f0590 39781776 rcx 0x7fffea9a0c40 140737129352256 rdx 0x20 32 rsi 0x260fd68 39910760 rdi 0x25ef4e8 39777512 rbp 0x7fffffffc730 0x7fffffffc730 rsp 0x7fffffffc688 0x7fffffffc688 r8 0xc1 193 r9 0x7fffea9a0cc0 140737129352384 r10 0x0 0 r11 0x1 1 r12 0x7fffffffc6b0 140737488340656 r13 0x7fffffffc6a0 140737488340640 r14 0x7fffffffc790 140737488340880 r15 0x7fffffffc790 140737488340880 rip 0x101b2c0 0x101b2c0 <sqlite3_key> eflags 0x202 [ IF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 Copy down the value of rdi from the second column of the info registers output. It is the pointer to the open SQLite database handle. Then, finish execution of sqlite3_key by running fin . (gdb) fin Run till exit from #0 0x000000000101b2c0 in sqlite3_key () 0x0000000000f94e54 in SqliteDatabase::openInternal(QString const&, SqlDatabaseKey*) () Use gdb\u2019s ability to call C functions to rekey the database to the null key, thereby decrypting it in-place and allowing export of the SQL data: (gdb) p (int) sqlite3_rekey_v2(0x25ef4e8, 0, 0, 0) $ 1 = 0 If you see $1 = 0 from the rekey command then you are ready to export the SQL data (step 12), if you see $1 = 8 then you need to follow the below steps. Mendeley will sometimes re-open the database a few times during startup sp this may have caused the error To work around the random opening of the database, check if the program opens the main database a second time Run step 7-8 again up tp the p sqlite3_rekey_v2(...) step, but do not run sqlite3_rekey_v2 Instead, just type c to continue, returning to the step where you inspect each call to sqlite3_open_v2 , waiting for one with $rdi pointing to a string with the right database filename. When you see it come round again, then try the sqlite3_rekey_v2 step If you see $1 = 0 this time, you\u2019re all set, and can proceed as described above for a successful call to sqlite3_rekey_v2 Once the database is decrypted it is a good idea to save a copy of the database to a new location: cd ~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite ~/backup-decrypted.sqlite Now you can quit gbd : (gdb) quit A debugging session is active. Inferior 1 [process 32750] will be killed. Quit anyway? (y or n) y [322:322:0100/000000.491674:ERROR:broker_posix.cc(43)] Invalid node channel message if also running Flatpak : [\ud83d\udce6 com.elsevier.MendeleyDesktop ~]$ exit Lastly, restore your backup copy of the encrypted database, so that Mendeley will continue to run OK: cd ~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp ~/backup-encrypted.sqlite 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite You can now use software like SQLite Browser to open and view the database ( ~/backup-decrypted.sqlite )","title":"Extract your data"},{"location":"phd_related/install-github-desktop/index.html","text":"While working with Git is most often performed at the command line, it can often be daughnting for people who are not as comfortable with a terminal window. GitHub has made the entry point easier by introducing a user interface application - GitHub Desktop . Setting up GitHub Desktop \u00b6 The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly , which is simple and easy to use. Install the application from the official website . Once you have installed GitHub Desktop, launch it and sign in with your GitHub account: Once you are signed in, choose Clone a repository .","title":"GitHub Desktop"},{"location":"phd_related/install-github-desktop/index.html#setting-up-github-desktop","text":"The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly , which is simple and easy to use. Install the application from the official website . Once you have installed GitHub Desktop, launch it and sign in with your GitHub account: Once you are signed in, choose Clone a repository .","title":"Setting up GitHub Desktop"},{"location":"phd_related/install-github-desktop/static/Untitled.html","text":"\u00b6 Title : Authors : Journal : Year : Place : Reference : Purpose \u00b6 Introduction \u00b6 Methods \u00b6 Results \u00b6 Discussion \u00b6 Conclusion \u00b6","title":"Untitled"},{"location":"phd_related/install-github-desktop/static/Untitled.html#_1","text":"Title : Authors : Journal : Year : Place : Reference :","title":""},{"location":"phd_related/install-github-desktop/static/Untitled.html#purpose","text":"","title":"Purpose"},{"location":"phd_related/install-github-desktop/static/Untitled.html#introduction","text":"","title":"Introduction"},{"location":"phd_related/install-github-desktop/static/Untitled.html#methods","text":"","title":"Methods"},{"location":"phd_related/install-github-desktop/static/Untitled.html#results","text":"","title":"Results"},{"location":"phd_related/install-github-desktop/static/Untitled.html#discussion","text":"","title":"Discussion"},{"location":"phd_related/install-github-desktop/static/Untitled.html#conclusion","text":"","title":"Conclusion"},{"location":"phd_related/reading-academic-papers/index.html","text":"One frequently asked question amoung graduate students is \"How do you organize/read manuscripts?\". I have found a workflow that works quite well and allows me to stay ontop of the endless amount of new publications. Setup an RSS feed \u00b6 The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly , which is simple and easy to use. On the main page, select Get started for free . If you do not want to link your social media accounts, select Continue with Feedly and use an email address of your choice. Once you have logged in you should see a search box for searching potential topics. Head over to PubMed and perform a common search you use to find articles you are interested in. I will use deep brain stimulation as an example. Once you search for the term in PubMed you will notice an option to Create RSS underneath the search box. Click this option. Leave the default options set and click the XML link to open a new tab. In the new tab, copy the full URL and paste it into the search box on the Feedly page and hit Enter. Once the search load click on the Follow tab, create a new feed for it and you will see it appear on the left side column. You can now login and find all recent articles indexed on PubMed about the topic you are interested in. This is a great tool to use to keep up-to-date on publications. Take Notes \u00b6 With any new article I come across, I try to make a quick summary note about it for later reference. A really nice tool for these notes is a software called Notable . Notable is a Markdown based notetaking application that makes sharing notes very open and easy. When you open Notable for the first time you will need to set your data directory. If you want to easily sync/share your notes, create a new Github repository and use that as your Notable data directory. I created a template note for myself that I use for each new article I read, which looks like: If you want the template you can download it here .","title":"Reading Academic Papers"},{"location":"phd_related/reading-academic-papers/index.html#setup-an-rss-feed","text":"The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly , which is simple and easy to use. On the main page, select Get started for free . If you do not want to link your social media accounts, select Continue with Feedly and use an email address of your choice. Once you have logged in you should see a search box for searching potential topics. Head over to PubMed and perform a common search you use to find articles you are interested in. I will use deep brain stimulation as an example. Once you search for the term in PubMed you will notice an option to Create RSS underneath the search box. Click this option. Leave the default options set and click the XML link to open a new tab. In the new tab, copy the full URL and paste it into the search box on the Feedly page and hit Enter. Once the search load click on the Follow tab, create a new feed for it and you will see it appear on the left side column. You can now login and find all recent articles indexed on PubMed about the topic you are interested in. This is a great tool to use to keep up-to-date on publications.","title":"Setup an RSS feed"},{"location":"phd_related/reading-academic-papers/index.html#take-notes","text":"With any new article I come across, I try to make a quick summary note about it for later reference. A really nice tool for these notes is a software called Notable . Notable is a Markdown based notetaking application that makes sharing notes very open and easy. When you open Notable for the first time you will need to set your data directory. If you want to easily sync/share your notes, create a new Github repository and use that as your Notable data directory. I created a template note for myself that I use for each new article I read, which looks like: If you want the template you can download it here .","title":"Take Notes"},{"location":"phd_related/reading-academic-papers/static/Untitled.html","text":"\u00b6 Title : Authors : Journal : Year : Place : Reference : Purpose \u00b6 Introduction \u00b6 Methods \u00b6 Results \u00b6 Discussion \u00b6 Conclusion \u00b6","title":"Untitled"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#_1","text":"Title : Authors : Journal : Year : Place : Reference :","title":""},{"location":"phd_related/reading-academic-papers/static/Untitled.html#purpose","text":"","title":"Purpose"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#introduction","text":"","title":"Introduction"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#methods","text":"","title":"Methods"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#results","text":"","title":"Results"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#discussion","text":"","title":"Discussion"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#conclusion","text":"","title":"Conclusion"}]}