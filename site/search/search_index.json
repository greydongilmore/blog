{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Greydon Gilmore Ph.D. candidate Biomedical Engineering Welcome! This blog is an accumulation of my past/present experiences during my graduate school career. I wanted a place to accumulate tips and ideas that I have found useful during my time as a grad student. I hope you find some useful material here, feel free to contact me . The content is split into two streams: PhD related : things I have found helpful during my PhD (i.e. software, processes etc.) Operating system tips: advice on installation of various software for different operating systems Ubuntu 18.04/20.04 Windows 10 subsystem for linux Windows 10","title":"Home"},{"location":"image_processing/001-introduction.html","text":"Image Processing Intro \u00b6 Image processing is a large and very general set of tools that are used across a variety of research disciplines to analyze image data. Naturally, image processing algorithms are fundamental to neuroimaging, because a lot (if not all) the data that we analyze in neuroimaging is image data. Image data is defined as multi-dimensional homogenous data in which spatial relationships matter . That is, neighbouring pixels are treated differently than pixels from disparate parts of the array. Spatial contiguity is meaningful. Usually, image data will have 2 or 3 dimensions, corresponding to the 3 spatial dimensions or 2D projection: either from a specific view-point (think photographs) or through a 3D object (think slice). Common image processing operations \u00b6 There are many different kinds of image processing operations. Here are a few common operations: Filtering Detrending Denoising Smoothing Segmentation Feature detection Texture analysis Statistical characterization Classification Registration Combination (e.g. 'stitching') Because of their nature (homogenous/spatial dimensions matter) data lend themselves easily to a representation as arrays. Let's demonstrate this with some human neuroimaging data. Nibabel \u00b6 One of the challenges of data science in neuroimaging (and in other scientific fields) is the range of different file formats that are used to store data. Often these files will be opaque to a naive user, because the data is stored in a binary format, that cannot be read without knowledge of the organization of the data on disks. The Nibabel library alleviates these difficulty through a careful implementation of a wider range of different neuroimaging file-formats. Wherever possible, the library presents a common interface to these different file formats, making it particularly easy to write code that will work on data stored in these different formats. To install it, you can use the following command-line call: python -m pip install nibabel Dipy \u00b6 Dipy stands for \"diffusion MRI in Python\", but it is a library devoted to diffusion MRI, as well as other applications in computational neuroimaging. To install it, you can use the following command-line call: python -m pip install dipy import dipy.data as dpd remote , local = dpd . fetch_stanford_t1 () remote is the URL from which the data was read (and a cryptographic hash used to validate the data) local is where the data is stored on your machine IPython knows how to make sense of that: ! ls $ local HARDI150.bval HARDI150.bvec HARDI150.nii.gz t1.nii.gz The data is stored in a compressed NIfTI file ( nii.gz extension). The path to the file we want is: import os.path as op t1_file = op . join ( local , 't1.nii.gz' ) The nibabel API for reading data from file has two steps: import nibabel as nib T1w_img = nib . load ( t1_file ) Because nibabel loads the data \"lazily\", the data hasn't been read into memory yet, only some basic metadata stored in the file header. To access the data, we need to explicitly call the get_data method of the image object that we currently have in memory: T1w_data = T1w_img . get_data () The data is stored in a numpy array. We can verify that by running: type ( T1w_data ) numpy.ndarray We can check some basic properties of this array by running: print ( T1w_data . shape ) print ( T1w_data . dtype ) (81, 106, 76) int16 We can also visualize the data that was stored in the file using Matplotlib import matplotlib.pyplot as plt % matplotlib inline fig , ax = plt . subplots ( 1 ) ax . matshow ( T1w_data [:, :, T1w_data . shape [ - 1 ] // 2 ], cmap = 'bone' )","title":"Image Processing Intro"},{"location":"image_processing/001-introduction.html#image-processing-intro","text":"Image processing is a large and very general set of tools that are used across a variety of research disciplines to analyze image data. Naturally, image processing algorithms are fundamental to neuroimaging, because a lot (if not all) the data that we analyze in neuroimaging is image data. Image data is defined as multi-dimensional homogenous data in which spatial relationships matter . That is, neighbouring pixels are treated differently than pixels from disparate parts of the array. Spatial contiguity is meaningful. Usually, image data will have 2 or 3 dimensions, corresponding to the 3 spatial dimensions or 2D projection: either from a specific view-point (think photographs) or through a 3D object (think slice).","title":"Image Processing Intro"},{"location":"image_processing/001-introduction.html#common-image-processing-operations","text":"There are many different kinds of image processing operations. Here are a few common operations: Filtering Detrending Denoising Smoothing Segmentation Feature detection Texture analysis Statistical characterization Classification Registration Combination (e.g. 'stitching') Because of their nature (homogenous/spatial dimensions matter) data lend themselves easily to a representation as arrays. Let's demonstrate this with some human neuroimaging data.","title":"Common image processing operations"},{"location":"image_processing/001-introduction.html#nibabel","text":"One of the challenges of data science in neuroimaging (and in other scientific fields) is the range of different file formats that are used to store data. Often these files will be opaque to a naive user, because the data is stored in a binary format, that cannot be read without knowledge of the organization of the data on disks. The Nibabel library alleviates these difficulty through a careful implementation of a wider range of different neuroimaging file-formats. Wherever possible, the library presents a common interface to these different file formats, making it particularly easy to write code that will work on data stored in these different formats. To install it, you can use the following command-line call: python -m pip install nibabel","title":"Nibabel"},{"location":"image_processing/001-introduction.html#dipy","text":"Dipy stands for \"diffusion MRI in Python\", but it is a library devoted to diffusion MRI, as well as other applications in computational neuroimaging. To install it, you can use the following command-line call: python -m pip install dipy import dipy.data as dpd remote , local = dpd . fetch_stanford_t1 () remote is the URL from which the data was read (and a cryptographic hash used to validate the data) local is where the data is stored on your machine IPython knows how to make sense of that: ! ls $ local HARDI150.bval HARDI150.bvec HARDI150.nii.gz t1.nii.gz The data is stored in a compressed NIfTI file ( nii.gz extension). The path to the file we want is: import os.path as op t1_file = op . join ( local , 't1.nii.gz' ) The nibabel API for reading data from file has two steps: import nibabel as nib T1w_img = nib . load ( t1_file ) Because nibabel loads the data \"lazily\", the data hasn't been read into memory yet, only some basic metadata stored in the file header. To access the data, we need to explicitly call the get_data method of the image object that we currently have in memory: T1w_data = T1w_img . get_data () The data is stored in a numpy array. We can verify that by running: type ( T1w_data ) numpy.ndarray We can check some basic properties of this array by running: print ( T1w_data . shape ) print ( T1w_data . dtype ) (81, 106, 76) int16 We can also visualize the data that was stored in the file using Matplotlib import matplotlib.pyplot as plt % matplotlib inline fig , ax = plt . subplots ( 1 ) ax . matshow ( T1w_data [:, :, T1w_data . shape [ - 1 ] // 2 ], cmap = 'bone' )","title":"Dipy"},{"location":"image_processing/002-segmentation.html","text":"Segmentation \u00b6 Questions: \u00b6 \"How can we segment an image into different sections?\" Objectives: \u00b6 \"Understand the prinicples behind the median Otsu segmentation algorithm\" \"Use scikit-image to perform histogram-based segmentation\" \"Use scikit-image to perform edge-based segmentatio\" Key points: \u00b6 \"There are (at least) three different ways to perform segmentation\" \"The first uses the histogram of the pixel gray values\" \"The second detects edges and fills between them\" Segmentation is a basic operation in image processing. Very often, we will want to use image information in order to differentiate between different parts of the image as belonging to different objects, or different classes. We will talk about two different ways of segmenting an image. Neither of them will be particularly good, but they will at least teach you how to think about image processing. We will use scikit-image to perform these operations. But first, let's get the data using nibabel import os.path as op import dipy.data as dpd remote , local = dpd . fetch_stanford_t1 () t1_file = op . join ( local , 't1.nii.gz' ) Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / stanford_hardi import nibabel as nib t1_img = nib . load ( t1_file ) t1_data = t1_img . get_data () Histogram-based segmentation \u00b6 One way of segmenting an image is to look at the histogram of the pixel intensities and differentiate between classes. Let's examine the histogram: from skimage import exposure import matplotlib.pyplot as plt % matplotlib inline hist , bin_centers = exposure . histogram ( t1_data . ravel ()) fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , hist ) [<matplotlib.lines.Line2D at 0x7f686a04d2b0>] import numpy as np t1_norm = ( t1_data - np . mean ( t1_data )) / np . std ( t1_data ) hist , bin_centers = exposure . histogram ( t1_norm . ravel ()) fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , hist ) [<matplotlib.lines.Line2D at 0x7f686a006240>] There are several different methods that use the histogram to perform segmentation. We'll closely examine one of these algorithms that is a classic algorithm designed by Nobuyuki Otsu, a Japanese Engineer, back in the 1970's Otsu's method for segmentation \u00b6 https://en.wikipedia.org/wiki/Otsu%27s_method Assumes there are two classes of voxels: background and foreground. The algorithm attempts to set a threshold in the histogram, such that the variance within each class of the image is minimized. The class probabilities as a function of the threshold \\(t\\) are the cumulative sums of the distributions up to that point: \\[w_1(t) = \\sum_{i=1}^{t-1} \\frac{hist(i)}{L}\\] \\[w_2(t) = \\sum_{i=t}^{L-1} \\frac{hist(i)}{L} \\] where L is the total number of pixels That looks like this: # Normalize the histogram to sum to 1: hist = hist . astype ( float ) / np . sum ( hist ) # class probabilities for all possible thresholds weight1 = np . cumsum ( hist ) weight2 = np . cumsum ( hist [:: - 1 ])[:: - 1 ] #Plotting this: fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , weight1 ) ax . plot ( bin_centers , weight2 ) [<matplotlib.lines.Line2D at 0x7f68676c2f98>] Recall that we are trying to minimize the intra-class variance: Otsu's method relies on finding a threshold that minimizes the intra-class variance: \\[\\sigma^2_w = w_1 \\sigma^2_1 + w_2 \\sigma^2_2\\] But minimizing intra-class variance is equivalent to maximazing inter-class Importantly, minimizing intra-class variance, is equivalent to maximizing inter-class variance. That is becauase: \\[\\sigma^2 = \\sigma^2_w + \\sigma^2_b\\] That's because the sum of squares is always constant: \\[\\sigma^2_b = \\sigma^2 - \\sigma^2_w\\] The inter-class variance can be written as: \\[w_1 (\\mu_1 - \\mu)^2 + w_2 (\\mu_2 - \\mu)^2 = w_1 w_2 (\\mu_1 - \\mu_2)^2\\] Where \\[\\mu_1 = \\sum_{i}^{t-1} \\frac{i p(i)}{w_1}\\] \\[\\mu_2 = \\sum_{t}^{L-1} \\frac{i p(i)}{w_2}\\] The advantage of this formulation is that it can be written in code that can run fast. We start by setting the means of the background/foreground for all possible thresholds: # class means for all possible thresholds mean1 = np . cumsum ( hist * bin_centers ) / weight1 mean2 = ( np . cumsum (( hist * bin_centers )[:: - 1 ]) / weight2 [:: - 1 ])[:: - 1 ] Plotting this: #Plotting this: fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , mean1 ) ax . plot ( bin_centers , mean2 ) [<matplotlib.lines.Line2D at 0x7f68676b0208>] And calculate the inter-class variance: # The last value of `weight1`/`mean1` should pair with zero values in # `weight2`/`mean2`, which do not exist. variance12 = weight1 [: - 1 ] * weight2 [ 1 :] * ( mean1 [: - 1 ] - mean2 [ 1 :]) ** 2 fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers [: - 1 ] , variance12 ) [<matplotlib.lines.Line2D at 0x7f6867645e10>] To find the threshold value that marks the distinction between the two classes we detect the maximum of this function: idx = np . argmax ( variance12 ) threshold = bin_centers [: - 1 ][ idx ] fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , hist ) ax . plot ([ threshold , threshold ], [ 0 , ax . get_ylim ()[ 1 ]]) [<matplotlib.lines.Line2D at 0x7f6867586470>] binary = t1_norm >= threshold fig , ax = plt . subplots () ax . matshow ( binary [:, :, binary . shape [ - 1 ] // 2 ], cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f68676384a8> This looks like it can (in this case, easily...) separate background from foreground. Can we do any better with a histogram-based segmentation. For example, do you think that it would be possible to strip the skull off with this type of algorithm? The filters module in scikit-image contains a variety of thresholding algorithms. You can try all of them by running: from skimage import filters for threshold in [ filters . threshold_isodata , filters . threshold_li , filters . threshold_otsu , filters . threshold_yen ]: fig , ax = plt . subplots ( 1 ) th = threshold ( t1_data [:, :, t1_data . shape [ - 1 ] // 2 ]) binary = t1_data >= th ax . matshow ( binary [:, :, binary . shape [ - 1 ] // 2 ], cmap = 'bone' ) Edge-based segmentation \u00b6 Another way to segment an image is based on detecting edges in the image, and filling between these edges. Detecting images is part of a larger set of operations that can be done on image: detecting image features. The module that does these operations is skimage.feature : from skimage import feature Unfortunately, these algorithms usually only work on 2D images, so we'll work on one slice from now on: im = t1_data [:, :, t1_data . shape [ - 1 ] // 2 ] A classic edge detection algorithm is the Canny filter. The performance of the algorithm depends strongly on the sigma parameter, which corresponds to the width of a Gaussian smoothing kernel that is applied to the image before edges are detected. edges1 = feature . canny ( im , sigma = 1 ) edges7 = feature . canny ( im , sigma = 7 ) fig , ax = plt . subplots ( 1 , 2 ) ax [ 0 ] . matshow ( edges1 , cmap = 'bone' ) ax [ 1 ] . matshow ( edges7 , cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f68616fd5c0> Scikit image works well together with the image processing tools that are implemented in scipy. We use these to dilate the edges slightly and fill the holes in the image: from scipy import ndimage as ndi dilated = ndi . binary_dilation ( edges7 , iterations = 4 ) fill_brain = ndi . binary_fill_holes ( dilated ) fig , ax = plt . subplots ( 1 ) ax . matshow ( fill_brain , cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f6861dd97f0> brain = np . zeros ( im . shape ) brain [ fill_brain ] = im [ fill_brain ] fig , ax = plt . subplots ( 1 ) ax . matshow ( brain , cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f68616b2550> This works rather well in detecting the parts of the image that contain the skull! brain = np . copy ( im ) brain [ fill_brain ] = 0 fig , ax = plt . subplots ( 1 ) ax . matshow ( brain , cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f6861593e80> This is in the right direction, but is not good enough. Another approach to segmentation is a so-called watershed approach. In this approach we define gradients of change in the image and use these as cues to a \"flooding\" process. The algorithm treats the image as a series of valleys and will not cross the watersheds between them. from scipy import ndimage as ndi import matplotlib.pyplot as plt from skimage.morphology import watershed , disk from skimage import data from skimage.filters import rank from skimage.util import img_as_ubyte image = np . zeros ( im . shape ) th_otsu = filters . threshold_otsu ( im ) image [ im > th_otsu ] = 1 # find continuous region (low gradient - # where less than 10 for this image) --> markers # disk(5) is used here to get a more smooth image markers = rank . gradient ( image , disk ( 5 )) < 10 markers = ndi . label ( markers )[ 0 ] # local gradient (disk(2) is used to keep edges thin) gradient = rank . gradient ( image , disk ( 2 )) # process the watershed labels = watershed ( gradient , markers ) # display results fig , axes = plt . subplots ( nrows = 2 , ncols = 2 , figsize = ( 8 , 8 ), sharex = True , sharey = True , subplot_kw = { 'adjustable' : 'box-forced' }) ax = axes . ravel () ax [ 0 ] . imshow ( image , cmap = plt . cm . gray , interpolation = 'nearest' ) ax [ 0 ] . set_title ( \"Original\" ) ax [ 1 ] . imshow ( gradient , cmap = plt . cm . hot , interpolation = 'nearest' ) ax [ 1 ] . set_title ( \"Local Gradient\" ) ax [ 2 ] . imshow ( markers , cmap = plt . cm . spectral , interpolation = 'nearest' ) ax [ 2 ] . set_title ( \"Markers\" ) ax [ 3 ] . imshow ( im , cmap = plt . cm . gray , interpolation = 'nearest' ) ax [ 3 ] . imshow ( labels , cmap = plt . cm . spectral , interpolation = 'nearest' , alpha = .7 ) #ax[3].imshow(labels<3, cmap=plt.cm.bone, interpolation='nearest', alpha=.7) ax [ 3 ] . set_title ( \"Segmented\" ) for a in ax : a . axis ( 'off' ) fig . tight_layout () plt . show () /opt/conda/lib/python3.5/site-packages/skimage/util/dtype.py:111: UserWarning: Possible precision loss when converting from float64 to uint8 \"%s to %s\" % (dtypeobj_in, dtypeobj)) This works much better! You don't really need to roll your own \u00b6 Dipy has developed an algorithm based on iterative application of the Otsu algorithm and a median filter, shown below: from dipy.segment.mask import median_otsu t1_mask , mask = median_otsu ( t1_data ) /opt/conda/lib/python3.5/site-packages/skimage/filter/__init__.py:6: skimage_deprecation: The `skimage.filter` module has been renamed to `skimage.filters`. This placeholder module will be removed in v0.13. warn(skimage_deprecation('The `skimage.filter` module has been renamed ' fig , ax = plt . subplots ( 1 ) ax . matshow ( t1_mask [:, :, t1_mask . shape [ - 1 ] // 2 ], cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f6861dcfa90> Conclusions \u00b6 You can use any one of these approaches, but you will find that often it is necessary to construct a pipeline of image operations: filtering, segmentation, feature-detection etc. in order to process your image and detect.","title":"Segmentation"},{"location":"image_processing/002-segmentation.html#segmentation","text":"","title":"Segmentation"},{"location":"image_processing/002-segmentation.html#questions","text":"\"How can we segment an image into different sections?\"","title":"Questions:"},{"location":"image_processing/002-segmentation.html#objectives","text":"\"Understand the prinicples behind the median Otsu segmentation algorithm\" \"Use scikit-image to perform histogram-based segmentation\" \"Use scikit-image to perform edge-based segmentatio\"","title":"Objectives:"},{"location":"image_processing/002-segmentation.html#key-points","text":"\"There are (at least) three different ways to perform segmentation\" \"The first uses the histogram of the pixel gray values\" \"The second detects edges and fills between them\" Segmentation is a basic operation in image processing. Very often, we will want to use image information in order to differentiate between different parts of the image as belonging to different objects, or different classes. We will talk about two different ways of segmenting an image. Neither of them will be particularly good, but they will at least teach you how to think about image processing. We will use scikit-image to perform these operations. But first, let's get the data using nibabel import os.path as op import dipy.data as dpd remote , local = dpd . fetch_stanford_t1 () t1_file = op . join ( local , 't1.nii.gz' ) Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / stanford_hardi import nibabel as nib t1_img = nib . load ( t1_file ) t1_data = t1_img . get_data ()","title":"Key points:"},{"location":"image_processing/002-segmentation.html#histogram-based-segmentation","text":"One way of segmenting an image is to look at the histogram of the pixel intensities and differentiate between classes. Let's examine the histogram: from skimage import exposure import matplotlib.pyplot as plt % matplotlib inline hist , bin_centers = exposure . histogram ( t1_data . ravel ()) fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , hist ) [<matplotlib.lines.Line2D at 0x7f686a04d2b0>] import numpy as np t1_norm = ( t1_data - np . mean ( t1_data )) / np . std ( t1_data ) hist , bin_centers = exposure . histogram ( t1_norm . ravel ()) fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , hist ) [<matplotlib.lines.Line2D at 0x7f686a006240>] There are several different methods that use the histogram to perform segmentation. We'll closely examine one of these algorithms that is a classic algorithm designed by Nobuyuki Otsu, a Japanese Engineer, back in the 1970's","title":"Histogram-based segmentation"},{"location":"image_processing/002-segmentation.html#otsus-method-for-segmentation","text":"https://en.wikipedia.org/wiki/Otsu%27s_method Assumes there are two classes of voxels: background and foreground. The algorithm attempts to set a threshold in the histogram, such that the variance within each class of the image is minimized. The class probabilities as a function of the threshold \\(t\\) are the cumulative sums of the distributions up to that point: \\[w_1(t) = \\sum_{i=1}^{t-1} \\frac{hist(i)}{L}\\] \\[w_2(t) = \\sum_{i=t}^{L-1} \\frac{hist(i)}{L} \\] where L is the total number of pixels That looks like this: # Normalize the histogram to sum to 1: hist = hist . astype ( float ) / np . sum ( hist ) # class probabilities for all possible thresholds weight1 = np . cumsum ( hist ) weight2 = np . cumsum ( hist [:: - 1 ])[:: - 1 ] #Plotting this: fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , weight1 ) ax . plot ( bin_centers , weight2 ) [<matplotlib.lines.Line2D at 0x7f68676c2f98>] Recall that we are trying to minimize the intra-class variance: Otsu's method relies on finding a threshold that minimizes the intra-class variance: \\[\\sigma^2_w = w_1 \\sigma^2_1 + w_2 \\sigma^2_2\\] But minimizing intra-class variance is equivalent to maximazing inter-class Importantly, minimizing intra-class variance, is equivalent to maximizing inter-class variance. That is becauase: \\[\\sigma^2 = \\sigma^2_w + \\sigma^2_b\\] That's because the sum of squares is always constant: \\[\\sigma^2_b = \\sigma^2 - \\sigma^2_w\\] The inter-class variance can be written as: \\[w_1 (\\mu_1 - \\mu)^2 + w_2 (\\mu_2 - \\mu)^2 = w_1 w_2 (\\mu_1 - \\mu_2)^2\\] Where \\[\\mu_1 = \\sum_{i}^{t-1} \\frac{i p(i)}{w_1}\\] \\[\\mu_2 = \\sum_{t}^{L-1} \\frac{i p(i)}{w_2}\\] The advantage of this formulation is that it can be written in code that can run fast. We start by setting the means of the background/foreground for all possible thresholds: # class means for all possible thresholds mean1 = np . cumsum ( hist * bin_centers ) / weight1 mean2 = ( np . cumsum (( hist * bin_centers )[:: - 1 ]) / weight2 [:: - 1 ])[:: - 1 ] Plotting this: #Plotting this: fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , mean1 ) ax . plot ( bin_centers , mean2 ) [<matplotlib.lines.Line2D at 0x7f68676b0208>] And calculate the inter-class variance: # The last value of `weight1`/`mean1` should pair with zero values in # `weight2`/`mean2`, which do not exist. variance12 = weight1 [: - 1 ] * weight2 [ 1 :] * ( mean1 [: - 1 ] - mean2 [ 1 :]) ** 2 fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers [: - 1 ] , variance12 ) [<matplotlib.lines.Line2D at 0x7f6867645e10>] To find the threshold value that marks the distinction between the two classes we detect the maximum of this function: idx = np . argmax ( variance12 ) threshold = bin_centers [: - 1 ][ idx ] fig , ax = plt . subplots ( 1 ) ax . plot ( bin_centers , hist ) ax . plot ([ threshold , threshold ], [ 0 , ax . get_ylim ()[ 1 ]]) [<matplotlib.lines.Line2D at 0x7f6867586470>] binary = t1_norm >= threshold fig , ax = plt . subplots () ax . matshow ( binary [:, :, binary . shape [ - 1 ] // 2 ], cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f68676384a8> This looks like it can (in this case, easily...) separate background from foreground. Can we do any better with a histogram-based segmentation. For example, do you think that it would be possible to strip the skull off with this type of algorithm? The filters module in scikit-image contains a variety of thresholding algorithms. You can try all of them by running: from skimage import filters for threshold in [ filters . threshold_isodata , filters . threshold_li , filters . threshold_otsu , filters . threshold_yen ]: fig , ax = plt . subplots ( 1 ) th = threshold ( t1_data [:, :, t1_data . shape [ - 1 ] // 2 ]) binary = t1_data >= th ax . matshow ( binary [:, :, binary . shape [ - 1 ] // 2 ], cmap = 'bone' )","title":"Otsu's method for segmentation"},{"location":"image_processing/002-segmentation.html#edge-based-segmentation","text":"Another way to segment an image is based on detecting edges in the image, and filling between these edges. Detecting images is part of a larger set of operations that can be done on image: detecting image features. The module that does these operations is skimage.feature : from skimage import feature Unfortunately, these algorithms usually only work on 2D images, so we'll work on one slice from now on: im = t1_data [:, :, t1_data . shape [ - 1 ] // 2 ] A classic edge detection algorithm is the Canny filter. The performance of the algorithm depends strongly on the sigma parameter, which corresponds to the width of a Gaussian smoothing kernel that is applied to the image before edges are detected. edges1 = feature . canny ( im , sigma = 1 ) edges7 = feature . canny ( im , sigma = 7 ) fig , ax = plt . subplots ( 1 , 2 ) ax [ 0 ] . matshow ( edges1 , cmap = 'bone' ) ax [ 1 ] . matshow ( edges7 , cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f68616fd5c0> Scikit image works well together with the image processing tools that are implemented in scipy. We use these to dilate the edges slightly and fill the holes in the image: from scipy import ndimage as ndi dilated = ndi . binary_dilation ( edges7 , iterations = 4 ) fill_brain = ndi . binary_fill_holes ( dilated ) fig , ax = plt . subplots ( 1 ) ax . matshow ( fill_brain , cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f6861dd97f0> brain = np . zeros ( im . shape ) brain [ fill_brain ] = im [ fill_brain ] fig , ax = plt . subplots ( 1 ) ax . matshow ( brain , cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f68616b2550> This works rather well in detecting the parts of the image that contain the skull! brain = np . copy ( im ) brain [ fill_brain ] = 0 fig , ax = plt . subplots ( 1 ) ax . matshow ( brain , cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f6861593e80> This is in the right direction, but is not good enough. Another approach to segmentation is a so-called watershed approach. In this approach we define gradients of change in the image and use these as cues to a \"flooding\" process. The algorithm treats the image as a series of valleys and will not cross the watersheds between them. from scipy import ndimage as ndi import matplotlib.pyplot as plt from skimage.morphology import watershed , disk from skimage import data from skimage.filters import rank from skimage.util import img_as_ubyte image = np . zeros ( im . shape ) th_otsu = filters . threshold_otsu ( im ) image [ im > th_otsu ] = 1 # find continuous region (low gradient - # where less than 10 for this image) --> markers # disk(5) is used here to get a more smooth image markers = rank . gradient ( image , disk ( 5 )) < 10 markers = ndi . label ( markers )[ 0 ] # local gradient (disk(2) is used to keep edges thin) gradient = rank . gradient ( image , disk ( 2 )) # process the watershed labels = watershed ( gradient , markers ) # display results fig , axes = plt . subplots ( nrows = 2 , ncols = 2 , figsize = ( 8 , 8 ), sharex = True , sharey = True , subplot_kw = { 'adjustable' : 'box-forced' }) ax = axes . ravel () ax [ 0 ] . imshow ( image , cmap = plt . cm . gray , interpolation = 'nearest' ) ax [ 0 ] . set_title ( \"Original\" ) ax [ 1 ] . imshow ( gradient , cmap = plt . cm . hot , interpolation = 'nearest' ) ax [ 1 ] . set_title ( \"Local Gradient\" ) ax [ 2 ] . imshow ( markers , cmap = plt . cm . spectral , interpolation = 'nearest' ) ax [ 2 ] . set_title ( \"Markers\" ) ax [ 3 ] . imshow ( im , cmap = plt . cm . gray , interpolation = 'nearest' ) ax [ 3 ] . imshow ( labels , cmap = plt . cm . spectral , interpolation = 'nearest' , alpha = .7 ) #ax[3].imshow(labels<3, cmap=plt.cm.bone, interpolation='nearest', alpha=.7) ax [ 3 ] . set_title ( \"Segmented\" ) for a in ax : a . axis ( 'off' ) fig . tight_layout () plt . show () /opt/conda/lib/python3.5/site-packages/skimage/util/dtype.py:111: UserWarning: Possible precision loss when converting from float64 to uint8 \"%s to %s\" % (dtypeobj_in, dtypeobj)) This works much better!","title":"Edge-based segmentation"},{"location":"image_processing/002-segmentation.html#you-dont-really-need-to-roll-your-own","text":"Dipy has developed an algorithm based on iterative application of the Otsu algorithm and a median filter, shown below: from dipy.segment.mask import median_otsu t1_mask , mask = median_otsu ( t1_data ) /opt/conda/lib/python3.5/site-packages/skimage/filter/__init__.py:6: skimage_deprecation: The `skimage.filter` module has been renamed to `skimage.filters`. This placeholder module will be removed in v0.13. warn(skimage_deprecation('The `skimage.filter` module has been renamed ' fig , ax = plt . subplots ( 1 ) ax . matshow ( t1_mask [:, :, t1_mask . shape [ - 1 ] // 2 ], cmap = 'bone' ) <matplotlib.image.AxesImage at 0x7f6861dcfa90>","title":"You don't really need to roll your own"},{"location":"image_processing/002-segmentation.html#conclusions","text":"You can use any one of these approaches, but you will find that often it is necessary to construct a pipeline of image operations: filtering, segmentation, feature-detection etc. in order to process your image and detect.","title":"Conclusions"},{"location":"image_processing/003-detrending.html","text":"Detrending \u00b6 (teaching: 25 minutes, exercises: 10 minutes) Questions: \u00b6 \"How do we eliminate trends in our data?\" \"Why are linear models useful?s\" Objectives: \u00b6 \"Detrend image data with a linear model\" \"Use a linearized quadratic model to fit second order effects\" Keypoints: \u00b6 \"Linear models are useful to represent the images in a concise and computationally expedient manner\" \"Linearized models are used to fit more complex models using the same mathematical framework\" import os.path as op import dipy.data as dpd remote , local = dpd . fetch_stanford_t1 () T1_file = op . join ( local , 't1.nii.gz' ) Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / stanford_hardi import nibabel as nib T1w_img = nib . load ( T1_file ) T1w_data = T1w_img . get_data () We will use the segmentation algorithm we saw before to focus only on the part of the image that contains the brain: from dipy.segment.mask import median_otsu T1w_data , mask = median_otsu ( T1w_data ) /opt/conda/lib/python3.5/site-packages/skimage/filter/__init__.py:6: skimage_deprecation: The `skimage.filter` module has been renamed to `skimage.filters`. This placeholder module will be removed in v0.13. warn(skimage_deprecation('The `skimage.filter` module has been renamed ' Using the spatial relationships in image processing \u00b6 In the next example of image processing , the spatial relationships between voxels will be made rather explicit. We will use the spatial coordinates to remove spatial trends from the data. Our data contains spatial bias \u00b6 As we saw in the last part, MRI data often contains spatial biases. Some of these may be due to physiological factors, such as differences in the T1 time-constant between different parts of the brain. But some of these represent \"nuisance factors\" that should be eliminated as a first step in the analysis of the image. For example, the image is brighter in the back of the head of this participant than in the front. This often happens when the head is placed closer to the measurement coils that are at the bottom of the coil, closer to the occipital cortex. We can also see that the center of the brain is darker than the more external parts, also presumably due to the distance of these parts from the measurement coils. To model this spatial bias and remove it, we will assume that changes across the entire extent of the image are due to bias. Modeling linear bias and detrending \u00b6 A linear spatial bias can be thought of as another 3D volume that coexists in the same space as our data. This bias field can be modeled as a combination of of biases on the x, y and z dimensions. We'll use the np.meshgrid function to create volumes that contain the 3D functions: \\(vol(x,y,z) = x \\\\ vol(x,y,z) = y \\\\ vol(x,y,z) = z \\\\\\) import numpy as np import matplotlib.pyplot as plt % matplotlib inline x , y , z = np . meshgrid ( range ( - T1w_data . shape [ 0 ] // 2 , T1w_data . shape [ 0 ] // 2 ), range ( - T1w_data . shape [ 1 ] // 2 , T1w_data . shape [ 1 ] // 2 ), range ( - T1w_data . shape [ 2 ] // 2 , T1w_data . shape [ 2 ] // 2 ), indexing = 'ij' ) To clarify, let's also create a little function that will help us view these volumes: def show_volumes ( volume_list ): fig , ax = plt . subplots ( 1 , len ( volume_list )) for idx in range ( len ( volume_list )): this = volume_list [ idx ] ax [ idx ] . matshow ( this [:, :, this . shape [ - 1 ] // 2 ], cmap = 'bone' ) ax [ idx ] . axis ( 'off' ) fig . set_size_inches ([ 14 , 5 ]) return fig For example, the following should show sections through the T1-weighted data, as well as through each one of these volumes: fig1 = show_volumes ([ T1w_data , x , y , z ]) fig2 = show_volumes ([ T1w_data . T , x . T , y . T , z . T ]) You can see that in the top row, the x volume changes gradually along the right-left dimension of the participants head. The y volume changes gradually along the anterior-posterior dimension. The z volume doesn't change at all (why?). Similarly, in the second row, the z and y volumes change, while the x volume remains constant along this entire slice. Mathematically, the bias field can be described as a linear combination of these three volumes: \\(data_{measured} = data_{true} + bias\\) \\(bias = data_{measured} - data_{true}\\) where $bias = \\beta_1 x + \\beta_2 y + \\beta_3 z $ Another way of saying this is that all linear bias fields are spanned by the basis set comprising x , y and z . Next, we are going to make a simple assumption that in the lack of any spatial bias, the data would have a more-or-less constant value across space. That is, we assume that for unbiased data, \\(\\beta_1 = \\beta_2 = \\beta_3 = 0\\) . This seems like a strange assumption to make, but it makes sense when you think of the fact that we expect the brain to be more or less symmetrical (it's not supposed to be much brighter in any particular direction), and given the spatial scale of the functions we are using for debiasing. Even if you feel uncomfortable with this assumption, you might want to remember that the T1-weighted measurement is just that: a non-quantitative weighted measurement that is affected by T1, but not directly reflective of. If subsequent image processing operations are made simpler by this detrending, it might be worth ignoring actual biological differences (e.g. white matter with T1 that is slightly different in frontal cortex, relative to other lobes) in the service of these other steps. But this allows us to rewrite the above function as: \\(data_{measured} = \\beta_1 x + \\beta_2 y + \\beta_3 z\\) Then, To find the values of \\({\\bf \\beta}\\) we start by unraveling the data and the regressors into one-dimensional vector form, using the np.ravel function: regressors = np . vstack ([ np . ravel ( x ), np . ravel ( y ), np . ravel ( z )]) . T data = np . ravel ( T1w_data . ravel ()) data . shape , regressors . shape ((652536,), (652536, 3)) The shape of the unravelled data is the product of the x , y and z dimensions of the data The problem we are now trying to solve can be written as the following set of linear equations: $\\begin{pmatrix} T1_{0,0,0} \\ T1_{0,0,1} \\ \\vdots \\ T1_{0, 0, N_z} \\ T1_{0, 1, 0} \\ T1_{0,1,1} \\ \\vdots \\ T1_{1,0,0} \\ T1_{1,0,1} \\ \\vdots \\ T1_{N_x, N_y, N_z} \\end{pmatrix} = \\begin{pmatrix} x_{0,0,0} & y_{0,0,0} & z_{0,0,0} \\ x_{0,0,1} & y_{0,0,1} & z_{0,0,1}\\ \\vdots & \\vdots & \\vdots \\ x_{0, 0, N_z} & y_{0, 0, N_z} & z_{0, 0, N_z} \\ x_{0, 1, 0} & y_{0, 1, 0} & z_{0, 1, 0} \\ x_{0,1,1} & y_{0,1,1} & z_{0,1,1} \\ \\vdots & \\vdots & \\vdots \\ x_{1,0,0} & y_{1,0,0} & z_{1,0,0} \\ x_{1,0,1} & y_{1,0,1} & z_{1,0,1}\\ \\vdots & \\vdots & \\vdots \\ x_{N_x, N_y, N_z} & y_{N_x, N_y, N_z} & z_{N_x, N_y, N_z} \\end{pmatrix} \\begin{pmatrix} \\beta_1 \\ \\beta_2 \\ \\beta_3 \\end{pmatrix} $ These equations can be solved for \\({\\bf \\beta}\\) with an Ordinary Least Squares solution. This is implemented in scipy.linalg as lstsq : import scipy.linalg as la # la.lstsq? # Get help about this function solution = la . lstsq ( regressors , data ) Because the solution is a tuple with a variety of information about the solution, we'll just extract out only the first element: beta_hat = solution [ 0 ] Inverting the equation gives us an estimate of the linear trend, but it still has the unravelled shape: linear_trend = np . dot ( regressors , beta_hat ) linear_trend . shape (652536,) We reshape it back to the correct shape, and remove it from the data for a detrended volume, which we can examine side-by-side with the original data: linear_trend = np . reshape ( linear_trend , T1w_data . shape ) T1w_linear_detrend = T1w_data - linear_trend fig = show_volumes ([ T1w_data , linear_trend , T1w_linear_detrend ]) Let's write a function to codify this entire process: def detrend ( data , regressors ): regressors = np . vstack ([ r . ravel () for r in regressors ]) . T solution = la . lstsq ( regressors , data . ravel ()) beta_hat = solution [ 0 ] trend = np . dot ( regressors , beta_hat ) detrended = data - np . reshape ( trend , data . shape ) return detrended , beta_hat This simplifies the process to: T1w_linear_detrend , beta_hat = detrend ( T1w_data , [ x , y , z ]) fig = show_volumes ([ T1w_data , T1w_linear_detrend ]) \"Detrending\" \u00b6 Note that \"detrending\" is often used in a similar manner in neuroimaging to remove temporal biases. Here we are rather performing a spatial detrending operation One way to understand the nature of the bias field is to examine the values of the coefficients that were found in the solution to the linear equations. fig , ax = plt . subplots () ax . bar ( np . arange ( beta_hat . shape [ 0 ]), beta_hat ) ax . set_xticks ( np . arange ( beta_hat . shape [ 0 ]) + 0.4 ) ax . set_xticklabels ([ 'x' , 'y' , 'z' ]) ax . set_ylabel ( 'beta' ) <matplotlib.text.Text at 0x7f85cf2569e8> We can see that there is almost no up-down bias field. Indeed, there is some anterior-posterior bias and an even more substantial superior-inferior bias. What can we do with the remaining interior-exterior bias? \u00b6 Examining the images, we can see that the detrending has removed some of the biases in the data, but there is still a clear interior-exterior bias.s What could we do to help mitigate this additional bias? Removing additional bias with a linearized model \u00b6 The linear model we have seen so far does manage to get rid of some of the bias, but what can we do to get rid of the interior-exterior bias? To do so, we add to our bias-field model quadratic functions, to augment the linear trends that we already have included: x_sq = x ** 2 y_sq = y ** 2 z_sq = z ** 2 fig = show_volumes ([ x_sq , y_sq , z_sq ]) These functions allow us to model second order trends in the data. Perfect for modeling trends like a center-out brightening. This model has more parameters and a wider design matrix: \\[ data = \\beta_1 {\\bf x} + \\beta_2 {\\bf y} + \\beta_3 {\\bf z} + \\beta_4 {\\bf x^2} + \\beta_5 {\\bf y^2} + \\beta_6 {\\bf z^2} \\] \\[ \\begin{pmatrix} {\\bf T1w} \\\\ \\vdots \\end{pmatrix} = \\begin{pmatrix} {\\bf x} && {\\bf y} && {\\bf z} && {\\bf x^2} && {\\bf y^2} && {\\bf z^2} \\\\ \\vdots && \\vdots && \\vdots && \\vdots && \\vdots && \\vdots \\end{pmatrix} \\begin{pmatrix} \\beta_1 \\\\ \\beta_2 \\\\ \\beta_3 \\\\ \\beta_4 \\\\ \\beta_5 \\\\ \\beta_6 \\end{pmatrix} \\] We sometimes call this kind of a model a \"linearized\" model, because we have inserted non-linear equations into the form of the general linear model. Using our detrend function, we can construct and solve the augmented model: T1w_data_detrended_quad , beta_hat = detrend ( T1w_data , [ x , y , z , x_sq , y_sq , z_sq ]) fig = show_volumes ([ T1w_data , T1w_linear_detrend , T1w_data_detrended_quad ]) fig , ax = plt . subplots () ax . bar ( np . arange ( beta_hat . shape [ 0 ]), beta_hat ) ax . set_xticks ( np . arange ( beta_hat . shape [ 0 ]) + 0.4 ) ax . set_xticklabels ([ 'x' , 'y' , 'z' , '$x^2$' , '$y^2$' , '$z^2$' ]) ax . set_ylabel ( 'beta' ) <matplotlib.text.Text at 0x7f85d39a8198> Should we keep going? \u00b6 We could augment this model of the bias further with additional functions ( \\(x^3\\) , \\(x^4\\) , etc.), but should we really keep going? At some point, the functions that we use will start picking up the interesting spatial variation in the data, rather than the large-scale bias. So, we can't just keep going with this. When is it enough? \u00b6 In some conditions, you might be able to determine empirically when you should stop the process of augmenting a model. A variation of this principle is demonstrated in the temporal domain in this paper","title":"Detrending"},{"location":"image_processing/003-detrending.html#detrending","text":"(teaching: 25 minutes, exercises: 10 minutes)","title":"Detrending"},{"location":"image_processing/003-detrending.html#questions","text":"\"How do we eliminate trends in our data?\" \"Why are linear models useful?s\"","title":"Questions:"},{"location":"image_processing/003-detrending.html#objectives","text":"\"Detrend image data with a linear model\" \"Use a linearized quadratic model to fit second order effects\"","title":"Objectives:"},{"location":"image_processing/003-detrending.html#keypoints","text":"\"Linear models are useful to represent the images in a concise and computationally expedient manner\" \"Linearized models are used to fit more complex models using the same mathematical framework\" import os.path as op import dipy.data as dpd remote , local = dpd . fetch_stanford_t1 () T1_file = op . join ( local , 't1.nii.gz' ) Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / stanford_hardi import nibabel as nib T1w_img = nib . load ( T1_file ) T1w_data = T1w_img . get_data () We will use the segmentation algorithm we saw before to focus only on the part of the image that contains the brain: from dipy.segment.mask import median_otsu T1w_data , mask = median_otsu ( T1w_data ) /opt/conda/lib/python3.5/site-packages/skimage/filter/__init__.py:6: skimage_deprecation: The `skimage.filter` module has been renamed to `skimage.filters`. This placeholder module will be removed in v0.13. warn(skimage_deprecation('The `skimage.filter` module has been renamed '","title":"Keypoints:"},{"location":"image_processing/003-detrending.html#using-the-spatial-relationships-in-image-processing","text":"In the next example of image processing , the spatial relationships between voxels will be made rather explicit. We will use the spatial coordinates to remove spatial trends from the data.","title":"Using the spatial relationships in image processing"},{"location":"image_processing/003-detrending.html#our-data-contains-spatial-bias","text":"As we saw in the last part, MRI data often contains spatial biases. Some of these may be due to physiological factors, such as differences in the T1 time-constant between different parts of the brain. But some of these represent \"nuisance factors\" that should be eliminated as a first step in the analysis of the image. For example, the image is brighter in the back of the head of this participant than in the front. This often happens when the head is placed closer to the measurement coils that are at the bottom of the coil, closer to the occipital cortex. We can also see that the center of the brain is darker than the more external parts, also presumably due to the distance of these parts from the measurement coils. To model this spatial bias and remove it, we will assume that changes across the entire extent of the image are due to bias.","title":"Our data contains spatial bias"},{"location":"image_processing/003-detrending.html#modeling-linear-bias-and-detrending","text":"A linear spatial bias can be thought of as another 3D volume that coexists in the same space as our data. This bias field can be modeled as a combination of of biases on the x, y and z dimensions. We'll use the np.meshgrid function to create volumes that contain the 3D functions: \\(vol(x,y,z) = x \\\\ vol(x,y,z) = y \\\\ vol(x,y,z) = z \\\\\\) import numpy as np import matplotlib.pyplot as plt % matplotlib inline x , y , z = np . meshgrid ( range ( - T1w_data . shape [ 0 ] // 2 , T1w_data . shape [ 0 ] // 2 ), range ( - T1w_data . shape [ 1 ] // 2 , T1w_data . shape [ 1 ] // 2 ), range ( - T1w_data . shape [ 2 ] // 2 , T1w_data . shape [ 2 ] // 2 ), indexing = 'ij' ) To clarify, let's also create a little function that will help us view these volumes: def show_volumes ( volume_list ): fig , ax = plt . subplots ( 1 , len ( volume_list )) for idx in range ( len ( volume_list )): this = volume_list [ idx ] ax [ idx ] . matshow ( this [:, :, this . shape [ - 1 ] // 2 ], cmap = 'bone' ) ax [ idx ] . axis ( 'off' ) fig . set_size_inches ([ 14 , 5 ]) return fig For example, the following should show sections through the T1-weighted data, as well as through each one of these volumes: fig1 = show_volumes ([ T1w_data , x , y , z ]) fig2 = show_volumes ([ T1w_data . T , x . T , y . T , z . T ]) You can see that in the top row, the x volume changes gradually along the right-left dimension of the participants head. The y volume changes gradually along the anterior-posterior dimension. The z volume doesn't change at all (why?). Similarly, in the second row, the z and y volumes change, while the x volume remains constant along this entire slice. Mathematically, the bias field can be described as a linear combination of these three volumes: \\(data_{measured} = data_{true} + bias\\) \\(bias = data_{measured} - data_{true}\\) where $bias = \\beta_1 x + \\beta_2 y + \\beta_3 z $ Another way of saying this is that all linear bias fields are spanned by the basis set comprising x , y and z . Next, we are going to make a simple assumption that in the lack of any spatial bias, the data would have a more-or-less constant value across space. That is, we assume that for unbiased data, \\(\\beta_1 = \\beta_2 = \\beta_3 = 0\\) . This seems like a strange assumption to make, but it makes sense when you think of the fact that we expect the brain to be more or less symmetrical (it's not supposed to be much brighter in any particular direction), and given the spatial scale of the functions we are using for debiasing. Even if you feel uncomfortable with this assumption, you might want to remember that the T1-weighted measurement is just that: a non-quantitative weighted measurement that is affected by T1, but not directly reflective of. If subsequent image processing operations are made simpler by this detrending, it might be worth ignoring actual biological differences (e.g. white matter with T1 that is slightly different in frontal cortex, relative to other lobes) in the service of these other steps. But this allows us to rewrite the above function as: \\(data_{measured} = \\beta_1 x + \\beta_2 y + \\beta_3 z\\) Then, To find the values of \\({\\bf \\beta}\\) we start by unraveling the data and the regressors into one-dimensional vector form, using the np.ravel function: regressors = np . vstack ([ np . ravel ( x ), np . ravel ( y ), np . ravel ( z )]) . T data = np . ravel ( T1w_data . ravel ()) data . shape , regressors . shape ((652536,), (652536, 3)) The shape of the unravelled data is the product of the x , y and z dimensions of the data The problem we are now trying to solve can be written as the following set of linear equations: $\\begin{pmatrix} T1_{0,0,0} \\ T1_{0,0,1} \\ \\vdots \\ T1_{0, 0, N_z} \\ T1_{0, 1, 0} \\ T1_{0,1,1} \\ \\vdots \\ T1_{1,0,0} \\ T1_{1,0,1} \\ \\vdots \\ T1_{N_x, N_y, N_z} \\end{pmatrix} = \\begin{pmatrix} x_{0,0,0} & y_{0,0,0} & z_{0,0,0} \\ x_{0,0,1} & y_{0,0,1} & z_{0,0,1}\\ \\vdots & \\vdots & \\vdots \\ x_{0, 0, N_z} & y_{0, 0, N_z} & z_{0, 0, N_z} \\ x_{0, 1, 0} & y_{0, 1, 0} & z_{0, 1, 0} \\ x_{0,1,1} & y_{0,1,1} & z_{0,1,1} \\ \\vdots & \\vdots & \\vdots \\ x_{1,0,0} & y_{1,0,0} & z_{1,0,0} \\ x_{1,0,1} & y_{1,0,1} & z_{1,0,1}\\ \\vdots & \\vdots & \\vdots \\ x_{N_x, N_y, N_z} & y_{N_x, N_y, N_z} & z_{N_x, N_y, N_z} \\end{pmatrix} \\begin{pmatrix} \\beta_1 \\ \\beta_2 \\ \\beta_3 \\end{pmatrix} $ These equations can be solved for \\({\\bf \\beta}\\) with an Ordinary Least Squares solution. This is implemented in scipy.linalg as lstsq : import scipy.linalg as la # la.lstsq? # Get help about this function solution = la . lstsq ( regressors , data ) Because the solution is a tuple with a variety of information about the solution, we'll just extract out only the first element: beta_hat = solution [ 0 ] Inverting the equation gives us an estimate of the linear trend, but it still has the unravelled shape: linear_trend = np . dot ( regressors , beta_hat ) linear_trend . shape (652536,) We reshape it back to the correct shape, and remove it from the data for a detrended volume, which we can examine side-by-side with the original data: linear_trend = np . reshape ( linear_trend , T1w_data . shape ) T1w_linear_detrend = T1w_data - linear_trend fig = show_volumes ([ T1w_data , linear_trend , T1w_linear_detrend ]) Let's write a function to codify this entire process: def detrend ( data , regressors ): regressors = np . vstack ([ r . ravel () for r in regressors ]) . T solution = la . lstsq ( regressors , data . ravel ()) beta_hat = solution [ 0 ] trend = np . dot ( regressors , beta_hat ) detrended = data - np . reshape ( trend , data . shape ) return detrended , beta_hat This simplifies the process to: T1w_linear_detrend , beta_hat = detrend ( T1w_data , [ x , y , z ]) fig = show_volumes ([ T1w_data , T1w_linear_detrend ])","title":"Modeling linear bias and detrending"},{"location":"image_processing/003-detrending.html#detrending_1","text":"Note that \"detrending\" is often used in a similar manner in neuroimaging to remove temporal biases. Here we are rather performing a spatial detrending operation One way to understand the nature of the bias field is to examine the values of the coefficients that were found in the solution to the linear equations. fig , ax = plt . subplots () ax . bar ( np . arange ( beta_hat . shape [ 0 ]), beta_hat ) ax . set_xticks ( np . arange ( beta_hat . shape [ 0 ]) + 0.4 ) ax . set_xticklabels ([ 'x' , 'y' , 'z' ]) ax . set_ylabel ( 'beta' ) <matplotlib.text.Text at 0x7f85cf2569e8> We can see that there is almost no up-down bias field. Indeed, there is some anterior-posterior bias and an even more substantial superior-inferior bias.","title":"\"Detrending\""},{"location":"image_processing/003-detrending.html#what-can-we-do-with-the-remaining-interior-exterior-bias","text":"Examining the images, we can see that the detrending has removed some of the biases in the data, but there is still a clear interior-exterior bias.s What could we do to help mitigate this additional bias?","title":"What can we do with the remaining interior-exterior bias?"},{"location":"image_processing/003-detrending.html#removing-additional-bias-with-a-linearized-model","text":"The linear model we have seen so far does manage to get rid of some of the bias, but what can we do to get rid of the interior-exterior bias? To do so, we add to our bias-field model quadratic functions, to augment the linear trends that we already have included: x_sq = x ** 2 y_sq = y ** 2 z_sq = z ** 2 fig = show_volumes ([ x_sq , y_sq , z_sq ]) These functions allow us to model second order trends in the data. Perfect for modeling trends like a center-out brightening. This model has more parameters and a wider design matrix: \\[ data = \\beta_1 {\\bf x} + \\beta_2 {\\bf y} + \\beta_3 {\\bf z} + \\beta_4 {\\bf x^2} + \\beta_5 {\\bf y^2} + \\beta_6 {\\bf z^2} \\] \\[ \\begin{pmatrix} {\\bf T1w} \\\\ \\vdots \\end{pmatrix} = \\begin{pmatrix} {\\bf x} && {\\bf y} && {\\bf z} && {\\bf x^2} && {\\bf y^2} && {\\bf z^2} \\\\ \\vdots && \\vdots && \\vdots && \\vdots && \\vdots && \\vdots \\end{pmatrix} \\begin{pmatrix} \\beta_1 \\\\ \\beta_2 \\\\ \\beta_3 \\\\ \\beta_4 \\\\ \\beta_5 \\\\ \\beta_6 \\end{pmatrix} \\] We sometimes call this kind of a model a \"linearized\" model, because we have inserted non-linear equations into the form of the general linear model. Using our detrend function, we can construct and solve the augmented model: T1w_data_detrended_quad , beta_hat = detrend ( T1w_data , [ x , y , z , x_sq , y_sq , z_sq ]) fig = show_volumes ([ T1w_data , T1w_linear_detrend , T1w_data_detrended_quad ]) fig , ax = plt . subplots () ax . bar ( np . arange ( beta_hat . shape [ 0 ]), beta_hat ) ax . set_xticks ( np . arange ( beta_hat . shape [ 0 ]) + 0.4 ) ax . set_xticklabels ([ 'x' , 'y' , 'z' , '$x^2$' , '$y^2$' , '$z^2$' ]) ax . set_ylabel ( 'beta' ) <matplotlib.text.Text at 0x7f85d39a8198>","title":"Removing additional bias with a linearized model"},{"location":"image_processing/003-detrending.html#should-we-keep-going","text":"We could augment this model of the bias further with additional functions ( \\(x^3\\) , \\(x^4\\) , etc.), but should we really keep going? At some point, the functions that we use will start picking up the interesting spatial variation in the data, rather than the large-scale bias. So, we can't just keep going with this.","title":"Should we keep going?"},{"location":"image_processing/003-detrending.html#when-is-it-enough","text":"In some conditions, you might be able to determine empirically when you should stop the process of augmenting a model. A variation of this principle is demonstrated in the temporal domain in this paper","title":"When is it enough?"},{"location":"image_processing/004-registration.html","text":"Registration \u00b6 (teaching: 20 minutes) Questions: \u00b6 How do we register images of brains? Objectives \u00b6 \"Understand what the SyN algorithm does to images\" Key points: \u00b6 The SyN algorithm is a powerful algorithm for calculating diffeomorphic transformations between images It's particularly useful for registering images of brains Another operation that we often want to do with neuroimages is registration. We may want to register different images of the same brain to each other, or images of different brains. Though there are many algorithms to perform this registration, and your motivations in selecting an algorithm may depend on what exactly it is that you are trying to do, but one algorithm that is successful in many situations, and has had success in formal conparisons is the Symmetric Normalization (SyN) algorithm ( Avants et al. 2009 ). Though the canonical implementation of the algorithm is in the ANTS Here, we'll use the implementation of the SyN algorithm in Dipy to understand a bit about what it does. One of the strengths of the algorithm, that differentiates it from other algorithms, is that instead of calculating a linear homogenous transform between a moving image and a static image, the SyN algorithm calculates a deformation field. That means that different . The algorithm makes sure that the transformation is a diffeomorphism , which means that it is both invertible and smooth. Let's see what that looks like with a really simple example (based on an example in the Dipy documentation ): import numpy as np from dipy.data import get_data import dipy.align.imwarp as imwarp from dipy.viz import regtools % matplotlib inline fname_moving = get_data ( 'reg_o' ) fname_static = get_data ( 'reg_c' ) moving = np . load ( fname_moving ) static = np . load ( fname_static ) One of these will be defined as the image that moves and the other is the comparison image to which things will be moved. The regtools module has a helper function to visualize the two images side by side, together with an overlay: fig = regtools . overlay_images ( static , moving , 'Static' , 'Overlay' , 'Moving' ) fig . set_size_inches ([ 10 , 10 ]) The diffeomorphism will be found through optimization. A cost metric needs to be defined to tell us whether we have found a good diffeomorphism. The first decision we need to make is what similarity metric is appropriate for our problem. In this example we are using two binary images, so the Sum of Squared Differences (SSD) is a good choice (other options are cross-correlation and mutual information). from dipy.align.metrics import SSDMetric metric = SSDMetric ( static . ndim ) Next, we define an instance of the registration class. The SyN algorithm uses a multi-resolution approach (essentially peforming the algorithm again and again from a coarse resolution down to a fine resolution). We instruct the registration instance to perform at most [n_0, n_1, ..., n_k] iterations at each level of the pyramid, where the 0-th level corresponds to the finest resolution. from dipy.align.imwarp import SymmetricDiffeomorphicRegistration level_iters = [ 200 , 100 , 50 , 25 ] sdr = SymmetricDiffeomorphicRegistration ( metric , level_iters , inv_iter = 50 ) To execute the optimization, we call this registration object with our moving and static input images mapping = sdr . optimize ( static , moving ) Creating scale space from the moving image. Levels: 4. Sigma factor: 0.200000. Creating scale space from the static image. Levels: 4. Sigma factor: 0.200000. Optimizing level 3 Optimizing level 2 Optimizing level 1 Optimizing level 0 To visualize the diffeomorphism, we can visualize the forward and inverse transform encoded in the mapping warped_forward , warped_back = regtools . plot_2d_diffeomorphic_map ( mapping , 10 ) We can test the success of the algorithm, by applying the transform to the moving object: warped_moving = mapping . transform ( moving ) fig = regtools . overlay_images ( static , warped_moving , 'Static' , 'Overlay' ) fig . set_size_inches ([ 10 , 10 ]) The inverse transform can be used to go from the static to the moving image: warped_static = mapping . transform_inverse ( static , 'linear' ) regtools . overlay_images ( warped_static , moving , 'Warped static' , 'Overlay' , 'Moving' , 'inverse_warp_result.png' ) Now that we understand the principal, let's do this in practice on some brain data. In this case, we'll use the data-sets that ship with Dipy. These are data-sets from the brains of two different individuals: On the first run of this, it will automatically download the data: from dipy.data import fetch_stanford_hardi , read_stanford_hardi fetch_stanford_hardi () nib_stanford , gtab_stanford = read_stanford_hardi () stanford_b0 = np . squeeze ( nib_stanford . get_data ())[ ... , 0 ] from dipy.data.fetcher import fetch_syn_data , read_syn_data fetch_syn_data () nib_syn_t1 , nib_syn_b0 = read_syn_data () syn_b0 = np . array ( nib_syn_b0 . get_data ()) Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / stanford_hardi Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / stanford_hardi Data size is approximately 12 MB Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / syn_test Data size is approximately 12 MB Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / syn_test To make the segmentation go better, we start by stripping the skull using the segmentation algorithms we saw before: from dipy.segment.mask import median_otsu stanford_b0_masked , stanford_b0_mask = median_otsu ( stanford_b0 , 4 , 4 ) syn_b0_masked , syn_b0_mask = median_otsu ( syn_b0 , 4 , 4 ) static = stanford_b0_masked static_affine = nib_stanford . get_affine () moving = syn_b0_masked moving_affine = nib_syn_b0 . get_affine () /opt/conda/lib/python3.5/site-packages/skimage/filter/__init__.py:6: skimage_deprecation: The `skimage.filter` module has been renamed to `skimage.filters`. This placeholder module will be removed in v0.13. warn(skimage_deprecation('The `skimage.filter` module has been renamed ' /opt/conda/lib/python3.5/site-packages/ipykernel/__main__.py:6: DeprecationWarning: get_affine method is deprecated. Please use the ``img.affine`` property instead. * deprecated from version: 2.1 * Will raise <class 'nibabel.deprecator.ExpiredDeprecationError'> as of version: 4.0 /opt/conda/lib/python3.5/site-packages/ipykernel/__main__.py:8: DeprecationWarning: get_affine method is deprecated. Please use the ``img.affine`` property instead. * deprecated from version: 2.1 * Will raise <class 'nibabel.deprecator.ExpiredDeprecationError'> as of version: 4.0 The SyN algorithm works much better if the brains are pre-aligned using a linear approach (e.g., a an affine transformation). This transform will do: pre_align = np . array ([[ 1.02783543e+00 , - 4.83019053e-02 , - 6.07735639e-02 , - 2.57654118e+00 ], [ 4.34051706e-03 , 9.41918267e-01 , - 2.66525861e-01 , 3.23579799e+01 ], [ 5.34288908e-02 , 2.90262026e-01 , 9.80820307e-01 , - 1.46216651e+01 ], [ 0.00000000e+00 , 0.00000000e+00 , 0.00000000e+00 , 1.00000000e+00 ]]) from dipy.align.imaffine import AffineMap affine_map = AffineMap ( pre_align , static . shape , static_affine , moving . shape , moving_affine ) resampled = affine_map . transform ( moving ) As before, we visualize the two images: fig = regtools . overlay_slices ( static , resampled , None , 1 , 'Static' , 'Moving' ) fig . set_size_inches ([ 20 , 20 ]) Here, we will use the cross-correlation between the images as the metric.: from dipy.align.metrics import CCMetric metric = CCMetric ( dim = 3 ) Again, we allocated the registration object: level_iters = [ 10 , 10 , 5 ] sdr = SymmetricDiffeomorphicRegistration ( metric , level_iters ) and optimize it: mapping = sdr . optimize ( static , moving , static_affine , moving_affine , pre_align ) Creating scale space from the moving image. Levels: 3. Sigma factor: 0.200000. Creating scale space from the static image. Levels: 3. Sigma factor: 0.200000. Optimizing level 2 Optimizing level 1 Optimizing level 0 The moving image is transformed towards the static image: warped_moving = mapping . transform ( moving ) Looks good, considering it's two different brains! fig = regtools . overlay_slices ( static , warped_moving , None , 1 , 'Static' ) fig . set_size_inches ([ 20 , 20 ])","title":"Registration"},{"location":"image_processing/004-registration.html#registration","text":"(teaching: 20 minutes)","title":"Registration"},{"location":"image_processing/004-registration.html#questions","text":"How do we register images of brains?","title":"Questions:"},{"location":"image_processing/004-registration.html#objectives","text":"\"Understand what the SyN algorithm does to images\"","title":"Objectives"},{"location":"image_processing/004-registration.html#key-points","text":"The SyN algorithm is a powerful algorithm for calculating diffeomorphic transformations between images It's particularly useful for registering images of brains Another operation that we often want to do with neuroimages is registration. We may want to register different images of the same brain to each other, or images of different brains. Though there are many algorithms to perform this registration, and your motivations in selecting an algorithm may depend on what exactly it is that you are trying to do, but one algorithm that is successful in many situations, and has had success in formal conparisons is the Symmetric Normalization (SyN) algorithm ( Avants et al. 2009 ). Though the canonical implementation of the algorithm is in the ANTS Here, we'll use the implementation of the SyN algorithm in Dipy to understand a bit about what it does. One of the strengths of the algorithm, that differentiates it from other algorithms, is that instead of calculating a linear homogenous transform between a moving image and a static image, the SyN algorithm calculates a deformation field. That means that different . The algorithm makes sure that the transformation is a diffeomorphism , which means that it is both invertible and smooth. Let's see what that looks like with a really simple example (based on an example in the Dipy documentation ): import numpy as np from dipy.data import get_data import dipy.align.imwarp as imwarp from dipy.viz import regtools % matplotlib inline fname_moving = get_data ( 'reg_o' ) fname_static = get_data ( 'reg_c' ) moving = np . load ( fname_moving ) static = np . load ( fname_static ) One of these will be defined as the image that moves and the other is the comparison image to which things will be moved. The regtools module has a helper function to visualize the two images side by side, together with an overlay: fig = regtools . overlay_images ( static , moving , 'Static' , 'Overlay' , 'Moving' ) fig . set_size_inches ([ 10 , 10 ]) The diffeomorphism will be found through optimization. A cost metric needs to be defined to tell us whether we have found a good diffeomorphism. The first decision we need to make is what similarity metric is appropriate for our problem. In this example we are using two binary images, so the Sum of Squared Differences (SSD) is a good choice (other options are cross-correlation and mutual information). from dipy.align.metrics import SSDMetric metric = SSDMetric ( static . ndim ) Next, we define an instance of the registration class. The SyN algorithm uses a multi-resolution approach (essentially peforming the algorithm again and again from a coarse resolution down to a fine resolution). We instruct the registration instance to perform at most [n_0, n_1, ..., n_k] iterations at each level of the pyramid, where the 0-th level corresponds to the finest resolution. from dipy.align.imwarp import SymmetricDiffeomorphicRegistration level_iters = [ 200 , 100 , 50 , 25 ] sdr = SymmetricDiffeomorphicRegistration ( metric , level_iters , inv_iter = 50 ) To execute the optimization, we call this registration object with our moving and static input images mapping = sdr . optimize ( static , moving ) Creating scale space from the moving image. Levels: 4. Sigma factor: 0.200000. Creating scale space from the static image. Levels: 4. Sigma factor: 0.200000. Optimizing level 3 Optimizing level 2 Optimizing level 1 Optimizing level 0 To visualize the diffeomorphism, we can visualize the forward and inverse transform encoded in the mapping warped_forward , warped_back = regtools . plot_2d_diffeomorphic_map ( mapping , 10 ) We can test the success of the algorithm, by applying the transform to the moving object: warped_moving = mapping . transform ( moving ) fig = regtools . overlay_images ( static , warped_moving , 'Static' , 'Overlay' ) fig . set_size_inches ([ 10 , 10 ]) The inverse transform can be used to go from the static to the moving image: warped_static = mapping . transform_inverse ( static , 'linear' ) regtools . overlay_images ( warped_static , moving , 'Warped static' , 'Overlay' , 'Moving' , 'inverse_warp_result.png' ) Now that we understand the principal, let's do this in practice on some brain data. In this case, we'll use the data-sets that ship with Dipy. These are data-sets from the brains of two different individuals: On the first run of this, it will automatically download the data: from dipy.data import fetch_stanford_hardi , read_stanford_hardi fetch_stanford_hardi () nib_stanford , gtab_stanford = read_stanford_hardi () stanford_b0 = np . squeeze ( nib_stanford . get_data ())[ ... , 0 ] from dipy.data.fetcher import fetch_syn_data , read_syn_data fetch_syn_data () nib_syn_t1 , nib_syn_b0 = read_syn_data () syn_b0 = np . array ( nib_syn_b0 . get_data ()) Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / stanford_hardi Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / stanford_hardi Data size is approximately 12 MB Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / syn_test Data size is approximately 12 MB Dataset is already in place . If you want to fetch it again please first remove the folder / home / jovyan / . dipy / syn_test To make the segmentation go better, we start by stripping the skull using the segmentation algorithms we saw before: from dipy.segment.mask import median_otsu stanford_b0_masked , stanford_b0_mask = median_otsu ( stanford_b0 , 4 , 4 ) syn_b0_masked , syn_b0_mask = median_otsu ( syn_b0 , 4 , 4 ) static = stanford_b0_masked static_affine = nib_stanford . get_affine () moving = syn_b0_masked moving_affine = nib_syn_b0 . get_affine () /opt/conda/lib/python3.5/site-packages/skimage/filter/__init__.py:6: skimage_deprecation: The `skimage.filter` module has been renamed to `skimage.filters`. This placeholder module will be removed in v0.13. warn(skimage_deprecation('The `skimage.filter` module has been renamed ' /opt/conda/lib/python3.5/site-packages/ipykernel/__main__.py:6: DeprecationWarning: get_affine method is deprecated. Please use the ``img.affine`` property instead. * deprecated from version: 2.1 * Will raise <class 'nibabel.deprecator.ExpiredDeprecationError'> as of version: 4.0 /opt/conda/lib/python3.5/site-packages/ipykernel/__main__.py:8: DeprecationWarning: get_affine method is deprecated. Please use the ``img.affine`` property instead. * deprecated from version: 2.1 * Will raise <class 'nibabel.deprecator.ExpiredDeprecationError'> as of version: 4.0 The SyN algorithm works much better if the brains are pre-aligned using a linear approach (e.g., a an affine transformation). This transform will do: pre_align = np . array ([[ 1.02783543e+00 , - 4.83019053e-02 , - 6.07735639e-02 , - 2.57654118e+00 ], [ 4.34051706e-03 , 9.41918267e-01 , - 2.66525861e-01 , 3.23579799e+01 ], [ 5.34288908e-02 , 2.90262026e-01 , 9.80820307e-01 , - 1.46216651e+01 ], [ 0.00000000e+00 , 0.00000000e+00 , 0.00000000e+00 , 1.00000000e+00 ]]) from dipy.align.imaffine import AffineMap affine_map = AffineMap ( pre_align , static . shape , static_affine , moving . shape , moving_affine ) resampled = affine_map . transform ( moving ) As before, we visualize the two images: fig = regtools . overlay_slices ( static , resampled , None , 1 , 'Static' , 'Moving' ) fig . set_size_inches ([ 20 , 20 ]) Here, we will use the cross-correlation between the images as the metric.: from dipy.align.metrics import CCMetric metric = CCMetric ( dim = 3 ) Again, we allocated the registration object: level_iters = [ 10 , 10 , 5 ] sdr = SymmetricDiffeomorphicRegistration ( metric , level_iters ) and optimize it: mapping = sdr . optimize ( static , moving , static_affine , moving_affine , pre_align ) Creating scale space from the moving image. Levels: 3. Sigma factor: 0.200000. Creating scale space from the static image. Levels: 3. Sigma factor: 0.200000. Optimizing level 2 Optimizing level 1 Optimizing level 0 The moving image is transformed towards the static image: warped_moving = mapping . transform ( moving ) Looks good, considering it's two different brains! fig = regtools . overlay_slices ( static , warped_moving , None , 1 , 'Static' ) fig . set_size_inches ([ 20 , 20 ])","title":"Key points:"},{"location":"machine_learning/linear_regression.html","text":"Linear Regression \u00b6 The linear regression (LR) model is a simple machine learning approach used for target variables that are continuous (i.e. variables that are real-valued). The LR model takes as its input both a vector of features (conventionally labeled X ) and a vector of labels ( y ). Often different terminology is used \u2014calling X our set of variables or predictors, and y our outcome or dependent variable\u2014but the idea is the same. The data are plotted, and a straight line is then fit to these data points. The objective is to fit the line to the data points so that the distance between the line and points are minimized. Let's return to our running house price-prediction example. Predicting sales price from the features is a regression problem, because sale price varies continuously. What we're trying to find is some optimal function that, given a matrix of feature scores, can produce a set of continuous values that best approximates (for whatever definition of \"best\" we like) the true house price of our houses. First we import the required libraries then investigate the data: import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns % matplotlib inline all_data = pd . read_csv ( '../data/house_prices.csv' , sep = ',' , index_col = 0 ) . reset_index ( drop = True ) all_data . info () <class 'pandas.core.frame.DataFrame'> RangeIndex: 1460 entries, 0 to 1459 Data columns (total 80 columns): MSSubClass 1460 non-null int64 MSZoning 1460 non-null object LotFrontage 1201 non-null float64 LotArea 1460 non-null int64 Street 1460 non-null object Alley 91 non-null object LotShape 1460 non-null object LandContour 1460 non-null object Utilities 1460 non-null object LotConfig 1460 non-null object LandSlope 1460 non-null object Neighborhood 1460 non-null object Condition1 1460 non-null object Condition2 1460 non-null object BldgType 1460 non-null object HouseStyle 1460 non-null object OverallQual 1460 non-null int64 OverallCond 1460 non-null int64 YearBuilt 1460 non-null int64 YearRemodAdd 1460 non-null int64 RoofStyle 1460 non-null object RoofMatl 1460 non-null object Exterior1st 1460 non-null object Exterior2nd 1460 non-null object MasVnrType 1452 non-null object MasVnrArea 1452 non-null float64 ExterQual 1460 non-null object ExterCond 1460 non-null object Foundation 1460 non-null object BsmtQual 1423 non-null object BsmtCond 1423 non-null object BsmtExposure 1422 non-null object BsmtFinType1 1423 non-null object BsmtFinSF1 1460 non-null int64 BsmtFinType2 1422 non-null object BsmtFinSF2 1460 non-null int64 BsmtUnfSF 1460 non-null int64 TotalBsmtSF 1460 non-null int64 Heating 1460 non-null object HeatingQC 1460 non-null object CentralAir 1460 non-null object Electrical 1459 non-null object 1stFlrSF 1460 non-null int64 2ndFlrSF 1460 non-null int64 LowQualFinSF 1460 non-null int64 GrLivArea 1460 non-null int64 BsmtFullBath 1460 non-null int64 BsmtHalfBath 1460 non-null int64 FullBath 1460 non-null int64 HalfBath 1460 non-null int64 BedroomAbvGr 1460 non-null int64 KitchenAbvGr 1460 non-null int64 KitchenQual 1460 non-null object TotRmsAbvGrd 1460 non-null int64 Functional 1460 non-null object Fireplaces 1460 non-null int64 FireplaceQu 770 non-null object GarageType 1379 non-null object GarageYrBlt 1379 non-null float64 GarageFinish 1379 non-null object GarageCars 1460 non-null int64 GarageArea 1460 non-null int64 GarageQual 1379 non-null object GarageCond 1379 non-null object PavedDrive 1460 non-null object WoodDeckSF 1460 non-null int64 OpenPorchSF 1460 non-null int64 EnclosedPorch 1460 non-null int64 3SsnPorch 1460 non-null int64 ScreenPorch 1460 non-null int64 PoolArea 1460 non-null int64 PoolQC 7 non-null object Fence 281 non-null object MiscFeature 54 non-null object MiscVal 1460 non-null int64 MoSold 1460 non-null int64 YrSold 1460 non-null int64 SaleType 1460 non-null object SaleCondition 1460 non-null object SalePrice 1460 non-null int64 dtypes: float64(3), int64(34), object(43) memory usage: 912.6+ KB # Select only columns that are numeric all_data = all_data . select_dtypes ([ 'number' ]) # Remove any rows that contain NaN for ifeature in list ( all_data ): all_data = all_data [ pd . notnull ( all_data [ ifeature ])] all_data . shape (1121, 37) Let's also plot our target variable, Sales Price, to see what the distribution looks like: sns . histplot ( all_data [ 'SalePrice' ], kde = True ) Training a Linear Regression Model \u00b6 We will need to first split up our data into an X array that contains the features to train on, and a y array with the target variable, in this case the Sale Price. We start by setting the X and y variables, split into train and test sets using the train_test_split function from scikit-learn and initialize the LinearRegression estimator: from sklearn.model_selection import train_test_split # Set input features and output variable y = all_data [ 'SalePrice' ] X = all_data . drop ([ 'SalePrice' ], axis = 1 ) # Split data into test and train sets X_train , X_test , y_train , y_test = train_test_split ( X , y . to_numpy () . ravel (), test_size = 0.30 , random_state = 101 ) # OLS (and many other variants of regression) is housed in the linear_model module from sklearn.linear_model import LinearRegression # initialize the model lr_model = LinearRegression () The LinearRegression estimator, unlike many others, has very few configurable parameters. Above, we initialize it with all of the default values by passing no arguments to the function. Now we're ready to fit some data! We can do that by calling the .fit() method. This will be true for every Estimator in scikit-learn. We will use our training sub-datasets we created: # Fit the model lr_model . fit ( X_train , y_train ); Now we have a fitted model we need to evaluate the accuracy of this training process. We always want to evaluate the trained model prior to applying it to test data. # The sklearn convention is to denote fitted parameters with a trailing underscore print ( 'Model y intercept:' , lr_model . intercept_ , ' \\n ' ) print ( 'Model feature coefficients:' , lr_model . coef_ , ' \\n ' ) Model y intercept: -1348228.3926262031 Model feature coefficients: [-8.75772924e+01 5.95600326e+01 1.18930737e+00 1.38647884e+04 4.91899261e+03 4.10628404e+02 1.81486446e+02 1.51819223e+01 2.69056767e+01 -1.07411164e+00 -3.69107465e-01 2.54624576e+01 1.84098928e+01 2.14677482e+01 7.35941390e+00 4.72370548e+01 -8.14206679e+02 -6.09318362e+03 -1.52754837e+03 -1.82409326e+03 -1.58292462e+04 -2.59304669e+04 5.44696494e+03 -4.36801780e+01 -4.51893373e+01 4.11495671e+03 2.38219900e+01 4.82163185e+00 2.38325092e+01 3.04386635e+01 9.87034508e+00 4.14229568e+01 1.26489368e+02 -2.30107736e+00 2.62862323e+02 1.01150684e+02] We can use these parameter estimates (y intercept and coefficients) to manually construct and apply a prediction equation (i.e., \\(\\hat{y} = -0.557 + 1.43x\\) ) if we want to. The other thing we can look at is the coefficient. coeff_df = pd . DataFrame ( lr_model . coef_ , X . columns , columns = [ 'Coefficient' ]) coeff_df . head () Coefficient MSSubClass -87.577292 LotFrontage 59.560033 LotArea 1.189307 OverallQual 13864.788358 OverallCond 4918.992610 Interpreting the coefficients: Holding all other features fixed, a 1 unit increase in Lot Frontage is associated with an **increase of $59.56 **. Holding all other features fixed, a 1 unit increase in Lot Area is associated with an **increase of $1.18 **. Holding all other features fixed, a 1 unit increase in Overall Condition is associated with an **increase of $4918.99 **. The next step is to use the trained model to predict new house Sale Price on new data. We do this by making use of the .predict() method that all Estimator classes implement. For example, here are the predicted scores for our X test data: lr_predictions = lr_model . predict ( X_test ) plt . scatter ( y_test , lr_predictions ); plt . xlabel ( 'Test Data Actual Sales Price' ); plt . ylabel ( 'Predicted Sales Price' ); We can also plot the residual: sns . histplot (( y_test - lr_predictions ), bins = 50 , kde = True ); Just to underscore how little we had to do, here's the whole example again, in three lines: # Initialize the linear regression estimator lr_model = LinearRegression () # Fit the model lr_model . fit ( X_train , y_train ) # Generate predictions lr_predictions = lr_model . predict ( X_test ) Performance metrics \u00b6 Once we've fit our model, it's natural to want to know how well it performs. In machine learning, the focus of model performance is on prediction; typically, we have some objective quantitative metric we care about, and to the degree that a model can produce better values on that metric, we incline to evaluate it more favorably. This doesn't mean that we have to single-mindedly base our evaluation of model on just one quantity; in practice, many other considerations may come into play (e.g., computational efficiency, interpretability, etc.). The point is mainly that machine learning practitioners\u2014at least in applied settings\u2014tend to care much more than traditional scientists do about what models can actually do , and much less about what's going on inside them. The coefficient of determination \u00b6 For the rest of this tutorial, we're going to focus our attention on one particular metric of predictive performance: the coefficient of determination, or \\(R^2\\) . \\(R^2\\) quantifies the proportion of variance in the outcome variable (e.g., house price) explained by the fitted model: R-squared (R2) is the measure used to determine which line minimizes this distance: \\(R^2\\) is the most widely used measure of performance in the individual differences literature, and we'll stick with tradition here. But this shouldn't be taken as an indication that there's anything particularly special about \\(R^2\\) . In fact, in many applications, it's a pretty bad metric, because it's defined with reference to the relative variation in a particular sample, and completely ignores the absolute deviation of predictions from the true scores (i.e., a model can have an \\(R^2\\) of 1 while generating a predicted score distribution entirely outside the range of the true scores). For our purposes though, \\(R^2\\) is a sensible metric, because for most individual differences variables, absolute scores don't really mean anything anyway\u2014we're almost always interested in how variation across individuals relates to variation in some other measure or construct. Here are three other common evaluation metrics for machine learning problems: Mean Absolute Error (MAE) is the mean of the absolute value of the errors: \\[\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|\\] Mean Squared Error (MSE) is the mean of the squared errors: \\[\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2\\] Root Mean Squared Error (RMSE) is the square root of the mean of the squared errors: \\[\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}\\] Comparing these metrics: MAE is the easiest to understand, because it's the average error. MSE is more popular than MAE, because MSE \"punishes\" larger errors, which tends to be useful in the real world. RMSE is even more popular than MSE, because RMSE is interpretable in the \"y\" units. All of these are loss functions , because we want to minimize them. How well did we do? \u00b6 Let's see how well the linear regression model we fitted earlier (using the house features as predictors) explains the variance in sales price. We'll make use of scikit-learn's metrics module, which contains a large number of predefined performance metrics. As is true of Estimator objects, all metrics in scikit-learn follow the same usage pattern: we pass in the true scores and the model's predicted scores, respectively. # the metrics module contains predefined scoring functions # for commonly used metrics like r^2, MSE, etc. from sklearn import metrics # scoring functions are called by passing an array of # true scores and and an array of predicted scores as # inputs print ( 'Model score:' , metrics . r2_score ( y_test , lr_predictions )) print ( 'MAE:' , metrics . mean_absolute_error ( y_test , lr_predictions )) print ( 'MSE:' , metrics . mean_squared_error ( y_test , lr_predictions )) print ( 'RMSE:' , np . sqrt ( metrics . mean_squared_error ( y_test , lr_predictions ))) Model score: 0.5238801531365112 MAE: 26110.712069211004 MSE: 3851956330.37256 RMSE: 62064.130787215254 Looking at the \\(R^2\\) score we get the amount of variance explained by the model, which means we can explain about 52% of the variance in sales price using 27 features of the home. For convenience, scikit-learn estimators have a .score() method you can use as an alternative to the above. Instead of generating predicted scores and then explicitly feeding them to a metric function like r2_score , you can call .score() directly on the estimator after the fit() step, and the prediction will be done implicitly: # Initialize the estimator and fit the data, just like before lr_model = LinearRegression () lr_model . fit ( X_train , y_train ) # Now instead of generating predictions explicitly, # we just call .score(). Note that we lose the ability to # specify the metric: LinearRegression.score() always uses # the R^2 metric. lr_model . score ( X_test , y_test ) 0.5238801531365112 We can also look at how well we did visually by plotting the predicted vs. actual sales price values: range_plot = range ( 100 , 300 ) fig , ax = plt . subplots ( figsize = ( 10 , 6 )) lr_1 = ax . plot ( range_plot , lr_predictions [ range_plot ], color = 'blue' , label = 'Linear Regression' ) lr_2 = ax . plot ( range_plot , y_test [ range_plot ], color = 'red' , label = 'Actual' ) ax . set_ylim ( 0 , 800000 ) ax . set_xlim ( range_plot [ 0 ], range_plot [ - 1 ]) plt . title ( 'Linear Regression: Actual vs. Predicted Sales Price' , fontweight = 'bold' ) plt . xlabel ( 'Sample' , fontweight = 'bold' ) plt . ylabel ( 'Sales Price (USD)' , fontweight = 'bold' ) plt . legend ( handles = [ lr_1 [ 0 ], lr_2 [ 0 ]]) plt . show ()","title":"Linear Regression"},{"location":"machine_learning/linear_regression.html#linear-regression","text":"The linear regression (LR) model is a simple machine learning approach used for target variables that are continuous (i.e. variables that are real-valued). The LR model takes as its input both a vector of features (conventionally labeled X ) and a vector of labels ( y ). Often different terminology is used \u2014calling X our set of variables or predictors, and y our outcome or dependent variable\u2014but the idea is the same. The data are plotted, and a straight line is then fit to these data points. The objective is to fit the line to the data points so that the distance between the line and points are minimized. Let's return to our running house price-prediction example. Predicting sales price from the features is a regression problem, because sale price varies continuously. What we're trying to find is some optimal function that, given a matrix of feature scores, can produce a set of continuous values that best approximates (for whatever definition of \"best\" we like) the true house price of our houses. First we import the required libraries then investigate the data: import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns % matplotlib inline all_data = pd . read_csv ( '../data/house_prices.csv' , sep = ',' , index_col = 0 ) . reset_index ( drop = True ) all_data . info () <class 'pandas.core.frame.DataFrame'> RangeIndex: 1460 entries, 0 to 1459 Data columns (total 80 columns): MSSubClass 1460 non-null int64 MSZoning 1460 non-null object LotFrontage 1201 non-null float64 LotArea 1460 non-null int64 Street 1460 non-null object Alley 91 non-null object LotShape 1460 non-null object LandContour 1460 non-null object Utilities 1460 non-null object LotConfig 1460 non-null object LandSlope 1460 non-null object Neighborhood 1460 non-null object Condition1 1460 non-null object Condition2 1460 non-null object BldgType 1460 non-null object HouseStyle 1460 non-null object OverallQual 1460 non-null int64 OverallCond 1460 non-null int64 YearBuilt 1460 non-null int64 YearRemodAdd 1460 non-null int64 RoofStyle 1460 non-null object RoofMatl 1460 non-null object Exterior1st 1460 non-null object Exterior2nd 1460 non-null object MasVnrType 1452 non-null object MasVnrArea 1452 non-null float64 ExterQual 1460 non-null object ExterCond 1460 non-null object Foundation 1460 non-null object BsmtQual 1423 non-null object BsmtCond 1423 non-null object BsmtExposure 1422 non-null object BsmtFinType1 1423 non-null object BsmtFinSF1 1460 non-null int64 BsmtFinType2 1422 non-null object BsmtFinSF2 1460 non-null int64 BsmtUnfSF 1460 non-null int64 TotalBsmtSF 1460 non-null int64 Heating 1460 non-null object HeatingQC 1460 non-null object CentralAir 1460 non-null object Electrical 1459 non-null object 1stFlrSF 1460 non-null int64 2ndFlrSF 1460 non-null int64 LowQualFinSF 1460 non-null int64 GrLivArea 1460 non-null int64 BsmtFullBath 1460 non-null int64 BsmtHalfBath 1460 non-null int64 FullBath 1460 non-null int64 HalfBath 1460 non-null int64 BedroomAbvGr 1460 non-null int64 KitchenAbvGr 1460 non-null int64 KitchenQual 1460 non-null object TotRmsAbvGrd 1460 non-null int64 Functional 1460 non-null object Fireplaces 1460 non-null int64 FireplaceQu 770 non-null object GarageType 1379 non-null object GarageYrBlt 1379 non-null float64 GarageFinish 1379 non-null object GarageCars 1460 non-null int64 GarageArea 1460 non-null int64 GarageQual 1379 non-null object GarageCond 1379 non-null object PavedDrive 1460 non-null object WoodDeckSF 1460 non-null int64 OpenPorchSF 1460 non-null int64 EnclosedPorch 1460 non-null int64 3SsnPorch 1460 non-null int64 ScreenPorch 1460 non-null int64 PoolArea 1460 non-null int64 PoolQC 7 non-null object Fence 281 non-null object MiscFeature 54 non-null object MiscVal 1460 non-null int64 MoSold 1460 non-null int64 YrSold 1460 non-null int64 SaleType 1460 non-null object SaleCondition 1460 non-null object SalePrice 1460 non-null int64 dtypes: float64(3), int64(34), object(43) memory usage: 912.6+ KB # Select only columns that are numeric all_data = all_data . select_dtypes ([ 'number' ]) # Remove any rows that contain NaN for ifeature in list ( all_data ): all_data = all_data [ pd . notnull ( all_data [ ifeature ])] all_data . shape (1121, 37) Let's also plot our target variable, Sales Price, to see what the distribution looks like: sns . histplot ( all_data [ 'SalePrice' ], kde = True )","title":"Linear Regression"},{"location":"machine_learning/linear_regression.html#training-a-linear-regression-model","text":"We will need to first split up our data into an X array that contains the features to train on, and a y array with the target variable, in this case the Sale Price. We start by setting the X and y variables, split into train and test sets using the train_test_split function from scikit-learn and initialize the LinearRegression estimator: from sklearn.model_selection import train_test_split # Set input features and output variable y = all_data [ 'SalePrice' ] X = all_data . drop ([ 'SalePrice' ], axis = 1 ) # Split data into test and train sets X_train , X_test , y_train , y_test = train_test_split ( X , y . to_numpy () . ravel (), test_size = 0.30 , random_state = 101 ) # OLS (and many other variants of regression) is housed in the linear_model module from sklearn.linear_model import LinearRegression # initialize the model lr_model = LinearRegression () The LinearRegression estimator, unlike many others, has very few configurable parameters. Above, we initialize it with all of the default values by passing no arguments to the function. Now we're ready to fit some data! We can do that by calling the .fit() method. This will be true for every Estimator in scikit-learn. We will use our training sub-datasets we created: # Fit the model lr_model . fit ( X_train , y_train ); Now we have a fitted model we need to evaluate the accuracy of this training process. We always want to evaluate the trained model prior to applying it to test data. # The sklearn convention is to denote fitted parameters with a trailing underscore print ( 'Model y intercept:' , lr_model . intercept_ , ' \\n ' ) print ( 'Model feature coefficients:' , lr_model . coef_ , ' \\n ' ) Model y intercept: -1348228.3926262031 Model feature coefficients: [-8.75772924e+01 5.95600326e+01 1.18930737e+00 1.38647884e+04 4.91899261e+03 4.10628404e+02 1.81486446e+02 1.51819223e+01 2.69056767e+01 -1.07411164e+00 -3.69107465e-01 2.54624576e+01 1.84098928e+01 2.14677482e+01 7.35941390e+00 4.72370548e+01 -8.14206679e+02 -6.09318362e+03 -1.52754837e+03 -1.82409326e+03 -1.58292462e+04 -2.59304669e+04 5.44696494e+03 -4.36801780e+01 -4.51893373e+01 4.11495671e+03 2.38219900e+01 4.82163185e+00 2.38325092e+01 3.04386635e+01 9.87034508e+00 4.14229568e+01 1.26489368e+02 -2.30107736e+00 2.62862323e+02 1.01150684e+02] We can use these parameter estimates (y intercept and coefficients) to manually construct and apply a prediction equation (i.e., \\(\\hat{y} = -0.557 + 1.43x\\) ) if we want to. The other thing we can look at is the coefficient. coeff_df = pd . DataFrame ( lr_model . coef_ , X . columns , columns = [ 'Coefficient' ]) coeff_df . head () Coefficient MSSubClass -87.577292 LotFrontage 59.560033 LotArea 1.189307 OverallQual 13864.788358 OverallCond 4918.992610 Interpreting the coefficients: Holding all other features fixed, a 1 unit increase in Lot Frontage is associated with an **increase of $59.56 **. Holding all other features fixed, a 1 unit increase in Lot Area is associated with an **increase of $1.18 **. Holding all other features fixed, a 1 unit increase in Overall Condition is associated with an **increase of $4918.99 **. The next step is to use the trained model to predict new house Sale Price on new data. We do this by making use of the .predict() method that all Estimator classes implement. For example, here are the predicted scores for our X test data: lr_predictions = lr_model . predict ( X_test ) plt . scatter ( y_test , lr_predictions ); plt . xlabel ( 'Test Data Actual Sales Price' ); plt . ylabel ( 'Predicted Sales Price' ); We can also plot the residual: sns . histplot (( y_test - lr_predictions ), bins = 50 , kde = True ); Just to underscore how little we had to do, here's the whole example again, in three lines: # Initialize the linear regression estimator lr_model = LinearRegression () # Fit the model lr_model . fit ( X_train , y_train ) # Generate predictions lr_predictions = lr_model . predict ( X_test )","title":"Training a Linear Regression Model"},{"location":"machine_learning/linear_regression.html#performance-metrics","text":"Once we've fit our model, it's natural to want to know how well it performs. In machine learning, the focus of model performance is on prediction; typically, we have some objective quantitative metric we care about, and to the degree that a model can produce better values on that metric, we incline to evaluate it more favorably. This doesn't mean that we have to single-mindedly base our evaluation of model on just one quantity; in practice, many other considerations may come into play (e.g., computational efficiency, interpretability, etc.). The point is mainly that machine learning practitioners\u2014at least in applied settings\u2014tend to care much more than traditional scientists do about what models can actually do , and much less about what's going on inside them.","title":"Performance metrics"},{"location":"machine_learning/linear_regression.html#the-coefficient-of-determination","text":"For the rest of this tutorial, we're going to focus our attention on one particular metric of predictive performance: the coefficient of determination, or \\(R^2\\) . \\(R^2\\) quantifies the proportion of variance in the outcome variable (e.g., house price) explained by the fitted model: R-squared (R2) is the measure used to determine which line minimizes this distance: \\(R^2\\) is the most widely used measure of performance in the individual differences literature, and we'll stick with tradition here. But this shouldn't be taken as an indication that there's anything particularly special about \\(R^2\\) . In fact, in many applications, it's a pretty bad metric, because it's defined with reference to the relative variation in a particular sample, and completely ignores the absolute deviation of predictions from the true scores (i.e., a model can have an \\(R^2\\) of 1 while generating a predicted score distribution entirely outside the range of the true scores). For our purposes though, \\(R^2\\) is a sensible metric, because for most individual differences variables, absolute scores don't really mean anything anyway\u2014we're almost always interested in how variation across individuals relates to variation in some other measure or construct. Here are three other common evaluation metrics for machine learning problems: Mean Absolute Error (MAE) is the mean of the absolute value of the errors: \\[\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|\\] Mean Squared Error (MSE) is the mean of the squared errors: \\[\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2\\] Root Mean Squared Error (RMSE) is the square root of the mean of the squared errors: \\[\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}\\] Comparing these metrics: MAE is the easiest to understand, because it's the average error. MSE is more popular than MAE, because MSE \"punishes\" larger errors, which tends to be useful in the real world. RMSE is even more popular than MSE, because RMSE is interpretable in the \"y\" units. All of these are loss functions , because we want to minimize them.","title":"The coefficient of determination"},{"location":"machine_learning/linear_regression.html#how-well-did-we-do","text":"Let's see how well the linear regression model we fitted earlier (using the house features as predictors) explains the variance in sales price. We'll make use of scikit-learn's metrics module, which contains a large number of predefined performance metrics. As is true of Estimator objects, all metrics in scikit-learn follow the same usage pattern: we pass in the true scores and the model's predicted scores, respectively. # the metrics module contains predefined scoring functions # for commonly used metrics like r^2, MSE, etc. from sklearn import metrics # scoring functions are called by passing an array of # true scores and and an array of predicted scores as # inputs print ( 'Model score:' , metrics . r2_score ( y_test , lr_predictions )) print ( 'MAE:' , metrics . mean_absolute_error ( y_test , lr_predictions )) print ( 'MSE:' , metrics . mean_squared_error ( y_test , lr_predictions )) print ( 'RMSE:' , np . sqrt ( metrics . mean_squared_error ( y_test , lr_predictions ))) Model score: 0.5238801531365112 MAE: 26110.712069211004 MSE: 3851956330.37256 RMSE: 62064.130787215254 Looking at the \\(R^2\\) score we get the amount of variance explained by the model, which means we can explain about 52% of the variance in sales price using 27 features of the home. For convenience, scikit-learn estimators have a .score() method you can use as an alternative to the above. Instead of generating predicted scores and then explicitly feeding them to a metric function like r2_score , you can call .score() directly on the estimator after the fit() step, and the prediction will be done implicitly: # Initialize the estimator and fit the data, just like before lr_model = LinearRegression () lr_model . fit ( X_train , y_train ) # Now instead of generating predictions explicitly, # we just call .score(). Note that we lose the ability to # specify the metric: LinearRegression.score() always uses # the R^2 metric. lr_model . score ( X_test , y_test ) 0.5238801531365112 We can also look at how well we did visually by plotting the predicted vs. actual sales price values: range_plot = range ( 100 , 300 ) fig , ax = plt . subplots ( figsize = ( 10 , 6 )) lr_1 = ax . plot ( range_plot , lr_predictions [ range_plot ], color = 'blue' , label = 'Linear Regression' ) lr_2 = ax . plot ( range_plot , y_test [ range_plot ], color = 'red' , label = 'Actual' ) ax . set_ylim ( 0 , 800000 ) ax . set_xlim ( range_plot [ 0 ], range_plot [ - 1 ]) plt . title ( 'Linear Regression: Actual vs. Predicted Sales Price' , fontweight = 'bold' ) plt . xlabel ( 'Sample' , fontweight = 'bold' ) plt . ylabel ( 'Sales Price (USD)' , fontweight = 'bold' ) plt . legend ( handles = [ lr_1 [ 0 ], lr_2 [ 0 ]]) plt . show ()","title":"How well did we do?"},{"location":"machine_learning/logistic_regression.html","text":"Logistic Regression \u00b6 For this section we will work with the Titanic Data Set from Kaggle . We'll be trying to predict a classification problem - survival or deceased. Let's begin our understanding of implementing Logistic Regression in Python for classification. We'll use a \"semi-cleaned\" version of the titanic data set, if you use the data set hosted directly on Kaggle, you may need to do some additional cleaning not shown in this notebook. Let's import some libraries and load the dataset: import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns % matplotlib inline train = pd . read_csv ( '../data/titanic_train.csv' ) Let's view the data present in the dataset: train . head () PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S Exploratory Data Analysis \u00b6 Let's begin some exploratory data analysis! We'll start by checking out missing data! Missing Data \u00b6 We can use seaborn to create a simple heatmap to see where we are missing data! sns . heatmap ( train . isnull (), yticklabels = False , cbar = False , cmap = 'viridis' ); . Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\" Let's continue on by visualizing some more of the data such as our target variable survival: sns . set_style ( 'whitegrid' ); sns . countplot ( x = 'Survived' , data = train , palette = 'RdBu_r' ); . We can manipulate the data a bit and look at the difference in survival betwen men and women: sns . set_style ( 'whitegrid' ); sns . countplot ( x = 'Survived' , hue = 'Sex' , data = train , palette = 'RdBu_r' ); We can also split the data up based on the class level of the passengers: sns . set_style ( 'whitegrid' ); sns . countplot ( x = 'Survived' , hue = 'Pclass' , data = train , palette = 'rainbow' ); Let's now look at the distribution of age for the passengers: sns . distplot ( train [ 'Age' ] . dropna (), kde = False , color = 'darkred' , bins = 30 ); Data Cleaning \u00b6 We want to fill in missing age data instead of just dropping the missing age data rows. One way to do this is by filling in the mean age of all the passengers (imputation). However we can be smarter about this and check the average age by passenger class. For example: plt . figure ( figsize = ( 12 , 7 )); sns . boxplot ( x = 'Pclass' , y = 'Age' , data = train , palette = 'winter' ); We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age. def impute_age ( cols ): Age = cols [ 0 ] Pclass = cols [ 1 ] if pd . isnull ( Age ): if Pclass == 1 : return 37 elif Pclass == 2 : return 29 else : return 24 else : return Age Now apply that function: train [ 'Age' ] = train [[ 'Age' , 'Pclass' ]] . apply ( impute_age , axis = 1 ) Now let's check that heat map again! sns . heatmap ( train . isnull (), yticklabels = False , cbar = False , cmap = 'viridis' ); Great! Let's go ahead and drop the Cabin column and the row in Embarked that is NaN. train . drop ( 'Cabin' , axis = 1 , inplace = True ); train . dropna ( inplace = True ); train . head () PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 S Converting Categorical Features \u00b6 We'll need to convert categorical features to dummy variables using pandas. If we do not convert then our machine learning algorithm won't be able to directly take in those features as inputs. train . info () <class 'pandas.core.frame.DataFrame'> Int64Index: 889 entries, 0 to 890 Data columns (total 11 columns): PassengerId 889 non-null int64 Survived 889 non-null int64 Pclass 889 non-null int64 Name 889 non-null object Sex 889 non-null object Age 889 non-null float64 SibSp 889 non-null int64 Parch 889 non-null int64 Ticket 889 non-null object Fare 889 non-null float64 Embarked 889 non-null object dtypes: float64(2), int64(5), object(4) memory usage: 83.3+ KB sex = pd . get_dummies ( train [ 'Sex' ], drop_first = True ) embark = pd . get_dummies ( train [ 'Embarked' ], drop_first = True ) train . drop ([ 'Sex' , 'Embarked' , 'Name' , 'Ticket' ], axis = 1 , inplace = True ) train = pd . concat ([ train , sex , embark ], axis = 1 ) train . head () PassengerId Survived Pclass Age SibSp Parch Fare male Q S 0 1 0 3 22.0 1 0 7.2500 1 0 1 1 2 1 1 38.0 1 0 71.2833 0 0 0 2 3 1 3 26.0 0 0 7.9250 0 0 1 3 4 1 1 35.0 1 0 53.1000 0 0 1 4 5 0 3 35.0 0 0 8.0500 1 0 1 Great! Our data is ready for our model! Building a Logistic Regression model \u00b6 Let's start by splitting our data into a training set and test set (there is another test.csv file that you can play around with in case you want to use all this data for training). Train Test Split \u00b6 from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( train . drop ( 'Survived' , axis = 1 ), train [ 'Survived' ], test_size = 0.30 , random_state = 101 ) Training and Predicting \u00b6 from sklearn.linear_model import LogisticRegression logmodel = LogisticRegression () logmodel . fit ( X_train , y_train ) predictions = logmodel . predict ( X_test ) Let's move on to evaluate our model! Evaluation \u00b6 We can check precision,recall,f1-score using classification report! from sklearn.metrics import classification_report print ( classification_report ( y_test , predictions )) Not so bad! You might want to explore other feature engineering and the other titanic_text.csv file, some suggestions for feature engineering: Try grabbing the Title (Dr.,Mr.,Mrs,etc..) from the name as a feature Maybe the Cabin letter could be a feature Is there any info you can get from the ticket?","title":"Logistic Regression"},{"location":"machine_learning/logistic_regression.html#logistic-regression","text":"For this section we will work with the Titanic Data Set from Kaggle . We'll be trying to predict a classification problem - survival or deceased. Let's begin our understanding of implementing Logistic Regression in Python for classification. We'll use a \"semi-cleaned\" version of the titanic data set, if you use the data set hosted directly on Kaggle, you may need to do some additional cleaning not shown in this notebook. Let's import some libraries and load the dataset: import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns % matplotlib inline train = pd . read_csv ( '../data/titanic_train.csv' ) Let's view the data present in the dataset: train . head () PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S","title":"Logistic Regression"},{"location":"machine_learning/logistic_regression.html#exploratory-data-analysis","text":"Let's begin some exploratory data analysis! We'll start by checking out missing data!","title":"Exploratory Data Analysis"},{"location":"machine_learning/logistic_regression.html#missing-data","text":"We can use seaborn to create a simple heatmap to see where we are missing data! sns . heatmap ( train . isnull (), yticklabels = False , cbar = False , cmap = 'viridis' ); . Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\" Let's continue on by visualizing some more of the data such as our target variable survival: sns . set_style ( 'whitegrid' ); sns . countplot ( x = 'Survived' , data = train , palette = 'RdBu_r' ); . We can manipulate the data a bit and look at the difference in survival betwen men and women: sns . set_style ( 'whitegrid' ); sns . countplot ( x = 'Survived' , hue = 'Sex' , data = train , palette = 'RdBu_r' ); We can also split the data up based on the class level of the passengers: sns . set_style ( 'whitegrid' ); sns . countplot ( x = 'Survived' , hue = 'Pclass' , data = train , palette = 'rainbow' ); Let's now look at the distribution of age for the passengers: sns . distplot ( train [ 'Age' ] . dropna (), kde = False , color = 'darkred' , bins = 30 );","title":"Missing Data"},{"location":"machine_learning/logistic_regression.html#data-cleaning","text":"We want to fill in missing age data instead of just dropping the missing age data rows. One way to do this is by filling in the mean age of all the passengers (imputation). However we can be smarter about this and check the average age by passenger class. For example: plt . figure ( figsize = ( 12 , 7 )); sns . boxplot ( x = 'Pclass' , y = 'Age' , data = train , palette = 'winter' ); We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age. def impute_age ( cols ): Age = cols [ 0 ] Pclass = cols [ 1 ] if pd . isnull ( Age ): if Pclass == 1 : return 37 elif Pclass == 2 : return 29 else : return 24 else : return Age Now apply that function: train [ 'Age' ] = train [[ 'Age' , 'Pclass' ]] . apply ( impute_age , axis = 1 ) Now let's check that heat map again! sns . heatmap ( train . isnull (), yticklabels = False , cbar = False , cmap = 'viridis' ); Great! Let's go ahead and drop the Cabin column and the row in Embarked that is NaN. train . drop ( 'Cabin' , axis = 1 , inplace = True ); train . dropna ( inplace = True ); train . head () PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 S","title":"Data Cleaning"},{"location":"machine_learning/logistic_regression.html#converting-categorical-features","text":"We'll need to convert categorical features to dummy variables using pandas. If we do not convert then our machine learning algorithm won't be able to directly take in those features as inputs. train . info () <class 'pandas.core.frame.DataFrame'> Int64Index: 889 entries, 0 to 890 Data columns (total 11 columns): PassengerId 889 non-null int64 Survived 889 non-null int64 Pclass 889 non-null int64 Name 889 non-null object Sex 889 non-null object Age 889 non-null float64 SibSp 889 non-null int64 Parch 889 non-null int64 Ticket 889 non-null object Fare 889 non-null float64 Embarked 889 non-null object dtypes: float64(2), int64(5), object(4) memory usage: 83.3+ KB sex = pd . get_dummies ( train [ 'Sex' ], drop_first = True ) embark = pd . get_dummies ( train [ 'Embarked' ], drop_first = True ) train . drop ([ 'Sex' , 'Embarked' , 'Name' , 'Ticket' ], axis = 1 , inplace = True ) train = pd . concat ([ train , sex , embark ], axis = 1 ) train . head () PassengerId Survived Pclass Age SibSp Parch Fare male Q S 0 1 0 3 22.0 1 0 7.2500 1 0 1 1 2 1 1 38.0 1 0 71.2833 0 0 0 2 3 1 3 26.0 0 0 7.9250 0 0 1 3 4 1 1 35.0 1 0 53.1000 0 0 1 4 5 0 3 35.0 0 0 8.0500 1 0 1 Great! Our data is ready for our model!","title":"Converting Categorical Features"},{"location":"machine_learning/logistic_regression.html#building-a-logistic-regression-model","text":"Let's start by splitting our data into a training set and test set (there is another test.csv file that you can play around with in case you want to use all this data for training).","title":"Building a Logistic Regression model"},{"location":"machine_learning/logistic_regression.html#train-test-split","text":"from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( train . drop ( 'Survived' , axis = 1 ), train [ 'Survived' ], test_size = 0.30 , random_state = 101 )","title":"Train Test Split"},{"location":"machine_learning/logistic_regression.html#training-and-predicting","text":"from sklearn.linear_model import LogisticRegression logmodel = LogisticRegression () logmodel . fit ( X_train , y_train ) predictions = logmodel . predict ( X_test ) Let's move on to evaluate our model!","title":"Training and Predicting"},{"location":"machine_learning/logistic_regression.html#evaluation","text":"We can check precision,recall,f1-score using classification report! from sklearn.metrics import classification_report print ( classification_report ( y_test , predictions )) Not so bad! You might want to explore other feature engineering and the other titanic_text.csv file, some suggestions for feature engineering: Try grabbing the Title (Dr.,Mr.,Mrs,etc..) from the name as a feature Maybe the Cabin letter could be a feature Is there any info you can get from the ticket?","title":"Evaluation"},{"location":"machine_learning/ml_basics.html","text":"Introduction \u00b6 Machine learning is the field of science/engineering that seeks to build systems capable of learning from experience. This is a very broad definition, and in practice, the set of activities that get labeled \"machine learning\" is pretty heterogeneous. However, two elements are common to nearly all machine learning applications: (a) the emphasis is on developing algorithms that can learn (semi-)autonomously from data, rather than static rule-based systems that must be explicitly designed or updated by humans; and (b) algorithm evaluation focuses heavily on the ability to meet objective quantitative targets. Fundamentally, machine learning involves building mathematical models to help understand data. \"Learning\" enters the fray when we give these models tunable parameters that can be adapted to observed data; in this way the program can be considered to be \"learning\" from the data. Once these models have been fit to previously seen data, they can be used to predict and understand aspects of newly observed data. Exploratory Data Analysis \u00b6 In exploratory data analysis (EDA), a major component of the data science lifecycle, data is summarized, visualized, and transformed in order to understand it more deeply. Through exploratory data analysis we seek to deeply understand our data. Maintaining \"a state of flexibility\" helps us know what to look for. Fluency with our computational tools allows us to conduct our search. In this chapter, we emphasize the necessary attitude as we introduce increasingly sophisticated tools. Although EDA varies between domains of study, we almost always begin EDA by understanding: The data types of columns and the granularity of rows in the dataset. The distributions of quantitative data and measures of center and spread. Relationships between quantities in the dataset. Machine Learning Categories \u00b6 At the most fundamental level, machine learning can be categorized into two main types: supervised learning and unsupervised learning Supervised learning \u00b6 Learning is supervised whenever we know the true values that our model is trying to predict, and hence, are in a position to \"supervise\" the learning process by quantifying prediction accuracy and making iterative adjustments. Some examples of supervised learning problems: Determining whether or not incoming email is spam Predicting a person's age from personality scores Diagnosing schizophrenia based on genetic markers Within the class of supervised learning problems, we can draw a further distinction between classification problems and regression problems. In both cases, the goal is to develop a predictive model that recovers the true labels as accurately as possible. The difference between the two lies in the nature of the labels: in classification, the labels are discrete; in regression, they're continuous. For example, suppose someone hands us the following data: import matplotlib.pyplot as plt # scikit-learn has some handy utilities for generating structure data from sklearn.datasets import make_blobs X , y = make_blobs ( n_samples = 50 , centers = 2 , random_state = 1 , cluster_std = 1 ) point_style = dict ( cmap = 'Paired' , s = len ( X )) plt . scatter ( * X . T , c = y , ** point_style ); With supervised learning we are provided labels for the data so we can have an idea of what the difference between custers. Unsupervised learning \u00b6 Learning is unsupervised when there's no ground truth or right answer, and the goal is just to learn some useful structure from the data. The learning algorithm receives no direct guidance about how well it's performing. For example, suppose someone hands us the following data, with no further explanation and no labels: # scikit-learn has some handy utilities for generating structure data X , y = make_blobs ( n_samples = 50 , centers = 2 , random_state = 1 , cluster_std = 1 ) plt . scatter ( * X . T ); It would be natural to think that these data are generated from two distinct clusters . But since the data are unlabeled, we don't know for a fact that this assignment is correct; we're inferring the grouping in an unsupervised way, based on whatever principle are built into our estimation method (e.g., our visual system's tendency to group objects together based on proximity). The lack of access to the ground truth\u2014and often, it's not even clear that there is any ground truth\u2014underscores the difficulty of the unsupervised learning challenge. Classification \u00b6 Now let's look at classification. In this case, the target labels we're trying to predict are discrete (or categorical). For example, building a model that takes a structural brain image as input and outputs a prediction about whether the brain belongs to a dog or a cat is a classification problem, because the output is discrete: each brain belongs to one of the two classes (or categories), and no brain ever takes on an an intermediate value (though our classifiers can certainly make a graded or probabilistic prediction about which class a brain belongs to). In practice, we can often turn regression problems into classification problems by discretizing the data in some way. To make the point really clear, let's continue with the last plot within the unsupervised section. Here we have two-dimensional data: that is, we have two features for each point, represented by the (x,y) positions of the points on the plane. In addition, we have one of three class labels for each point, here represented by the colors of the points. From these features and labels, we would like to create a model that will let us decide whether a new point should be labeled color 1, color 2 or color 3. There are a number of possible models for such a classification task, but here we will use an extremely simple one. We will make the assumption that the two groups can be separated by drawing a straight line through the plane between them, such that points on each side of the line fall in the same group. Here the model is a quantitative version of the statement \"a straight line separates the classes\", while the model parameters are the particular numbers describing the location and orientation of that line for our data. The optimal values for these model parameters are learned from the data (this is the \"learning\" in machine learning), which is often called training the model. import numpy as np from sklearn.svm import SVC X , y = make_blobs ( n_samples = 50 , centers = 2 , random_state = 1 , cluster_std = 1 ) # fit the support vector classifier model clf = SVC ( kernel = 'linear' ) clf . fit ( X , y ) # Get contours describing the model xx = np . linspace ( - 12 , 1 , 10 ) yy = np . linspace ( - 7 , 7 , 10 ) xy1 , xy2 = np . meshgrid ( xx , yy ) Z = np . array ([ clf . decision_function ([ t ]) for t in zip ( xy1 . flat , xy2 . flat )]) . reshape ( xy1 . shape ) # plot points and model fig , ax = plt . subplots ( figsize = ( 8 , 6 )); line_style = dict ( levels = [ - 1.0 , 0.0 , 1.0 ], linestyles = [ 'dashed' , 'solid' , 'dashed' ], colors = 'gray' , linewidths = 1 ) ax . scatter ( X [:, 0 ], X [:, 1 ], c = y , ** point_style ); ax . contour ( xy1 , xy2 , Z , ** line_style ); Data Types \u00b6 We often begin exploratory data analysis by examining the types of data that occur in a table. Although there are multiple ways of categorizing data types, in this book we discuss three broad types of data: Nominal data: represents categories that do not have a natural ordering. For example: political party affiliation (Democrat, Republican, Other), sex (male, female, other), and computer operating system (Windows, MacOS, Linux). Ordinal data: represents ordered categories. For example: T-shirt sizes (small, medium, large), Likert-scale responses (disagree, neutral, agree), and level of education (high school, college, graduate school). Ordinal and nominal data are considered subtypes of categorical data. Numerical data: represents amounts or quantities. For example: heights, prices, and distances. We refer to these types as statistical data types, or simply data types.","title":"Introduction"},{"location":"machine_learning/ml_basics.html#introduction","text":"Machine learning is the field of science/engineering that seeks to build systems capable of learning from experience. This is a very broad definition, and in practice, the set of activities that get labeled \"machine learning\" is pretty heterogeneous. However, two elements are common to nearly all machine learning applications: (a) the emphasis is on developing algorithms that can learn (semi-)autonomously from data, rather than static rule-based systems that must be explicitly designed or updated by humans; and (b) algorithm evaluation focuses heavily on the ability to meet objective quantitative targets. Fundamentally, machine learning involves building mathematical models to help understand data. \"Learning\" enters the fray when we give these models tunable parameters that can be adapted to observed data; in this way the program can be considered to be \"learning\" from the data. Once these models have been fit to previously seen data, they can be used to predict and understand aspects of newly observed data.","title":"Introduction"},{"location":"machine_learning/ml_basics.html#exploratory-data-analysis","text":"In exploratory data analysis (EDA), a major component of the data science lifecycle, data is summarized, visualized, and transformed in order to understand it more deeply. Through exploratory data analysis we seek to deeply understand our data. Maintaining \"a state of flexibility\" helps us know what to look for. Fluency with our computational tools allows us to conduct our search. In this chapter, we emphasize the necessary attitude as we introduce increasingly sophisticated tools. Although EDA varies between domains of study, we almost always begin EDA by understanding: The data types of columns and the granularity of rows in the dataset. The distributions of quantitative data and measures of center and spread. Relationships between quantities in the dataset.","title":"Exploratory Data Analysis"},{"location":"machine_learning/ml_basics.html#machine-learning-categories","text":"At the most fundamental level, machine learning can be categorized into two main types: supervised learning and unsupervised learning","title":"Machine Learning Categories"},{"location":"machine_learning/ml_basics.html#supervised-learning","text":"Learning is supervised whenever we know the true values that our model is trying to predict, and hence, are in a position to \"supervise\" the learning process by quantifying prediction accuracy and making iterative adjustments. Some examples of supervised learning problems: Determining whether or not incoming email is spam Predicting a person's age from personality scores Diagnosing schizophrenia based on genetic markers Within the class of supervised learning problems, we can draw a further distinction between classification problems and regression problems. In both cases, the goal is to develop a predictive model that recovers the true labels as accurately as possible. The difference between the two lies in the nature of the labels: in classification, the labels are discrete; in regression, they're continuous. For example, suppose someone hands us the following data: import matplotlib.pyplot as plt # scikit-learn has some handy utilities for generating structure data from sklearn.datasets import make_blobs X , y = make_blobs ( n_samples = 50 , centers = 2 , random_state = 1 , cluster_std = 1 ) point_style = dict ( cmap = 'Paired' , s = len ( X )) plt . scatter ( * X . T , c = y , ** point_style ); With supervised learning we are provided labels for the data so we can have an idea of what the difference between custers.","title":"Supervised learning"},{"location":"machine_learning/ml_basics.html#unsupervised-learning","text":"Learning is unsupervised when there's no ground truth or right answer, and the goal is just to learn some useful structure from the data. The learning algorithm receives no direct guidance about how well it's performing. For example, suppose someone hands us the following data, with no further explanation and no labels: # scikit-learn has some handy utilities for generating structure data X , y = make_blobs ( n_samples = 50 , centers = 2 , random_state = 1 , cluster_std = 1 ) plt . scatter ( * X . T ); It would be natural to think that these data are generated from two distinct clusters . But since the data are unlabeled, we don't know for a fact that this assignment is correct; we're inferring the grouping in an unsupervised way, based on whatever principle are built into our estimation method (e.g., our visual system's tendency to group objects together based on proximity). The lack of access to the ground truth\u2014and often, it's not even clear that there is any ground truth\u2014underscores the difficulty of the unsupervised learning challenge.","title":"Unsupervised learning"},{"location":"machine_learning/ml_basics.html#classification","text":"Now let's look at classification. In this case, the target labels we're trying to predict are discrete (or categorical). For example, building a model that takes a structural brain image as input and outputs a prediction about whether the brain belongs to a dog or a cat is a classification problem, because the output is discrete: each brain belongs to one of the two classes (or categories), and no brain ever takes on an an intermediate value (though our classifiers can certainly make a graded or probabilistic prediction about which class a brain belongs to). In practice, we can often turn regression problems into classification problems by discretizing the data in some way. To make the point really clear, let's continue with the last plot within the unsupervised section. Here we have two-dimensional data: that is, we have two features for each point, represented by the (x,y) positions of the points on the plane. In addition, we have one of three class labels for each point, here represented by the colors of the points. From these features and labels, we would like to create a model that will let us decide whether a new point should be labeled color 1, color 2 or color 3. There are a number of possible models for such a classification task, but here we will use an extremely simple one. We will make the assumption that the two groups can be separated by drawing a straight line through the plane between them, such that points on each side of the line fall in the same group. Here the model is a quantitative version of the statement \"a straight line separates the classes\", while the model parameters are the particular numbers describing the location and orientation of that line for our data. The optimal values for these model parameters are learned from the data (this is the \"learning\" in machine learning), which is often called training the model. import numpy as np from sklearn.svm import SVC X , y = make_blobs ( n_samples = 50 , centers = 2 , random_state = 1 , cluster_std = 1 ) # fit the support vector classifier model clf = SVC ( kernel = 'linear' ) clf . fit ( X , y ) # Get contours describing the model xx = np . linspace ( - 12 , 1 , 10 ) yy = np . linspace ( - 7 , 7 , 10 ) xy1 , xy2 = np . meshgrid ( xx , yy ) Z = np . array ([ clf . decision_function ([ t ]) for t in zip ( xy1 . flat , xy2 . flat )]) . reshape ( xy1 . shape ) # plot points and model fig , ax = plt . subplots ( figsize = ( 8 , 6 )); line_style = dict ( levels = [ - 1.0 , 0.0 , 1.0 ], linestyles = [ 'dashed' , 'solid' , 'dashed' ], colors = 'gray' , linewidths = 1 ) ax . scatter ( X [:, 0 ], X [:, 1 ], c = y , ** point_style ); ax . contour ( xy1 , xy2 , Z , ** line_style );","title":"Classification"},{"location":"machine_learning/ml_basics.html#data-types","text":"We often begin exploratory data analysis by examining the types of data that occur in a table. Although there are multiple ways of categorizing data types, in this book we discuss three broad types of data: Nominal data: represents categories that do not have a natural ordering. For example: political party affiliation (Democrat, Republican, Other), sex (male, female, other), and computer operating system (Windows, MacOS, Linux). Ordinal data: represents ordered categories. For example: T-shirt sizes (small, medium, large), Likert-scale responses (disagree, neutral, agree), and level of education (high school, college, graduate school). Ordinal and nominal data are considered subtypes of categorical data. Numerical data: represents amounts or quantities. For example: heights, prices, and distances. We refer to these types as statistical data types, or simply data types.","title":"Data Types"},{"location":"neuro_software/ants.html","text":"Get the latest ANTs code \u00b6 Advanced Normalization Tools (ANTS) was developed by Brian Avants, Nicolas Tustison, and Gang Song in 2014. ANTs is a C++ command-line toolkit providing functionality for image registration and segmentation. Linux \u00b6 Download the latest code into an arbitrary directory, I use ~/code : cd ~/code mkdir ants_{build,source} git clone https://github.com/ANTsX/ANTs.git ./ants_source You will also need to install the ZLIB libraries: sudo apt-get install zlib1g-dev Run CMake/Make \u00b6 Note If you don't have make/cmake, follow the steps in this guide . It's best to store manually installed software in /opt , which is the default location with ANTs /opt/ANTs . You can change the path within ccmake. cd ~/code/ants_build ccmake ~/code/ants_source Hit 'c' to do an initial configuration. CMake will do some checking and then present options for review. Hit 'c' again to do another round of configuration. If there are no errors, you're ready to generate the make files by pressing 'g' . Now you are back at the command line, it's time to compile. To save time, you can use multiple threads by using -j , for example: sudo make -j4 This will take awhile, so grab a coffee. Once complete you need to cd into the ANTS-build directory and run make install : cd ANTS-build sudo make install Post-install Configuration \u00b6 If you want to use ANTs scripts, copy them from the source directory /ants_source/Scripts/ to the /opt/ANTs/bin directory where antsRegistration etc are located: sudo cp -r ~/code/ants_source/Scripts/* /opt/ANTs/bin/ After the build, there will be a binary directory /opt/ANTs/bin that contains the programs (and scripts if you've included them). The scripts additionally require ANTSPATH to point to the bin directory including a trailing slash. You will need to edit your .profile file by adding the following lines: export ANTSPATH=/opt/ANTs/bin export PATH=${ANTSPATH}:$PATH Close your WSL and reopen. Now check the install by running: which antsRegistration","title":"Advanced Normalization Tools"},{"location":"neuro_software/ants.html#get-the-latest-ants-code","text":"Advanced Normalization Tools (ANTS) was developed by Brian Avants, Nicolas Tustison, and Gang Song in 2014. ANTs is a C++ command-line toolkit providing functionality for image registration and segmentation.","title":"Get the latest ANTs code"},{"location":"neuro_software/ants.html#linux","text":"Download the latest code into an arbitrary directory, I use ~/code : cd ~/code mkdir ants_{build,source} git clone https://github.com/ANTsX/ANTs.git ./ants_source You will also need to install the ZLIB libraries: sudo apt-get install zlib1g-dev","title":"Linux"},{"location":"neuro_software/ants.html#run-cmakemake","text":"Note If you don't have make/cmake, follow the steps in this guide . It's best to store manually installed software in /opt , which is the default location with ANTs /opt/ANTs . You can change the path within ccmake. cd ~/code/ants_build ccmake ~/code/ants_source Hit 'c' to do an initial configuration. CMake will do some checking and then present options for review. Hit 'c' again to do another round of configuration. If there are no errors, you're ready to generate the make files by pressing 'g' . Now you are back at the command line, it's time to compile. To save time, you can use multiple threads by using -j , for example: sudo make -j4 This will take awhile, so grab a coffee. Once complete you need to cd into the ANTS-build directory and run make install : cd ANTS-build sudo make install","title":"Run CMake/Make"},{"location":"neuro_software/ants.html#post-install-configuration","text":"If you want to use ANTs scripts, copy them from the source directory /ants_source/Scripts/ to the /opt/ANTs/bin directory where antsRegistration etc are located: sudo cp -r ~/code/ants_source/Scripts/* /opt/ANTs/bin/ After the build, there will be a binary directory /opt/ANTs/bin that contains the programs (and scripts if you've included them). The scripts additionally require ANTSPATH to point to the bin directory including a trailing slash. You will need to edit your .profile file by adding the following lines: export ANTSPATH=/opt/ANTs/bin export PATH=${ANTSPATH}:$PATH Close your WSL and reopen. Now check the install by running: which antsRegistration","title":"Post-install Configuration"},{"location":"neuro_software/art.html","text":"Download ART \u00b6 Download the newest version of ART . Linux \u00b6 Make a new directory for the install and extract the tar package into it: mkdir ~/Applications/ART cd ~/Applications/ART tar -xvzf /mnt/c/Users/*[your_username]*/Downloads/acpcdetect2.0*.tar.gz Post Configuration \u00b6 Set the ARTHOME environment variable and add the binary directory to your PATH by editing your ~/.bashrc file: vim ~/.basrc Add these lines to the end: export ARTHOME=/path/to/ART export PATH=$ARTHOME/bin:$PATH Confirm Installation \u00b6 Execute acpcdetect by running command in terminal You may get an error when executing acpcdetect : acpcdetect: error while loading shared libraries: liblapack.so.3: cannot open shared object file: No such file or directory If you get this error, run the following: sudo apt-get install libatlas-base-dev You will also need to install pnmtopng sudo apt-get install -y pnmtopng","title":"Automatic Registration Toolbox"},{"location":"neuro_software/art.html#download-art","text":"Download the newest version of ART .","title":"Download ART"},{"location":"neuro_software/art.html#linux","text":"Make a new directory for the install and extract the tar package into it: mkdir ~/Applications/ART cd ~/Applications/ART tar -xvzf /mnt/c/Users/*[your_username]*/Downloads/acpcdetect2.0*.tar.gz","title":"Linux"},{"location":"neuro_software/art.html#post-configuration","text":"Set the ARTHOME environment variable and add the binary directory to your PATH by editing your ~/.bashrc file: vim ~/.basrc Add these lines to the end: export ARTHOME=/path/to/ART export PATH=$ARTHOME/bin:$PATH","title":"Post Configuration"},{"location":"neuro_software/art.html#confirm-installation","text":"Execute acpcdetect by running command in terminal You may get an error when executing acpcdetect : acpcdetect: error while loading shared libraries: liblapack.so.3: cannot open shared object file: No such file or directory If you get this error, run the following: sudo apt-get install libatlas-base-dev You will also need to install pnmtopng sudo apt-get install -y pnmtopng","title":"Confirm Installation"},{"location":"neuro_software/dcm2niix.html","text":"Linux \u00b6 Run the following code in a linux terminal: sudo apt-get install dcm2niix Install Dependencies \u00b6 If you plan to run with a compressed output, you should install pigz to make the conversion run faster: sudo apt-get install pigz","title":"dcm2niix"},{"location":"neuro_software/dcm2niix.html#linux","text":"Run the following code in a linux terminal: sudo apt-get install dcm2niix","title":"Linux"},{"location":"neuro_software/dcm2niix.html#install-dependencies","text":"If you plan to run with a compressed output, you should install pigz to make the conversion run faster: sudo apt-get install pigz","title":"Install Dependencies"},{"location":"neuro_software/freesurfer.html","text":"Download software \u00b6 Download the software version . Linux \u00b6 Run the following command: sudo tar -C /usr/local -xzvf /mnt/c/Users/*[your_username]*/Downloads/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz You will also need to install some dependancies: sudo apt-get install tcsh sudo apt-get install libglu1 sudo apt-get install libxss1 Post-Install Configurations \u00b6 Add Freesurfer to your path: echo \"FREESURFER_HOME=/usr/local/freesurfer\" >> ~/.bashrc echo 'source $FREESURFER_HOME/SetUpFreeSurfer.sh' >> ~/.bashrc If you have run the install correctly you will see this output: Setting up environment for FreeSurfer/FS-FAST (and FSL) FREESURFER_HOME /usr/local/freesurfer FSFAST_HOME /usr/local/freesurfer/fsfast FSF_OUTPUT_FORMAT nii SUBJECTS_DIR /usr/local/freesurfer/subjects MNI_DIR /usr/local/freesurfer/mni Define subjects_dir \u00b6 FreeSurfer requires an environment variable called SUBJECTS_DIR . This is the directory where subject data is stored. export SUBJECTS_DIR=<path to subject data> Obtain license \u00b6 You will need to obtain a license key . Once you obtain the license.txt key file, copy it to your FreeSurfer installation directory. This is also the location defined by the FREESURFER_HOME environment variable. sudo mv /mnt/c/Users/*[your_username]*/Downloads/license.txt $FREESURFER_HOME","title":"Freesurfer"},{"location":"neuro_software/freesurfer.html#download-software","text":"Download the software version .","title":"Download software"},{"location":"neuro_software/freesurfer.html#linux","text":"Run the following command: sudo tar -C /usr/local -xzvf /mnt/c/Users/*[your_username]*/Downloads/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz You will also need to install some dependancies: sudo apt-get install tcsh sudo apt-get install libglu1 sudo apt-get install libxss1","title":"Linux"},{"location":"neuro_software/freesurfer.html#post-install-configurations","text":"Add Freesurfer to your path: echo \"FREESURFER_HOME=/usr/local/freesurfer\" >> ~/.bashrc echo 'source $FREESURFER_HOME/SetUpFreeSurfer.sh' >> ~/.bashrc If you have run the install correctly you will see this output: Setting up environment for FreeSurfer/FS-FAST (and FSL) FREESURFER_HOME /usr/local/freesurfer FSFAST_HOME /usr/local/freesurfer/fsfast FSF_OUTPUT_FORMAT nii SUBJECTS_DIR /usr/local/freesurfer/subjects MNI_DIR /usr/local/freesurfer/mni","title":"Post-Install Configurations"},{"location":"neuro_software/freesurfer.html#define-subjects_dir","text":"FreeSurfer requires an environment variable called SUBJECTS_DIR . This is the directory where subject data is stored. export SUBJECTS_DIR=<path to subject data>","title":"Define subjects_dir"},{"location":"neuro_software/freesurfer.html#obtain-license","text":"You will need to obtain a license key . Once you obtain the license.txt key file, copy it to your FreeSurfer installation directory. This is also the location defined by the FREESURFER_HOME environment variable. sudo mv /mnt/c/Users/*[your_username]*/Downloads/license.txt $FREESURFER_HOME","title":"Obtain license"},{"location":"neuro_software/fsl.html","text":"Installing FSL \u00b6 The easiest method is to download this python script . You will need to register. On the subsequent page you will download the fslinstaller.py file. Installing on Pop_OS! \u00b6 You will first need to run the following steps prior to installing FSL. Note The following steps were originally written here . Warning make sure you run a backup prior to performing this hack\u2026 just in case. move your current OS information files into a temporary location: sudo mv /etc/os-release /etc/os-release.pop && sudo mv /etc/lsb-release /etc/lsb-release.pop write a new os-release file: sudo gedit /etc/os-release copy the following into this file: NAME=\"Ubuntu\" VERSION=\"20.04 LTS (Focal Fossa)\" ID=ubuntu ID_LIKE=debian PRETTY_NAME=\"Ubuntu 20.04 LTS\" VERSION_ID=\"20.04\" HOME_URL=\"https://www.ubuntu.com/\" SUPPORT_URL=\"https://help.ubuntu.com/\" BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\" PRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\" VERSION_CODENAME=focal UBUNTU_CODENAME=focal write a new lsb-release file: sudo gedit /etc/lsb-release copy the following into this file: DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION=\"Ubuntu 20.04 LTS\" now run the fslinstaller.py script in the below section and return here to Step 5 to return your OS information. after running the FSL install steps, remove the files you wrote: sudo rm /etc/os-release && sudo rm /etc/lsb-release move the original files back: sudo mv /etc/os-release.pop /etc/os-release && sudo mv /etc/lsb-release.pop /etc/lsb-release Linux \u00b6 Run the following in a linux terminal (the install will take awhile): python /home/*[your_username]*/Downloads/fslinstaller.py You will also need to install the package wxpython : pip install wxpython If that does not work then run: pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-16.04 wxPython Potential libraries you may need \u00b6 You may need to install some of the following libraries. Multiple-image Network Graphics library (libmng) sudo apt-get install libmng2 sudo apt-get install libmng-dev PNG library - development (libpng-dev) sudo apt-get install libpng-dev Optimized BLAS (linear algebra) library (libopenblas-base) sudo apt-get install libopenblas-base export LD_LIBRARY_PATH=/usr/lib/openblas-base/ libmng.so.1 Error You will need to create a symbolic link for the library dll libmng.so.1 : sudo ln -s /usr/lib/x86_64-linux-gnu/libmng.so.2 /usr/lib/x86_64-linux-gnu/libmng.so.1 Independent JPEG Group's JPEG runtime library (libjpeg62) sudo apt-get install libjpeg62 PNG library - runtime (libpng12.deb) wget -q -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb \\ && sudo dpkg -i /tmp/libpng12.deb \\ && rm /tmp/libpng12.deb GTK+ graphical user interface library (gtk2.0) sudo apt-get install gtk2.0 Pulseaudio for other random libraries sudo apt-get install pulseaudio You may also receive an error No D-BUS daemon running run the following: sudo chown -R *[your username]*:admin ~/.dbus","title":"FMRIB Software Library (FSL)"},{"location":"neuro_software/fsl.html#installing-fsl","text":"The easiest method is to download this python script . You will need to register. On the subsequent page you will download the fslinstaller.py file.","title":"Installing FSL"},{"location":"neuro_software/fsl.html#installing-on-pop_os","text":"You will first need to run the following steps prior to installing FSL. Note The following steps were originally written here . Warning make sure you run a backup prior to performing this hack\u2026 just in case. move your current OS information files into a temporary location: sudo mv /etc/os-release /etc/os-release.pop && sudo mv /etc/lsb-release /etc/lsb-release.pop write a new os-release file: sudo gedit /etc/os-release copy the following into this file: NAME=\"Ubuntu\" VERSION=\"20.04 LTS (Focal Fossa)\" ID=ubuntu ID_LIKE=debian PRETTY_NAME=\"Ubuntu 20.04 LTS\" VERSION_ID=\"20.04\" HOME_URL=\"https://www.ubuntu.com/\" SUPPORT_URL=\"https://help.ubuntu.com/\" BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\" PRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\" VERSION_CODENAME=focal UBUNTU_CODENAME=focal write a new lsb-release file: sudo gedit /etc/lsb-release copy the following into this file: DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION=\"Ubuntu 20.04 LTS\" now run the fslinstaller.py script in the below section and return here to Step 5 to return your OS information. after running the FSL install steps, remove the files you wrote: sudo rm /etc/os-release && sudo rm /etc/lsb-release move the original files back: sudo mv /etc/os-release.pop /etc/os-release && sudo mv /etc/lsb-release.pop /etc/lsb-release","title":"Installing on Pop_OS!"},{"location":"neuro_software/fsl.html#linux","text":"Run the following in a linux terminal (the install will take awhile): python /home/*[your_username]*/Downloads/fslinstaller.py You will also need to install the package wxpython : pip install wxpython If that does not work then run: pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-16.04 wxPython","title":"Linux"},{"location":"neuro_software/fsl.html#potential-libraries-you-may-need","text":"You may need to install some of the following libraries. Multiple-image Network Graphics library (libmng) sudo apt-get install libmng2 sudo apt-get install libmng-dev PNG library - development (libpng-dev) sudo apt-get install libpng-dev Optimized BLAS (linear algebra) library (libopenblas-base) sudo apt-get install libopenblas-base export LD_LIBRARY_PATH=/usr/lib/openblas-base/ libmng.so.1 Error You will need to create a symbolic link for the library dll libmng.so.1 : sudo ln -s /usr/lib/x86_64-linux-gnu/libmng.so.2 /usr/lib/x86_64-linux-gnu/libmng.so.1 Independent JPEG Group's JPEG runtime library (libjpeg62) sudo apt-get install libjpeg62 PNG library - runtime (libpng12.deb) wget -q -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb \\ && sudo dpkg -i /tmp/libpng12.deb \\ && rm /tmp/libpng12.deb GTK+ graphical user interface library (gtk2.0) sudo apt-get install gtk2.0 Pulseaudio for other random libraries sudo apt-get install pulseaudio You may also receive an error No D-BUS daemon running run the following: sudo chown -R *[your username]*:admin ~/.dbus","title":"Potential libraries you may need"},{"location":"neuro_software/itk.html","text":"Installing ITK \u00b6 Linux \u00b6 Create a build, install and source directory for ITK: mkdir ~/Downloads/itk_{build,source} Obtain the newest version of SimpleITK or by running the following: cd ~/Downloads/itk_source git clone --recursive https://github.com/SimpleITK/SimpleITK.git . Run CMake/Make \u00b6 Note If you don't have make/cmake, follow the steps in this guide . Make the build and install directories. The default install location is /usr/local , which falls on your PATH. This is the easiest location to install. If you want to install somewhere else then specify the path in the CMAKE_INSTALL_PREFIX variable. cd ~/Downloads/itk_build ccmake ~/Downloads/itk_source/SuperBuild Press 'c' to configure the ITK project, press 'c' again to finalize the configuration. Once the project is correctly configured, press the 'g' key to generate the Makefiles. You can then build and install the project: make -j4 If the install prefix directory you chose in ccmake is not on your PATH, you will need to add it to your PATH. In order to use ITK in any terminal, you will need to edit your .profile file by adding the following lines: ITKbin=<path_to_your_ITK_install> export PATH={ITKbin}/ITK-build/bin:${PATH} export LD_LIBRARY_PATH={ITKbin}/ITK-build/lib :${LD_LIBRARY_PATH}","title":"ITK"},{"location":"neuro_software/itk.html#installing-itk","text":"","title":"Installing ITK"},{"location":"neuro_software/itk.html#linux","text":"Create a build, install and source directory for ITK: mkdir ~/Downloads/itk_{build,source} Obtain the newest version of SimpleITK or by running the following: cd ~/Downloads/itk_source git clone --recursive https://github.com/SimpleITK/SimpleITK.git .","title":"Linux"},{"location":"neuro_software/itk.html#run-cmakemake","text":"Note If you don't have make/cmake, follow the steps in this guide . Make the build and install directories. The default install location is /usr/local , which falls on your PATH. This is the easiest location to install. If you want to install somewhere else then specify the path in the CMAKE_INSTALL_PREFIX variable. cd ~/Downloads/itk_build ccmake ~/Downloads/itk_source/SuperBuild Press 'c' to configure the ITK project, press 'c' again to finalize the configuration. Once the project is correctly configured, press the 'g' key to generate the Makefiles. You can then build and install the project: make -j4 If the install prefix directory you chose in ccmake is not on your PATH, you will need to add it to your PATH. In order to use ITK in any terminal, you will need to edit your .profile file by adding the following lines: ITKbin=<path_to_your_ITK_install> export PATH={ITKbin}/ITK-build/bin:${PATH} export LD_LIBRARY_PATH={ITKbin}/ITK-build/lib :${LD_LIBRARY_PATH}","title":"Run CMake/Make"},{"location":"neuro_software/niftyreg.html","text":"Installing NiftyReg \u00b6 Linux \u00b6 I like to build within a directory named code found in the root of my user directory, to create this directory run: mkdir ~/code Now create a build, install and source directory for NiftyReg: cd ~/code mkdir niftyreg_{build,source} Obtain the newest version of NiftyReg or by running the following: cd ~/code/niftyreg_source git clone https://github.com/SuperElastix/niftyreg.git . Run CMake/Make \u00b6 Make the build and install directories. The default install location is /usr/local , which falls on your PATH. This is the easiest location to install. If you want to install somewhere else then specify the path in the CMAKE_INSTALL_PREFIX variable. cd ~/code/niftyreg_build ccmake ~/code/niftyreg_source If you get an error like: Error opening terminal: xterm-256color. run the following and try again (you can also add this to your .bashrc file): export TERM=xterm The following options will be displayed, ensure you change CMAKE_INSTALL_PREFIX variable to the install directory path if you don't want to use default: Parameter Value BUILD_ALL_DEP Set to ON if you want to build All the dependencies BUILD_SHARED_LIBS Build the libraries as shared build the libraries as shared BUILD_TESTING Set to ON if you want to build the unit tests CMAKE_BUILD_TYPE Compiling options: Debug Release RelWithDebInfo MinSizeRel CMAKE_INSTALL_PREFIX Set the path where the final install will be copied M_LIBRARY Path to a library. PNG_INCLUDE_DIR Set if you want NiftyReg to support the PNG file format for 2D images. Note that CMake will try to find the libpng on your system and will build it automatically if it does not find it. USE_CUDA Set to ON if you want to build the GPU code. The CUDA toolkit must be install otherwise CMake will return an error message USE_OPENCL Set to ON to use OpenCL for multi-CPU implementation. USE_OPENMP Set to ON to use OpenMP for multi-CPU implementation. USE_SSE Set to ON to use SIMD based implementation, mostly for cubic B-Spline related computation. Note that SIMD implementation has only be done for single precision. Press 'c' to configure the NiftyReg project, press 'c' to configure the project. Once the project is correctly configured, press the 'g' key to generate the Makefiles. You can then build and install the project: sudo make -j4 sudo make install If you get an error try setting USE_OPENMP to OFF while running ccmake . Post-Install Configuration \u00b6 The project should then be installed into the CMAKE_INSTALL_PREFIX directory you previously created. If you changed the install prefix directory, to one not on your PATH, you will need to add NiftyReg to your PATH. In order to use NiftyReg in any terminal, you will need to edit your .profile file by adding the following lines: NREG=<path_to_your_niftyreg_install> export PATH={NREG}/bin:${PATH} export LD_LIBRARY_PATH={NREG}/lib:${LD_LIBRARY_PATH} Close and re-open the linux terminal then run: reg_f3d","title":"NiftyReg"},{"location":"neuro_software/niftyreg.html#installing-niftyreg","text":"","title":"Installing NiftyReg"},{"location":"neuro_software/niftyreg.html#linux","text":"I like to build within a directory named code found in the root of my user directory, to create this directory run: mkdir ~/code Now create a build, install and source directory for NiftyReg: cd ~/code mkdir niftyreg_{build,source} Obtain the newest version of NiftyReg or by running the following: cd ~/code/niftyreg_source git clone https://github.com/SuperElastix/niftyreg.git .","title":"Linux"},{"location":"neuro_software/niftyreg.html#run-cmakemake","text":"Make the build and install directories. The default install location is /usr/local , which falls on your PATH. This is the easiest location to install. If you want to install somewhere else then specify the path in the CMAKE_INSTALL_PREFIX variable. cd ~/code/niftyreg_build ccmake ~/code/niftyreg_source If you get an error like: Error opening terminal: xterm-256color. run the following and try again (you can also add this to your .bashrc file): export TERM=xterm The following options will be displayed, ensure you change CMAKE_INSTALL_PREFIX variable to the install directory path if you don't want to use default: Parameter Value BUILD_ALL_DEP Set to ON if you want to build All the dependencies BUILD_SHARED_LIBS Build the libraries as shared build the libraries as shared BUILD_TESTING Set to ON if you want to build the unit tests CMAKE_BUILD_TYPE Compiling options: Debug Release RelWithDebInfo MinSizeRel CMAKE_INSTALL_PREFIX Set the path where the final install will be copied M_LIBRARY Path to a library. PNG_INCLUDE_DIR Set if you want NiftyReg to support the PNG file format for 2D images. Note that CMake will try to find the libpng on your system and will build it automatically if it does not find it. USE_CUDA Set to ON if you want to build the GPU code. The CUDA toolkit must be install otherwise CMake will return an error message USE_OPENCL Set to ON to use OpenCL for multi-CPU implementation. USE_OPENMP Set to ON to use OpenMP for multi-CPU implementation. USE_SSE Set to ON to use SIMD based implementation, mostly for cubic B-Spline related computation. Note that SIMD implementation has only be done for single precision. Press 'c' to configure the NiftyReg project, press 'c' to configure the project. Once the project is correctly configured, press the 'g' key to generate the Makefiles. You can then build and install the project: sudo make -j4 sudo make install If you get an error try setting USE_OPENMP to OFF while running ccmake .","title":"Run CMake/Make"},{"location":"neuro_software/niftyreg.html#post-install-configuration","text":"The project should then be installed into the CMAKE_INSTALL_PREFIX directory you previously created. If you changed the install prefix directory, to one not on your PATH, you will need to add NiftyReg to your PATH. In order to use NiftyReg in any terminal, you will need to edit your .profile file by adding the following lines: NREG=<path_to_your_niftyreg_install> export PATH={NREG}/bin:${PATH} export LD_LIBRARY_PATH={NREG}/lib:${LD_LIBRARY_PATH} Close and re-open the linux terminal then run: reg_f3d","title":"Post-Install Configuration"},{"location":"operating_systems/cmake.html","text":"Install Make \u00b6 Linux \u00b6 Install build essentials and Make first: sudo apt-get install make sudo apt-get update && sudo apt-get install build-essential Install CMake \u00b6 Download the latest version of CMake from the Cmake website . Linux \u00b6 From the website, download the bash shell script. It's best to keep manually installed packages within the /opt directory. In your linux shell run: cd /opt chmod +x /home/[your_username]/Downloads/cmake-*-Linux-x86_64.sh sudo /home/[your_username]/Downloads/cmake-*-Linux-x86_64.sh Then add the following to your ~/.profile : export PATH=/opt/cmake-3.13.3-Linux-x86_64/bin:$PATH","title":"Make/Cmake"},{"location":"operating_systems/cmake.html#install-make","text":"","title":"Install Make"},{"location":"operating_systems/cmake.html#linux","text":"Install build essentials and Make first: sudo apt-get install make sudo apt-get update && sudo apt-get install build-essential","title":"Linux"},{"location":"operating_systems/cmake.html#install-cmake","text":"Download the latest version of CMake from the Cmake website .","title":"Install CMake"},{"location":"operating_systems/cmake.html#linux_1","text":"From the website, download the bash shell script. It's best to keep manually installed packages within the /opt directory. In your linux shell run: cd /opt chmod +x /home/[your_username]/Downloads/cmake-*-Linux-x86_64.sh sudo /home/[your_username]/Downloads/cmake-*-Linux-x86_64.sh Then add the following to your ~/.profile : export PATH=/opt/cmake-3.13.3-Linux-x86_64/bin:$PATH","title":"Linux"},{"location":"operating_systems/linux/index.html","text":"Ubuntu 18.04/20.04 \u00b6 Adding custom applications launch icon to favorites Google Remote Desktop Desktop launcher to connect remote server (e.g. Sharcnet)","title":"Overview"},{"location":"operating_systems/linux/index.html#ubuntu-18042004","text":"Adding custom applications launch icon to favorites Google Remote Desktop Desktop launcher to connect remote server (e.g. Sharcnet)","title":"Ubuntu 18.04/20.04"},{"location":"operating_systems/linux/app_icon.html","text":"Adding application launch icon to favorites \u00b6 Download your own icon image Find path to the executable of your application by running (replace brackets with name of applicaion): which [name_application] Copy the path from this output. Create\\edit the .desktop file for the application by running the command (remember to edit the application name): gedit Desktop/[name_application].desktop Add the following lines (replace the items in square brackets with your respect application) and save the file with the extension .desktop (e.g. [application name].desktop ): #!/usr/bin/env xdg-open [Desktop Entry] Type=Application Icon=[path_to_icon_file] Name=[Name your application] Comment=[Name your application] Exec=[path_to_executable file_from_step2] Categories=Development Right click on the file (should now be on your desktop), select properties, then permissions and select Allow executing file as program Finally, move this file to the desktop launcher path on your system: sudo mv /Desktop/*[name_of_file]* /usr/share/applications/","title":"Desktop App Launcher"},{"location":"operating_systems/linux/app_icon.html#adding-application-launch-icon-to-favorites","text":"Download your own icon image Find path to the executable of your application by running (replace brackets with name of applicaion): which [name_application] Copy the path from this output. Create\\edit the .desktop file for the application by running the command (remember to edit the application name): gedit Desktop/[name_application].desktop Add the following lines (replace the items in square brackets with your respect application) and save the file with the extension .desktop (e.g. [application name].desktop ): #!/usr/bin/env xdg-open [Desktop Entry] Type=Application Icon=[path_to_icon_file] Name=[Name your application] Comment=[Name your application] Exec=[path_to_executable file_from_step2] Categories=Development Right click on the file (should now be on your desktop), select properties, then permissions and select Allow executing file as program Finally, move this file to the desktop launcher path on your system: sudo mv /Desktop/*[name_of_file]* /usr/share/applications/","title":"Adding application launch icon to favorites"},{"location":"operating_systems/linux/remote_desktop.html","text":"Google Remote Desktop \u00b6 Install Remote Desktop Extension \u00b6 1. Navigate to Chrome Remote Desktop Web Store and install it by clicking Add to Chrome . 2. Click Launch App and the remote desktop app window should open. Install Chrome Remote Desktop Package \u00b6 1. You will now need to get the .deb for remote desktop with the following command in terminal: wget https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb 2. Then install it by running: sudo apt install ./chrome-remote-desktop_current_amd64.deb 3. If the initial installation attempt will fail, simply run sudo apt install -f to fix the missing dependencies and to complete the installation. sudo apt-get install -f 4. You will need to add yourself to the chrome-remote-desktop group then reboot for the changes to take effect. sudo usermod -a -G chrome-remote-desktop $USER sudo reboot Create Session File \u00b6 1. You will need to create a remote desktop session file in your home directory: gedit ~/.chrome-remote-desktop-session 2. Look in /usr/share/xsessions/ for the .desktop file for your linux environment. For example, ElementaryOS has a file named Pantheon with the following command: gnome-session --session=pantheon . 3. Within the chrome-remote-desktop-session file enter the following (make sure to use your respective distro .desktop file): exec /usr/sbin/lightdm-session \"gnome-session --session=pantheon\" 4. If running ElementayOS you will also need to add the following to the file: DESKTOP_SESSION=pantheon XDG_CURRENT_DESKTOP=Pantheon XDG_RUNTIME_DIR=/run/user/1000 5. Save the file and close. Post-Install Configuration (Setting up Displays) \u00b6 1. Stop Chrome Remote Desktop: /opt/google/chrome-remote-desktop/chrome-remote-desktop --stop 2. Backup the original configuration: sudo cp /opt/google/chrome-remote-desktop/chrome-remote-desktop /opt/google/chrome-remote-desktop/chrome-remote-desktop.orig 3. Edit the config ( chrome-remote-desktop ) file: gedit /opt/google/chrome-remote-desktop/chrome-remote-desktop 4. Find DEFAULT_SIZES and update the remote desktop resolution. For example: DEFAULT_SIZES = \"2560x1440\" 5. For multiple displays you will need to enter in the resolution for each one: DEFAULT_SIZES = \"2560x1440,2560x1440,2560x1440\" 6. Determine your main display number (obtain it with echo $DISPLAY from terminal). Find FIRST_X_DISPLAY_NUMBER and set the FIRST_X_DISPLAY_NUMBER to the display number (Ubuntu 17.10 and lower: usually 0, Ubuntu 18.04: usually 1) echo $DISPLAY FIRST_X_DISPLAY_NUMBER = 0 7. Around line 425, within the definition for get_unused_display_number() , comment out sections that look for additional displays by adding # infront: # while os.path.exists(X_LOCK_FILE_TEMPLATE % display): # display += 1 8. Lastly, find launch_session() and comment out launch_x_server() and launch_x_session() within launch_session() . You will then add display = self.get_unused_display_number() and self.child_env[\"DISPLAY\"] = \":%d\" % display to the definition. The function definition should look like the following: def launch_session(self, x_args): self._init_child_env() self._setup_pulseaudio() self._setup_gnubby() #self._launch_x_server(x_args) #self._launch_x_session() display = self.get_unused_display_number() self.child_env[\"DISPLAY\"] = \":%d\" % display 9. Save and exit the editor. Start Chrome Remote Desktop: /opt/google/chrome-remote-desktop/chrome-remote-desktop --start Launch Remote Desktop \u00b6 1. Finally, head to Chrome Remote Web and Click TURN ON to enable remote desktop access. Set the system name, set the remote desktop connection PIN and click START .","title":"Chrome Remote Desktop"},{"location":"operating_systems/linux/remote_desktop.html#google-remote-desktop","text":"","title":"Google Remote Desktop"},{"location":"operating_systems/linux/remote_desktop.html#install-remote-desktop-extension","text":"1. Navigate to Chrome Remote Desktop Web Store and install it by clicking Add to Chrome . 2. Click Launch App and the remote desktop app window should open.","title":"Install Remote Desktop Extension"},{"location":"operating_systems/linux/remote_desktop.html#install-chrome-remote-desktop-package","text":"1. You will now need to get the .deb for remote desktop with the following command in terminal: wget https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb 2. Then install it by running: sudo apt install ./chrome-remote-desktop_current_amd64.deb 3. If the initial installation attempt will fail, simply run sudo apt install -f to fix the missing dependencies and to complete the installation. sudo apt-get install -f 4. You will need to add yourself to the chrome-remote-desktop group then reboot for the changes to take effect. sudo usermod -a -G chrome-remote-desktop $USER sudo reboot","title":"Install Chrome Remote Desktop Package"},{"location":"operating_systems/linux/remote_desktop.html#create-session-file","text":"1. You will need to create a remote desktop session file in your home directory: gedit ~/.chrome-remote-desktop-session 2. Look in /usr/share/xsessions/ for the .desktop file for your linux environment. For example, ElementaryOS has a file named Pantheon with the following command: gnome-session --session=pantheon . 3. Within the chrome-remote-desktop-session file enter the following (make sure to use your respective distro .desktop file): exec /usr/sbin/lightdm-session \"gnome-session --session=pantheon\" 4. If running ElementayOS you will also need to add the following to the file: DESKTOP_SESSION=pantheon XDG_CURRENT_DESKTOP=Pantheon XDG_RUNTIME_DIR=/run/user/1000 5. Save the file and close.","title":"Create Session File"},{"location":"operating_systems/linux/remote_desktop.html#post-install-configuration-setting-up-displays","text":"1. Stop Chrome Remote Desktop: /opt/google/chrome-remote-desktop/chrome-remote-desktop --stop 2. Backup the original configuration: sudo cp /opt/google/chrome-remote-desktop/chrome-remote-desktop /opt/google/chrome-remote-desktop/chrome-remote-desktop.orig 3. Edit the config ( chrome-remote-desktop ) file: gedit /opt/google/chrome-remote-desktop/chrome-remote-desktop 4. Find DEFAULT_SIZES and update the remote desktop resolution. For example: DEFAULT_SIZES = \"2560x1440\" 5. For multiple displays you will need to enter in the resolution for each one: DEFAULT_SIZES = \"2560x1440,2560x1440,2560x1440\" 6. Determine your main display number (obtain it with echo $DISPLAY from terminal). Find FIRST_X_DISPLAY_NUMBER and set the FIRST_X_DISPLAY_NUMBER to the display number (Ubuntu 17.10 and lower: usually 0, Ubuntu 18.04: usually 1) echo $DISPLAY FIRST_X_DISPLAY_NUMBER = 0 7. Around line 425, within the definition for get_unused_display_number() , comment out sections that look for additional displays by adding # infront: # while os.path.exists(X_LOCK_FILE_TEMPLATE % display): # display += 1 8. Lastly, find launch_session() and comment out launch_x_server() and launch_x_session() within launch_session() . You will then add display = self.get_unused_display_number() and self.child_env[\"DISPLAY\"] = \":%d\" % display to the definition. The function definition should look like the following: def launch_session(self, x_args): self._init_child_env() self._setup_pulseaudio() self._setup_gnubby() #self._launch_x_server(x_args) #self._launch_x_session() display = self.get_unused_display_number() self.child_env[\"DISPLAY\"] = \":%d\" % display 9. Save and exit the editor. Start Chrome Remote Desktop: /opt/google/chrome-remote-desktop/chrome-remote-desktop --start","title":"Post-Install Configuration (Setting up Displays)"},{"location":"operating_systems/linux/remote_desktop.html#launch-remote-desktop","text":"1. Finally, head to Chrome Remote Web and Click TURN ON to enable remote desktop access. Set the system name, set the remote desktop connection PIN and click START .","title":"Launch Remote Desktop"},{"location":"operating_systems/linux/server_shortcut.html","text":"SSHFS Desktop Application \u00b6 Setup fuse \u00b6 Run the following in a terminal: modprobe fuse Create a FUSE usergroup and add yourself to the group sudo groupadd fuse sudo usermod -a -G fuse $USER Create a set of ssh-keys, press enter when asked to name the file (blank) and press enter when asked to enter a passphrase (blank): ssh-keygen -t rsa Transport the key to the remote server: ssh-copy-id -i .ssh/id_rsa.pub user@example.com Now when you run sshfs you will not need to enter your password. Create Shell Script \u00b6 Run the following command to create an empty shell script: touch +x ~/Documents/sshfs_mount.sh chmod +x ~/Documents/sshfs_mount.sh gedit ~/Documents/sshfs_mount.sh Enter the command you normally run to connect to the remote server, change mount_dir to match your local mount location: #!/bin/bash mount_dir=\"/path/to/mount/directory\" if (! mountpoint -q $mount_dir); then sshfs user@example.com:/home/[user]/ $mount_dir -o ServerAliveInterval=15,ServerAliveCountMax=3,Compression=no,follow_symlinks else umount $mount_dir fi In the script, the filesystem will be mounted/unmounted depending on the status. Save and close the file. Create Desktop Entry File \u00b6 Run the following command to create an empty shell script: touch ~/Documents/sshfs_mount.desktop chmod +x ~/Documents/sshfs_mount.desktop gedit ~/Documents/sshfs_mount.desktop Paste the following into the document, ensure you update the brackets: #!/usr/bin/env xdg-open [Desktop Entry] Version=1.0 Type=Application Terminal=false Icon=[path/to/icon] Name=[Name the application] Exec=[path/to/sshfs_mount.sh] Save and close. Move the desktop entry file into the applications directory: sudo mv ~/Documents/sshfs_mount.desktop /usr/share/applications/ Search in applications for the desktop entry file, right-click and add to favorites.","title":"Remote Server Desktop App"},{"location":"operating_systems/linux/server_shortcut.html#sshfs-desktop-application","text":"","title":"SSHFS Desktop Application"},{"location":"operating_systems/linux/server_shortcut.html#setup-fuse","text":"Run the following in a terminal: modprobe fuse Create a FUSE usergroup and add yourself to the group sudo groupadd fuse sudo usermod -a -G fuse $USER Create a set of ssh-keys, press enter when asked to name the file (blank) and press enter when asked to enter a passphrase (blank): ssh-keygen -t rsa Transport the key to the remote server: ssh-copy-id -i .ssh/id_rsa.pub user@example.com Now when you run sshfs you will not need to enter your password.","title":"Setup fuse"},{"location":"operating_systems/linux/server_shortcut.html#create-shell-script","text":"Run the following command to create an empty shell script: touch +x ~/Documents/sshfs_mount.sh chmod +x ~/Documents/sshfs_mount.sh gedit ~/Documents/sshfs_mount.sh Enter the command you normally run to connect to the remote server, change mount_dir to match your local mount location: #!/bin/bash mount_dir=\"/path/to/mount/directory\" if (! mountpoint -q $mount_dir); then sshfs user@example.com:/home/[user]/ $mount_dir -o ServerAliveInterval=15,ServerAliveCountMax=3,Compression=no,follow_symlinks else umount $mount_dir fi In the script, the filesystem will be mounted/unmounted depending on the status. Save and close the file.","title":"Create Shell Script"},{"location":"operating_systems/linux/server_shortcut.html#create-desktop-entry-file","text":"Run the following command to create an empty shell script: touch ~/Documents/sshfs_mount.desktop chmod +x ~/Documents/sshfs_mount.desktop gedit ~/Documents/sshfs_mount.desktop Paste the following into the document, ensure you update the brackets: #!/usr/bin/env xdg-open [Desktop Entry] Version=1.0 Type=Application Terminal=false Icon=[path/to/icon] Name=[Name the application] Exec=[path/to/sshfs_mount.sh] Save and close. Move the desktop entry file into the applications directory: sudo mv ~/Documents/sshfs_mount.desktop /usr/share/applications/ Search in applications for the desktop entry file, right-click and add to favorites.","title":"Create Desktop Entry File"},{"location":"operating_systems/windows/index.html","text":"Windows 10 \u00b6 SSHFS mount remote drive Obtain Windows Product Key","title":"Overview"},{"location":"operating_systems/windows/index.html#windows-10","text":"SSHFS mount remote drive Obtain Windows Product Key","title":"Windows 10"},{"location":"operating_systems/windows/product_key.html","text":"Obtain Windows Product Key \u00b6 Open Powershell and run the following code (Get-WmiObject -query 'select * from SoftwareLicensingService') .OA3xOriginalProductKey","title":"Obtain Product Key"},{"location":"operating_systems/windows/product_key.html#obtain-windows-product-key","text":"Open Powershell and run the following code (Get-WmiObject -query 'select * from SoftwareLicensingService') .OA3xOriginalProductKey","title":"Obtain Windows Product Key"},{"location":"operating_systems/windows/sshfs.html","text":"Mount Remote Drive with SSHFS \u00b6 Install the latest stable installer of WinFSP Install the latest stable installer of SSHFS-Win Open File Explorer , right-click on This PC and choose Map network drive . Choose a drive to mount at and enter the following in the folder field (replace the options in ALL CAPS with the desired settings): \\\\sshfs\\REMUSER@HOST[\\PATH] REMUSER is the remote user (i.e. the user on the SSHFS host whose credentials are being used for access; gilmoreg ). HOST is the SSHFS host (i.e. graham.computecanada.ca ). PATH is the full remote path to the directory you want access to (i.e. \\projects\\ctb-akhanf\\cfmm-bids\\Khan) so the full command should look something like: \\\\sshfs\\gilmoreg@graham.computecanada.ca\\projects\\ctb-akhanf\\cfmm-bids\\Khan Ensure you check the box Connect using different credentials if your computer login password is different from the remote host. You may be asked to enter your password in a few times, ensure you select remember my credentials each time if you want to save your login. You should then see the network drive in your file explorer:","title":"Mount Remote Drive"},{"location":"operating_systems/windows/sshfs.html#mount-remote-drive-with-sshfs","text":"Install the latest stable installer of WinFSP Install the latest stable installer of SSHFS-Win Open File Explorer , right-click on This PC and choose Map network drive . Choose a drive to mount at and enter the following in the folder field (replace the options in ALL CAPS with the desired settings): \\\\sshfs\\REMUSER@HOST[\\PATH] REMUSER is the remote user (i.e. the user on the SSHFS host whose credentials are being used for access; gilmoreg ). HOST is the SSHFS host (i.e. graham.computecanada.ca ). PATH is the full remote path to the directory you want access to (i.e. \\projects\\ctb-akhanf\\cfmm-bids\\Khan) so the full command should look something like: \\\\sshfs\\gilmoreg@graham.computecanada.ca\\projects\\ctb-akhanf\\cfmm-bids\\Khan Ensure you check the box Connect using different credentials if your computer login password is different from the remote host. You may be asked to enter your password in a few times, ensure you select remember my credentials each time if you want to save your login. You should then see the network drive in your file explorer:","title":"Mount Remote Drive with SSHFS"},{"location":"operating_systems/wsl/index.html","text":"Subsystem for Linux (WSL) \u00b6 Advanced Normalization Tools (ANTs) Automatic Registration Toolbox (ART) Cmake/Make dcm2niix Freesurfer FMRIB Software Library (FSL) NiftyReg Terminator linux emulator Windows Subsystem for Linux activation Newest/greatest: WSL 2 WSL 1","title":"Overview"},{"location":"operating_systems/wsl/index.html#subsystem-for-linux-wsl","text":"Advanced Normalization Tools (ANTs) Automatic Registration Toolbox (ART) Cmake/Make dcm2niix Freesurfer FMRIB Software Library (FSL) NiftyReg Terminator linux emulator Windows Subsystem for Linux activation Newest/greatest: WSL 2 WSL 1","title":"Subsystem for Linux (WSL)"},{"location":"operating_systems/wsl/terminator.html","text":"Installing an X Server \u00b6 To run an X Window application, you will need to have an X Server installed and running on your Windows 10 machine. The most popular application is: VcXsrv After installing, VcXsrv creates a desktop shortcut. To start the server in multi-window mode run the following command in a command prompt (not in the Bash terminal): \"C:\\Program Files\\VcXsrv\\vcxsrv.exe\" :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl -dpi auto The first time you run the above command you will have to Allow Access when the Windows defender notice appears. Configuring Terminator \u00b6 Once VcXsrv is installed, the next step is to install Terminator on WSL Bash. First, make sure you have updated packages: sudo apt update && sudo apt upgrade Then install: sudo apt-get install terminator Terminator will not initalize a config file so you will need to do this manually (you will get an error at the next step if you do not have a config file set): mkdir -p ~/.config/terminator touch ~/.config/terminator/config Try launching Terminator by specifying the X Display to connect to (:0) in the linux shell: DISPLAY=$(awk '/nameserver/ {print $2}' /etc/resolv.conf):0 terminator & If you receive an error about D-Bus ( No D-BUS daemon running ) then press CTRL+C to abort the previous command and run the following: sudo apt-get install dbus-x11 sudo service dbus start Once you have completed the above run the previous command again: DISPLAY=$(awk '/nameserver/ {print $2}' /etc/resolv.conf):0 terminator & A nice Terminator window should pop up. Installing Zsh \u00b6 The next step is to install Zsh with oh-my-zsh. Installation is straightfoward (perform in the original linux terminal, not in terminator): sudo apt-get install curl wget git zsh curl -L https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | bash You may receive a message Password: chsh: PAM: Authentication failure you can ignore this. Set the theme to \"ys\" at line 11 by replacing robbyrussell in .zshrc : vi ~/.zshrc ZSH_THEME=\"ys\" If you have never used vi editor before, you will need to press the i key to enter inout mode to make changes. Once you have made the change you will need to exit input mode by pressing esc . In order to exit the editor and save you need to press : followed by wq to exit the editor with save. The only problem with Bash in WSL is it will always run Bash instead of Zsh. To get around that, add this to the end of your ~/.bashrc which will launch zsh instead when it starts up: vi ~/.bashrc if [ -t 1 ]; then exec zsh fi Terminator Colorscheme \u00b6 The next thing is to change the default Terminator colorscheme to Solarized Dark. The easiest way to do this, is to use the awesome node package base16-builder . You need to first install Node.js: curl -sL https://deb.nodesource.com/setup_10.x | sudo bash - sudo apt install nodejs Once you have installed Node.js you can then run the base-16builder install: sudo npm install --global base16-builder You need to change directory access to the configstore directory just created: sudo chown -R [your_username] /home/[your_username]/.config/configstore Now you need to apply the scheme to the terminator config file: mkdir -p .config/terminator base16-builder -s solarized -t terminator -b dark > .config/terminator/config Dircolors \u00b6 To change the dircolors you can use Solarized dircolors on Github and downloaded them to .dir_colors : wget https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.256dark mv dircolors.256dark .dir_colors Finally, added this to your .zshrc to eval the Solarized dircolors on startup: vi ~/.zshrc if [ -f ~/.dir_colors ]; then eval `dircolors ~/.dir_colors` fi Launching Terminator Directly \u00b6 To launch a hidden command window using the WShell Object in VBS you need to type the folowing script into a text document. Right click on your desktop and create a new text doc. Then copy the following and save the file with the .vbs extension (e.g. startTerminator.vbs): args = \"-ac\" & \" -l \" & \"\"\"DISPLAY=$(awk '/nameserver/ {print $2}' /etc/resolv.conf):0 terminator\"\"\" WScript.CreateObject(\"Shell.Application\").ShellExecute \"bash\", args, \"\", \"open\", 0 Move this .vbs file into a safe place such as \"C:\\Users[your_username]\\Documents\\scripts\". Right click on the file and 'Send to' the desktop as a shortcut. Right click on the new shortcut and select properties. In the 'Target' field type (you will just need to add C:\\Windows\\System32\\wscript.exe to the beginning): C:\\Windows\\System32\\wscript.exe C:\\Users\\[your_username]\\Documents\\scripts\\startTerminator.vbs Click 'Apply'. You can then set the icon of the shortcut by saving this icon file to the same place you saved the startTerminator.vbs file. Right click on the shortcut again, properties and at the bottom select 'Change Icon...'. From here you can select the icon file you just downloaded. In the 'Start in' field type: %USERPROFILE% It's impossible to have Termiator start in your Linux home directory through this method since that path is not \"known\" to Windows. To get around it, add this to your .zshrc so it CD's to your home directory on startup: vi ~/.zshrc if [ -t 1 ]; then cd ~ fi If you get an error about EPOCHREALTIME and/or EPOCHSECONDS , add the following to .zshrc on the line right before the command source $ZSH/oh-my-zsh.sh (around line 73): unset EPOCHREALTIME EPOCHSECONDS Other customizations \u00b6 If you want to further modify your terminator theme you can add lines to the file ~/.config/terminator/config . To change the opening size of the terminal window add the variable size under layouts: vi ~/.config/terminator/config [layouts] [[default]] [[[child1]]] parent = window0 profile = Base16 Solarized Dark type = Terminal [[[window0]]] parent = \"\" size = 1594, 465 type = Window Close terminator and re-open.","title":"Terminator"},{"location":"operating_systems/wsl/terminator.html#installing-an-x-server","text":"To run an X Window application, you will need to have an X Server installed and running on your Windows 10 machine. The most popular application is: VcXsrv After installing, VcXsrv creates a desktop shortcut. To start the server in multi-window mode run the following command in a command prompt (not in the Bash terminal): \"C:\\Program Files\\VcXsrv\\vcxsrv.exe\" :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl -dpi auto The first time you run the above command you will have to Allow Access when the Windows defender notice appears.","title":"Installing an X Server"},{"location":"operating_systems/wsl/terminator.html#configuring-terminator","text":"Once VcXsrv is installed, the next step is to install Terminator on WSL Bash. First, make sure you have updated packages: sudo apt update && sudo apt upgrade Then install: sudo apt-get install terminator Terminator will not initalize a config file so you will need to do this manually (you will get an error at the next step if you do not have a config file set): mkdir -p ~/.config/terminator touch ~/.config/terminator/config Try launching Terminator by specifying the X Display to connect to (:0) in the linux shell: DISPLAY=$(awk '/nameserver/ {print $2}' /etc/resolv.conf):0 terminator & If you receive an error about D-Bus ( No D-BUS daemon running ) then press CTRL+C to abort the previous command and run the following: sudo apt-get install dbus-x11 sudo service dbus start Once you have completed the above run the previous command again: DISPLAY=$(awk '/nameserver/ {print $2}' /etc/resolv.conf):0 terminator & A nice Terminator window should pop up.","title":"Configuring Terminator"},{"location":"operating_systems/wsl/terminator.html#installing-zsh","text":"The next step is to install Zsh with oh-my-zsh. Installation is straightfoward (perform in the original linux terminal, not in terminator): sudo apt-get install curl wget git zsh curl -L https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | bash You may receive a message Password: chsh: PAM: Authentication failure you can ignore this. Set the theme to \"ys\" at line 11 by replacing robbyrussell in .zshrc : vi ~/.zshrc ZSH_THEME=\"ys\" If you have never used vi editor before, you will need to press the i key to enter inout mode to make changes. Once you have made the change you will need to exit input mode by pressing esc . In order to exit the editor and save you need to press : followed by wq to exit the editor with save. The only problem with Bash in WSL is it will always run Bash instead of Zsh. To get around that, add this to the end of your ~/.bashrc which will launch zsh instead when it starts up: vi ~/.bashrc if [ -t 1 ]; then exec zsh fi","title":"Installing Zsh"},{"location":"operating_systems/wsl/terminator.html#terminator-colorscheme","text":"The next thing is to change the default Terminator colorscheme to Solarized Dark. The easiest way to do this, is to use the awesome node package base16-builder . You need to first install Node.js: curl -sL https://deb.nodesource.com/setup_10.x | sudo bash - sudo apt install nodejs Once you have installed Node.js you can then run the base-16builder install: sudo npm install --global base16-builder You need to change directory access to the configstore directory just created: sudo chown -R [your_username] /home/[your_username]/.config/configstore Now you need to apply the scheme to the terminator config file: mkdir -p .config/terminator base16-builder -s solarized -t terminator -b dark > .config/terminator/config","title":"Terminator Colorscheme"},{"location":"operating_systems/wsl/terminator.html#dircolors","text":"To change the dircolors you can use Solarized dircolors on Github and downloaded them to .dir_colors : wget https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.256dark mv dircolors.256dark .dir_colors Finally, added this to your .zshrc to eval the Solarized dircolors on startup: vi ~/.zshrc if [ -f ~/.dir_colors ]; then eval `dircolors ~/.dir_colors` fi","title":"Dircolors"},{"location":"operating_systems/wsl/terminator.html#launching-terminator-directly","text":"To launch a hidden command window using the WShell Object in VBS you need to type the folowing script into a text document. Right click on your desktop and create a new text doc. Then copy the following and save the file with the .vbs extension (e.g. startTerminator.vbs): args = \"-ac\" & \" -l \" & \"\"\"DISPLAY=$(awk '/nameserver/ {print $2}' /etc/resolv.conf):0 terminator\"\"\" WScript.CreateObject(\"Shell.Application\").ShellExecute \"bash\", args, \"\", \"open\", 0 Move this .vbs file into a safe place such as \"C:\\Users[your_username]\\Documents\\scripts\". Right click on the file and 'Send to' the desktop as a shortcut. Right click on the new shortcut and select properties. In the 'Target' field type (you will just need to add C:\\Windows\\System32\\wscript.exe to the beginning): C:\\Windows\\System32\\wscript.exe C:\\Users\\[your_username]\\Documents\\scripts\\startTerminator.vbs Click 'Apply'. You can then set the icon of the shortcut by saving this icon file to the same place you saved the startTerminator.vbs file. Right click on the shortcut again, properties and at the bottom select 'Change Icon...'. From here you can select the icon file you just downloaded. In the 'Start in' field type: %USERPROFILE% It's impossible to have Termiator start in your Linux home directory through this method since that path is not \"known\" to Windows. To get around it, add this to your .zshrc so it CD's to your home directory on startup: vi ~/.zshrc if [ -t 1 ]; then cd ~ fi If you get an error about EPOCHREALTIME and/or EPOCHSECONDS , add the following to .zshrc on the line right before the command source $ZSH/oh-my-zsh.sh (around line 73): unset EPOCHREALTIME EPOCHSECONDS","title":"Launching Terminator Directly"},{"location":"operating_systems/wsl/terminator.html#other-customizations","text":"If you want to further modify your terminator theme you can add lines to the file ~/.config/terminator/config . To change the opening size of the terminal window add the variable size under layouts: vi ~/.config/terminator/config [layouts] [[default]] [[[child1]]] parent = window0 profile = Base16 Solarized Dark type = Terminal [[[window0]]] parent = \"\" size = 1594, 465 type = Window Close terminator and re-open.","title":"Other customizations"},{"location":"operating_systems/wsl/wsl.html","text":"Turn on linux subsystem feature \u00b6 Open Windows PowerShell as administrator and run the command: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Restart your computer when prompted. Download the linux distro \u00b6 Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select \"Get\". To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro. The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete. Once installation is complete, you will be prompted to create a new user account (and its password). Most distros ship with an empty/minimal package catalog. I strongly recommend regularly updating your package catalog, and upgrading your installed packages using your distro's preferred package manager. sudo apt update && sudo apt upgrade Add link to the linux subsystem in Windows Quick Access \u00b6 Depending on the version of linux you installed, the absolute path will be found either: C:\\Users\\*[your_username]*\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_*[unique_code]*\\LocalState\\rootfs C:\\Users\\*[your_username]*\\AppData\\Local\\lxss When you find the correct location, right click on the parent folder and select 'Pin to Quick Access'","title":"WSL"},{"location":"operating_systems/wsl/wsl.html#turn-on-linux-subsystem-feature","text":"Open Windows PowerShell as administrator and run the command: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Restart your computer when prompted.","title":"Turn on linux subsystem feature"},{"location":"operating_systems/wsl/wsl.html#download-the-linux-distro","text":"Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select \"Get\". To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro. The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete. Once installation is complete, you will be prompted to create a new user account (and its password). Most distros ship with an empty/minimal package catalog. I strongly recommend regularly updating your package catalog, and upgrading your installed packages using your distro's preferred package manager. sudo apt update && sudo apt upgrade","title":"Download the linux distro"},{"location":"operating_systems/wsl/wsl.html#add-link-to-the-linux-subsystem-in-windows-quick-access","text":"Depending on the version of linux you installed, the absolute path will be found either: C:\\Users\\*[your_username]*\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_*[unique_code]*\\LocalState\\rootfs C:\\Users\\*[your_username]*\\AppData\\Local\\lxss When you find the correct location, right click on the parent folder and select 'Pin to Quick Access'","title":"Add link to the linux subsystem in Windows Quick Access"},{"location":"operating_systems/wsl/wsl2.html","text":"The Windows 10 May 2020 update makes installing WSL2 much easier. Turn on WSL feature and virtual machine platform \u00b6 Open Windows PowerShell as administrator and run the commands: dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart You will need to restart your computer. Download the WSL2 update \u00b6 Prior to running WSL2 you will need to download and install the WSL2 kernel update . Download a linux distro \u00b6 Open the Microsoft Store and choose your favorite linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select Get Once done installing, open up Powershell as administrator and run (replace distro with the name of the distro you installed): wsl --set-default-version 2 wsl --set-version [Distro] 2 Finalizing \u00b6 To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete Once installation is complete, you will be prompted to create a new user account (and its password) Most distros ship with an empty/minimal package catalog. You should regularly be updating your package catalog, and upgrading your installed packages using your distro's preferred package manager sudo apt-get update && sudo apt-get upgrade","title":"WSL2"},{"location":"operating_systems/wsl/wsl2.html#turn-on-wsl-feature-and-virtual-machine-platform","text":"Open Windows PowerShell as administrator and run the commands: dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart You will need to restart your computer.","title":"Turn on WSL feature and virtual machine platform"},{"location":"operating_systems/wsl/wsl2.html#download-the-wsl2-update","text":"Prior to running WSL2 you will need to download and install the WSL2 kernel update .","title":"Download the WSL2 update"},{"location":"operating_systems/wsl/wsl2.html#download-a-linux-distro","text":"Open the Microsoft Store and choose your favorite linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select Get Once done installing, open up Powershell as administrator and run (replace distro with the name of the distro you installed): wsl --set-default-version 2 wsl --set-version [Distro] 2","title":"Download a linux distro"},{"location":"operating_systems/wsl/wsl2.html#finalizing","text":"To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete Once installation is complete, you will be prompted to create a new user account (and its password) Most distros ship with an empty/minimal package catalog. You should regularly be updating your package catalog, and upgrading your installed packages using your distro's preferred package manager sudo apt-get update && sudo apt-get upgrade","title":"Finalizing"},{"location":"operating_systems/wsl/wsl2_old.html","text":"Sign up for Windows Insider program \u00b6 Go to Register for Windows Insider Sign up for Windows Insider program Activate Windows Insider Builds \u00b6 Enable Full Diagnostic Data go to Settings \u2192 Privacy \u2192 Diagnostics & feedback \u2192 Diagnostic data Choose Full as the option Enable Telemetry Data via Registry Open Registry Editor Press Windows Key + R then type regedit to open registry editor Navigate to: HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DataCollection Right-click DataCollection , click New and then click DWORD (32-bit) Value Name it as AllowTelemetry , and then press ENTER Double-click AllowTelemetry , set the value as 3, and then click OK . Repeat the above steps for: HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\DataCollection Restart your computer Group Policy to enable Telemetry Press Windows key + r and type gpedit.msc in the Run prompt, hit ENTER to launch group policy editor Go to Computer Configuration \u2192 Administrative Templates \u2192 Windows Components \u2192 Data Collection and Preview Builds Double-click Allow Telemetry In the Options box, configure the level as 3, and then click OK Activate Insider Build \u00b6 Search for Check for Updates in the Windows search menu In the new window select Windows Insider Program at the bottom of the menu Select Get Started and follow the instructions, making sure you select Fast when asked Once you have completed the registration you will need to check for updates and let Windows install the new insider build. Once done you should restart your computer Turn on linux subsystem feature \u00b6 Open Windows PowerShell as administrator and run the commands: Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux You will need to restart your computer again Download the linux distro \u00b6 Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select Get Once done installing, open up Powershell as administrator and run (replace distro with the name of the distro you installed): wsl --set-version [Distro] 2 wsl --set-default-version 2 Finalizing \u00b6 To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete Once installation is complete, you will be prompted to create a new user account (and its password) Most distros ship with an empty/minimal package catalog. You should regularly be updating your package catalog, and upgrading your installed packages using your distro's preferred package manager sudo apt-get update && sudo apt-get upgrade","title":"WSL 2"},{"location":"operating_systems/wsl/wsl2_old.html#sign-up-for-windows-insider-program","text":"Go to Register for Windows Insider Sign up for Windows Insider program","title":"Sign up for Windows Insider program"},{"location":"operating_systems/wsl/wsl2_old.html#activate-windows-insider-builds","text":"Enable Full Diagnostic Data go to Settings \u2192 Privacy \u2192 Diagnostics & feedback \u2192 Diagnostic data Choose Full as the option Enable Telemetry Data via Registry Open Registry Editor Press Windows Key + R then type regedit to open registry editor Navigate to: HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DataCollection Right-click DataCollection , click New and then click DWORD (32-bit) Value Name it as AllowTelemetry , and then press ENTER Double-click AllowTelemetry , set the value as 3, and then click OK . Repeat the above steps for: HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\DataCollection Restart your computer Group Policy to enable Telemetry Press Windows key + r and type gpedit.msc in the Run prompt, hit ENTER to launch group policy editor Go to Computer Configuration \u2192 Administrative Templates \u2192 Windows Components \u2192 Data Collection and Preview Builds Double-click Allow Telemetry In the Options box, configure the level as 3, and then click OK","title":"Activate Windows Insider Builds"},{"location":"operating_systems/wsl/wsl2_old.html#activate-insider-build","text":"Search for Check for Updates in the Windows search menu In the new window select Windows Insider Program at the bottom of the menu Select Get Started and follow the instructions, making sure you select Fast when asked Once you have completed the registration you will need to check for updates and let Windows install the new insider build. Once done you should restart your computer","title":"Activate Insider Build"},{"location":"operating_systems/wsl/wsl2_old.html#turn-on-linux-subsystem-feature","text":"Open Windows PowerShell as administrator and run the commands: Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux You will need to restart your computer again","title":"Turn on linux subsystem feature"},{"location":"operating_systems/wsl/wsl2_old.html#download-the-linux-distro","text":"Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu): Ubuntu Debian From the distro's page, select Get Once done installing, open up Powershell as administrator and run (replace distro with the name of the distro you installed): wsl --set-version [Distro] 2 wsl --set-default-version 2","title":"Download the linux distro"},{"location":"operating_systems/wsl/wsl2_old.html#finalizing","text":"To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro The first time a newly installed distro runs, a Console window will open, and you'll be asked to wait for a minute or two for the installation to complete Once installation is complete, you will be prompted to create a new user account (and its password) Most distros ship with an empty/minimal package catalog. You should regularly be updating your package catalog, and upgrading your installed packages using your distro's preferred package manager sudo apt-get update && sudo apt-get upgrade","title":"Finalizing"},{"location":"phd_related/index.html","text":"Blog \u00b6 The blog posts here are related to life as a graduate student. Posts range from things I have learned to rants. Enjoy! Mendeley database decrypting Tips on reading academic papers GitHub Desktop install Making manuscript PDFs searchable","title":"Overview"},{"location":"phd_related/index.html#blog","text":"The blog posts here are related to life as a graduate student. Posts range from things I have learned to rants. Enjoy! Mendeley database decrypting Tips on reading academic papers GitHub Desktop install Making manuscript PDFs searchable","title":"Blog"},{"location":"phd_related/mendeley_decrypt.html","text":"Note The following article was originally written by Tony Garnock-Jones , which provides steps for .deb versions of Mendeley. I have altered the steps to include Flatpak versions of Mendeley. The original article can be found here . In an effort to stop users from porting their databases to other software like Zotero, Mendeley has begun encrypting the user database. Mendeley is using the SQLite Encryption Extension (\u201cSEE\u201d) with a hidden key. The SEE library is closed-source and very proprietary. Its API is documented, but its on-disk structures are not (publicly) documented, and the source code is not publicly available. Applications using SEE are required to make it impossible to access SEE functionality from outside the application. Prep \u00b6 This method is working on Linux (Ubuntu 20.04 and Pop!_OS 20.04). You will need to install: gdm: sudo apt-get install -y gdm Mendeley should be installed in either two ways: Flatpak app from a .deb file Extract your data \u00b6 Make sure you quit Mendeley before proceeding. Locate your Mendeley database, the database is usually found in either: ~/.local/share/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ ~/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ You will find several sqlite databases: @ www.mendeley.com.sqlite \u2190this is the one we want @ www.mendeley.com.sqlite-wal @ www.mendeley.com.sqlite-shm -monitor.sqlite -monitor.sqlite-wal -monitor.sqlite-shm Make a backup copy of the encrypted database. In my case, I installed Mendeley as a Flatpak app so I ran the following to make a backup copy: cd ~/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite ~/backup-encrypted.sqlite You will now run Mendeley in debug mode, depending on how you installed it: a. if you installed with a .deb package, debug using gdb directly: mendeleydesktop --debug b. if you installed with Flatpak, you need to run with Flatpak first then gdb : # Run with Flatpak $ flatpak run --devel --command = sh com.elsevier.MendeleyDesktop # Run gdb within the Flatpak sandbox [\ud83d\udce6 com.elsevier.MendeleyDesktop ~]$ QT_QPA_PLATFORM_PLUGIN_PATH = /app/extra/plugins/qt/plugins/platforms/ gdb --args /app/extra/bin/mendeleydesktop Add a breakpoint that captures the moment a SQLite database is opened: (gdb) b sqlite3_open_v2 Start the program now: (gdb) run The program will stop at the breakpoint several times. Keep continuing the program until the string pointed to by $rdi names the file you backed up in the step above (press c to continue and enter x/s $rdi to check the filename): # Run x/s $rdi and look at the filename Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x1dca928: \"~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/Settings.sqlite\" # Enter c to continue (gdb) c Continuing. Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x1dcb318: \"~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/Settings.sqlite\" (gdb) c # Keep repeating the above until you find the .sqlite file that you backed up earlier Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x25f1818: \"~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite\" You will need to continue ( c ) until you see the same database filename appear again ( x/s $rdi ), usually happens immediately after the first appearance. Now, set a breakpoint for the moment the key is supplied to SQLite Encryption Extension by using b sqlite3_key : # Set a new breakpoint (gdb) b sqlite3_key Breakpoint 2 at 0x101b2c0 # Press c to continue (gdb) c Continuing. When the subsequent breakpoint is hit, enter info registers to determine the value of rdi : # When the breakpoint is hit, run ` info registers ` Thread 1 \"mendeleydesktop\" hit Breakpoint 2, 0x000000000101b2c0 in sqlite3_key () (gdb) info registers rax 0x7fffffffc6b0 140737488340656 rbx 0x25f0590 39781776 rcx 0x7fffea9a0c40 140737129352256 rdx 0x20 32 rsi 0x260fd68 39910760 rdi 0x25ef4e8 39777512 rbp 0x7fffffffc730 0x7fffffffc730 rsp 0x7fffffffc688 0x7fffffffc688 r8 0xc1 193 r9 0x7fffea9a0cc0 140737129352384 r10 0x0 0 r11 0x1 1 r12 0x7fffffffc6b0 140737488340656 r13 0x7fffffffc6a0 140737488340640 r14 0x7fffffffc790 140737488340880 r15 0x7fffffffc790 140737488340880 rip 0x101b2c0 0x101b2c0 <sqlite3_key> eflags 0x202 [ IF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 Copy down the value of rdi from the second column of the info registers output. It is the pointer to the open SQLite database handle. Then, finish execution of sqlite3_key by running fin . (gdb) fin Run till exit from #0 0x000000000101b2c0 in sqlite3_key () 0x0000000000f94e54 in SqliteDatabase::openInternal(QString const&, SqlDatabaseKey*) () Use gdb\u2019s ability to call C functions to rekey the database to the null key, thereby decrypting it in-place and allowing export of the SQL data: (gdb) p (int) sqlite3_rekey_v2(0x25ef4e8, 0, 0, 0) $ 1 = 0 If you see $1 = 0 from the rekey command then you are ready to export the SQL data (step 14), if you see $1 = 8 then you need to follow the below steps. Mendeley will sometimes re-open the database a few times during startup sp this may have caused the error To work around the random opening of the database, check if the program opens the main database a second time Run step 7-8 again up to the p sqlite3_rekey_v2(...) step, but do not run sqlite3_rekey_v2 Instead, just type c to continue, returning to the step where you inspect each call to sqlite3_open_v2 , waiting for one with $rdi pointing to a string with the right database filename. When you see it come round again, then try the sqlite3_rekey_v2 step If you see $1 = 0 this time, you\u2019re all set, and can proceed as described above for a successful call to sqlite3_rekey_v2 Once the database is decrypted it is a good idea to save a copy of the database to a new location: cd ~/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite ~/backup-decrypted.sqlite Now you can quit gbd : (gdb) quit A debugging session is active. Inferior 1 [process 32750] will be killed. Quit anyway? (y or n) y [322:322:0100/000000.491674:ERROR:broker_posix.cc(43)] Invalid node channel message if also running Flatpak : [\ud83d\udce6 com.elsevier.MendeleyDesktop ~]$ exit Lastly, restore your backup copy of the encrypted database, so that Mendeley will continue to run OK: cd ~/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp ~/backup-encrypted.sqlite 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite You can now use software like SQLite Browser to open and view the database ( ~/backup-decrypted.sqlite )","title":"Decrypt Mendeley"},{"location":"phd_related/mendeley_decrypt.html#prep","text":"This method is working on Linux (Ubuntu 20.04 and Pop!_OS 20.04). You will need to install: gdm: sudo apt-get install -y gdm Mendeley should be installed in either two ways: Flatpak app from a .deb file","title":"Prep"},{"location":"phd_related/mendeley_decrypt.html#extract-your-data","text":"Make sure you quit Mendeley before proceeding. Locate your Mendeley database, the database is usually found in either: ~/.local/share/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ ~/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ You will find several sqlite databases: @ www.mendeley.com.sqlite \u2190this is the one we want @ www.mendeley.com.sqlite-wal @ www.mendeley.com.sqlite-shm -monitor.sqlite -monitor.sqlite-wal -monitor.sqlite-shm Make a backup copy of the encrypted database. In my case, I installed Mendeley as a Flatpak app so I ran the following to make a backup copy: cd ~/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite ~/backup-encrypted.sqlite You will now run Mendeley in debug mode, depending on how you installed it: a. if you installed with a .deb package, debug using gdb directly: mendeleydesktop --debug b. if you installed with Flatpak, you need to run with Flatpak first then gdb : # Run with Flatpak $ flatpak run --devel --command = sh com.elsevier.MendeleyDesktop # Run gdb within the Flatpak sandbox [\ud83d\udce6 com.elsevier.MendeleyDesktop ~]$ QT_QPA_PLATFORM_PLUGIN_PATH = /app/extra/plugins/qt/plugins/platforms/ gdb --args /app/extra/bin/mendeleydesktop Add a breakpoint that captures the moment a SQLite database is opened: (gdb) b sqlite3_open_v2 Start the program now: (gdb) run The program will stop at the breakpoint several times. Keep continuing the program until the string pointed to by $rdi names the file you backed up in the step above (press c to continue and enter x/s $rdi to check the filename): # Run x/s $rdi and look at the filename Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x1dca928: \"~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/Settings.sqlite\" # Enter c to continue (gdb) c Continuing. Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x1dcb318: \"~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/Settings.sqlite\" (gdb) c # Keep repeating the above until you find the .sqlite file that you backed up earlier Thread 1 \"mendeleydesktop\" hit Breakpoint 1, 0x000000000101b1b0 in sqlite3_open_v2 () (gdb) x/s $rdi 0x25f1818: \"~/.var/app/com.elsevier.MendeleyDesktop/share/data/data/Mendeley Ltd./Mendeley Desktop/579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite\" You will need to continue ( c ) until you see the same database filename appear again ( x/s $rdi ), usually happens immediately after the first appearance. Now, set a breakpoint for the moment the key is supplied to SQLite Encryption Extension by using b sqlite3_key : # Set a new breakpoint (gdb) b sqlite3_key Breakpoint 2 at 0x101b2c0 # Press c to continue (gdb) c Continuing. When the subsequent breakpoint is hit, enter info registers to determine the value of rdi : # When the breakpoint is hit, run ` info registers ` Thread 1 \"mendeleydesktop\" hit Breakpoint 2, 0x000000000101b2c0 in sqlite3_key () (gdb) info registers rax 0x7fffffffc6b0 140737488340656 rbx 0x25f0590 39781776 rcx 0x7fffea9a0c40 140737129352256 rdx 0x20 32 rsi 0x260fd68 39910760 rdi 0x25ef4e8 39777512 rbp 0x7fffffffc730 0x7fffffffc730 rsp 0x7fffffffc688 0x7fffffffc688 r8 0xc1 193 r9 0x7fffea9a0cc0 140737129352384 r10 0x0 0 r11 0x1 1 r12 0x7fffffffc6b0 140737488340656 r13 0x7fffffffc6a0 140737488340640 r14 0x7fffffffc790 140737488340880 r15 0x7fffffffc790 140737488340880 rip 0x101b2c0 0x101b2c0 <sqlite3_key> eflags 0x202 [ IF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 Copy down the value of rdi from the second column of the info registers output. It is the pointer to the open SQLite database handle. Then, finish execution of sqlite3_key by running fin . (gdb) fin Run till exit from #0 0x000000000101b2c0 in sqlite3_key () 0x0000000000f94e54 in SqliteDatabase::openInternal(QString const&, SqlDatabaseKey*) () Use gdb\u2019s ability to call C functions to rekey the database to the null key, thereby decrypting it in-place and allowing export of the SQL data: (gdb) p (int) sqlite3_rekey_v2(0x25ef4e8, 0, 0, 0) $ 1 = 0 If you see $1 = 0 from the rekey command then you are ready to export the SQL data (step 14), if you see $1 = 8 then you need to follow the below steps. Mendeley will sometimes re-open the database a few times during startup sp this may have caused the error To work around the random opening of the database, check if the program opens the main database a second time Run step 7-8 again up to the p sqlite3_rekey_v2(...) step, but do not run sqlite3_rekey_v2 Instead, just type c to continue, returning to the step where you inspect each call to sqlite3_open_v2 , waiting for one with $rdi pointing to a string with the right database filename. When you see it come round again, then try the sqlite3_rekey_v2 step If you see $1 = 0 this time, you\u2019re all set, and can proceed as described above for a successful call to sqlite3_rekey_v2 Once the database is decrypted it is a good idea to save a copy of the database to a new location: cd ~/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite ~/backup-decrypted.sqlite Now you can quit gbd : (gdb) quit A debugging session is active. Inferior 1 [process 32750] will be killed. Quit anyway? (y or n) y [322:322:0100/000000.491674:ERROR:broker_posix.cc(43)] Invalid node channel message if also running Flatpak : [\ud83d\udce6 com.elsevier.MendeleyDesktop ~]$ exit Lastly, restore your backup copy of the encrypted database, so that Mendeley will continue to run OK: cd ~/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley\\ Ltd./Mendeley\\ Desktop/ cp ~/backup-encrypted.sqlite 579d4e70-4479-3965-8590-1ddf5803d0c1@www.mendeley.com.sqlite You can now use software like SQLite Browser to open and view the database ( ~/backup-decrypted.sqlite )","title":"Extract your data"},{"location":"phd_related/install-github-desktop/index.html","text":"While working with Git is most often performed at the command line, it can often be daughnting for people who are not as comfortable with a terminal window. GitHub has made the entry point easier by introducing a user interface application - GitHub Desktop . Setting up GitHub Desktop \u00b6 The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly , which is simple and easy to use. Install the application from the official website . Once you have installed GitHub Desktop, launch it and sign in with your GitHub account: Once you are signed in, choose Clone a repository .","title":"GitHub Desktop"},{"location":"phd_related/install-github-desktop/index.html#setting-up-github-desktop","text":"The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly , which is simple and easy to use. Install the application from the official website . Once you have installed GitHub Desktop, launch it and sign in with your GitHub account: Once you are signed in, choose Clone a repository .","title":"Setting up GitHub Desktop"},{"location":"phd_related/install-github-desktop/static/Untitled.html","text":"\u00b6 Title : Authors : Journal : Year : Place : Reference : Purpose \u00b6 Introduction \u00b6 Methods \u00b6 Results \u00b6 ## Discussion ## Conclusion","title":"Untitled"},{"location":"phd_related/install-github-desktop/static/Untitled.html#_1","text":"Title : Authors : Journal : Year : Place : Reference :","title":""},{"location":"phd_related/install-github-desktop/static/Untitled.html#purpose","text":"","title":"Purpose"},{"location":"phd_related/install-github-desktop/static/Untitled.html#introduction","text":"","title":"Introduction"},{"location":"phd_related/install-github-desktop/static/Untitled.html#methods","text":"","title":"Methods"},{"location":"phd_related/install-github-desktop/static/Untitled.html#results","text":"## Discussion ## Conclusion","title":"Results"},{"location":"phd_related/ocr-papers/index.html","text":"I make use of the advanced search feature in Zotereo frequently, which enables searching through manuscript PDFs. However, when you obtain manuscript PDF files from online databases, they may not be in a searchable format. This means you are unable to highlight and search for text within the PDF. I have written a small Python function that will recursively search though a directory and convert any found PDF to a searchable format. Optical Character Recognition (OCR) is a method to enable text recognition within images and documents. PDFs contain vector graphics that can contain raster objects (.png, .jpg etc.). The OCR process will first rasterize each page of the PDF file then an OCR \"layer\" is created. Getting Started \u00b6 The code to perform the bulk OCR conversion can be found in this GitHub repository . Once you have the project repository stored locally, follow these steps to run OCR on your Zotereo database. You will need to install the command-line program OCRmyPDF . Next, you will need to determine where Zotereo stores your PDF files. In Zotereo, right-click on any document and select Show File . A new window will pop-up, make note of the full path to parent directory (i.e. /home/Zotereo/storage). Zotereo file storage location. In a terminal window, change into the GitHub project repository: cd /home/user/Documents/Github/ocr-pdf Install the required Python libraries by running: python -m pip install -r requirements.txt From the root of the repository, run the Python script by passing the full directory path determined in the first step: python main.py -i \"full/path/to/PDF/storage/directory\" This process will take some time. First, the algorithm will search through all the PDFs and determine which files are not searchable. Once the non-searchable PDF files have been found, the OCR process is executed using ocrmypdf .","title":"Making PDFs Searchable"},{"location":"phd_related/ocr-papers/index.html#getting-started","text":"The code to perform the bulk OCR conversion can be found in this GitHub repository . Once you have the project repository stored locally, follow these steps to run OCR on your Zotereo database. You will need to install the command-line program OCRmyPDF . Next, you will need to determine where Zotereo stores your PDF files. In Zotereo, right-click on any document and select Show File . A new window will pop-up, make note of the full path to parent directory (i.e. /home/Zotereo/storage). Zotereo file storage location. In a terminal window, change into the GitHub project repository: cd /home/user/Documents/Github/ocr-pdf Install the required Python libraries by running: python -m pip install -r requirements.txt From the root of the repository, run the Python script by passing the full directory path determined in the first step: python main.py -i \"full/path/to/PDF/storage/directory\" This process will take some time. First, the algorithm will search through all the PDFs and determine which files are not searchable. Once the non-searchable PDF files have been found, the OCR process is executed using ocrmypdf .","title":"Getting Started"},{"location":"phd_related/reading-academic-papers/index.html","text":"One frequently asked question amoung graduate students is \"How do you organize/read manuscripts?\". I have found a workflow that works quite well and allows me to stay ontop of the endless amount of new publications. Setup an RSS feed \u00b6 The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly , which is simple and easy to use. On the main page, select Get started for free . If you do not want to link your social media accounts, select Continue with Feedly and use an email address of your choice. Once you have logged in you should see a search box for searching potential topics. Head over to PubMed and perform a common search you use to find articles you are interested in. I will use deep brain stimulation as an example. Once you search for the term in PubMed you will notice an option to Create RSS underneath the search box. Click this option. Leave the default options set and click the XML link to open a new tab. In the new tab, copy the full URL and paste it into the search box on the Feedly page and hit Enter. Once the search load click on the Follow tab, create a new feed for it and you will see it appear on the left side column. You can now login and find all recent articles indexed on PubMed about the topic you are interested in. This is a great tool to use to keep up-to-date on publications. Take Notes \u00b6 With any new article I come across, I try to make a quick summary note about it for later reference. A really nice tool for these notes is a software called Notable . Notable is a Markdown based notetaking application that makes sharing notes very open and easy. When you open Notable for the first time you will need to set your data directory. If you want to easily sync/share your notes, create a new Github repository and use that as your Notable data directory. I created a template note for myself that I use for each new article I read, which looks like: If you want the template you can download it here .","title":"Reading Academic Papers"},{"location":"phd_related/reading-academic-papers/index.html#setup-an-rss-feed","text":"The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly , which is simple and easy to use. On the main page, select Get started for free . If you do not want to link your social media accounts, select Continue with Feedly and use an email address of your choice. Once you have logged in you should see a search box for searching potential topics. Head over to PubMed and perform a common search you use to find articles you are interested in. I will use deep brain stimulation as an example. Once you search for the term in PubMed you will notice an option to Create RSS underneath the search box. Click this option. Leave the default options set and click the XML link to open a new tab. In the new tab, copy the full URL and paste it into the search box on the Feedly page and hit Enter. Once the search load click on the Follow tab, create a new feed for it and you will see it appear on the left side column. You can now login and find all recent articles indexed on PubMed about the topic you are interested in. This is a great tool to use to keep up-to-date on publications.","title":"Setup an RSS feed"},{"location":"phd_related/reading-academic-papers/index.html#take-notes","text":"With any new article I come across, I try to make a quick summary note about it for later reference. A really nice tool for these notes is a software called Notable . Notable is a Markdown based notetaking application that makes sharing notes very open and easy. When you open Notable for the first time you will need to set your data directory. If you want to easily sync/share your notes, create a new Github repository and use that as your Notable data directory. I created a template note for myself that I use for each new article I read, which looks like: If you want the template you can download it here .","title":"Take Notes"},{"location":"phd_related/reading-academic-papers/static/Untitled.html","text":"\u00b6 Title : Authors : Journal : Year : Place : Reference : Purpose \u00b6 Introduction \u00b6 Methods \u00b6 Results \u00b6 ## Discussion ## Conclusion","title":"Untitled"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#_1","text":"Title : Authors : Journal : Year : Place : Reference :","title":""},{"location":"phd_related/reading-academic-papers/static/Untitled.html#purpose","text":"","title":"Purpose"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#introduction","text":"","title":"Introduction"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#methods","text":"","title":"Methods"},{"location":"phd_related/reading-academic-papers/static/Untitled.html#results","text":"## Discussion ## Conclusion","title":"Results"},{"location":"python_intro/01_01_python_basics_operations.html","text":"The following are simple operations you can perform within python. We start with very basic operations and work up to more complex operations such as defining functions and methods Operations \u00b6 The following are simple math expressions that can be done in Python. Arithmetic \u00b6 Symbol Task Performed + Addition - Subtraction / division % mod * multiplication // floor division ** to the power of Simple arithmetic calculations can be completed within Python: # Addition >>> 1 + 1 2 # Multiplication >>> 1 * 3 3 # Division >>> 1 / 2 0.5 # Square >>> 2 ** 4 16 # Find remainder - called modulus >>> 4 % 2 0 # Find remainder - called modulus >>> 5 % 2 1 # BEDMAS >>> ( 2 + 3 ) * ( 5 + 5 ) 50 Trigonometry \u00b6 Trig Function Name Description math.pi pi mathematical constant \\(\\pi\\) math.sin() sine sine of an angle in radians math.cos() cosine cosine of an angle in radians math.tan() tangent tangent of an angle in radians math.asin() arc sine inverse sine, ouput in radians math.acos() arc cosine inverse cosine, ouput in radians math.atan() arc tangent inverse tangent, ouput in radians math.radians() radians conversion degrees to radians math.degrees() degree conversion radians to degrees Trigonometry functions such as sine, cosine, and tangent can also be calculated using Python: >>> from math import sin >>> sin ( 60 ) - 0.3048106211022167 >>> from math import sin , cos , tan , pi >>> pi 3.141592653589793 >>> sin ( pi / 6 ) 0.49999999999999994 >>> cos ( pi / 6 ) 0.8660254037844387 >>> tan ( pi / 6 ) 0.5773502691896257 Exponents/Logarithms \u00b6 Calculating exponents and logarithms with Python is easy. Note the exponent and logarithm functions are imported from the math module just like the trig functions were imported from the math module above. >>> from math import log , log10 , exp , e , pow , sqrt >>> log ( 3.0 * e ** 3.4 ) # note: natural log 4.4986122886681095 >>> sqrt ( 3 ** 2 + 4 ** 2 ) 5.0 # The power function pow() works like the ** operator. pow() raises a number to a power >>> 5 ** 2 25 >>> pow ( 5 , 2 ) 25.0 Math function Name Description math.e Euler\u2019s number mathematical constant \\(e\\) math.exp() exponent \\(e\\) raised to a power math.log() natural logarithm log base e math.log10() base 10 logarithm log base 10 math.pow() power raises a number to a power math.sqrt() square root square root of a number Variables \u00b6 A name that is used to denote something or a value is called a variable. When assigning variables, the variable name should be something meaningful. This way you will remeber what it is for. Variables can not start with a number or special character. In python, variables can be declared and values can be assigned to it as follows: # I prefer sepearting words in a variable with '_' >>> name_of_var = 2 # you can also use camelCase >>> nameOfVar = 2 # Assign numbers to variables. These are now objects in Python. >>> x = 2 >>> y = 3 # Since they are objects you can now use them to perform operations >>> z = x + y >>> z 5 # Multiple variables can be assigned with the same value at once >>> x = y = 1 >>> print ( x , y ) 1 1 Variable names in Python must conform to the following rules: variable names must start with a letter variable names can only contain letters, numbers, and the underscore character _ variable names can not contain spaces variable names can not include punctuation variable names are not enclosed in quotes or brackets String Operations \u00b6 Strings are sequences of letters, numbers, punctuation, and spaces. Strings are defined by enclosing letters, numbers, punctuation, and spaces in single quotes ' ' or double quotes \" \". # When using strings you can use single quotes or double quotes >>> single = 'single quotes' >>> double = \"double quotes\" # If you want a string to contain an apostrophe then use double quotes around the string... >>> apostrophe = \" wrap lot's of other quotes\" String Concatenation \u00b6 Strings can be concatenated or combined using the + operator. >>> word = \"Solution\" >>> another_word = \"another solution\" >>> third_word = \"3rd solution!\" >>> all_words = word + another_word + third_word >>> all_words 'Solutionanother solution3rd solution!' String Comparison \u00b6 Strings can be compared using the comparison operator; the double equals sign ==. Note the comparison operator (double equals ==) is not the same as the assignment operator, a single equals sign =. >>> name1 = 'Gabby' >>> name2 = 'Gabby' >>> name1 == name2 True >>> name1 = 'Gabby' >>> name2 = 'Maelle' >>> name1 == name2 False Printing variables \u00b6 One built-in function in Python is print(). The value or expression inside of the parenthesis of a print() function \u201cprints\u201d out to terminal when the print() function is called. >>> x = 'hello' # Use the built-in function to print variables/objects out >>> print ( x ) 'hello' # Use the format function to set the values within the string enclosed by curly braces {} >>> num = 12 >>> name = 'Sam' # Either of these methods work... >>> print ( 'My number is: {one} , and my name is: {two} ' . format ( one = num , two = name )) 'My number is: 12, and my name is: Sam' >>> print ( 'My number is: {} , and my name is: {} ' . format ( num , name )) 'My number is: 12, and my name is: Sam' Lists \u00b6 # With only integers [ 1 , 2 , 3 ] # With integers and strings [ 'hi' , 1 ,[ 1 , 2 ]] # Adding new values to a list my_list = [ 'a' , 'b' , 'c' ] my_list . append ( 'd' ) print ( my_list ) # Indexing a list by the items index my_list [ 0 ] # Indexing using a slice notation : my_list [ 1 :] # Replace existing values in list my_list [ 0 ] = 'NEW' print ( my_list ) # You can create nested lists as well nest = [ 1 , 2 , 3 ,[ 4 , 5 ,[ 'target' ]]] nest [ 3 ] nest [ 3 ][ 2 ] nest [ 3 ][ 2 ][ 0 ] Dictionaries \u00b6 d = { 'key1' : 'item1' , 'key2' : 'item2' } d d [ 'key1' ] Booleans \u00b6 True False Tuples \u00b6 t = ( 1 , 2 , 3 ) t [ 0 ] # You can not assign items to a tuple like you can with a list t [ 0 ] = 'NEW' Sets \u00b6 { 1 , 2 , 3 } { 1 , 2 , 3 , 1 , 2 , 1 , 2 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 1 , 2 } Relational Operators \u00b6 Symbol Task Performed == True, if it is equal != True, if not equal to < less than > greater than <= less than or equal to >= greater than or equal to # False statements 1 > 2 'hi' == 'bye' # True statements 1 < 2 1 >= 1 1 <= 4 1 == 1 Logic Operators \u00b6 # Using 'and' to indicate both conditions need to be True ( 1 > 2 ) and ( 2 < 3 ) # Using 'or' to indicate only one conditions needs to be True ( 1 > 2 ) or ( 2 < 3 ) # You can have as many conditional statements as you want ( 1 == 2 ) or ( 2 == 3 ) or ( 4 == 4 ) if,elif, else Statements \u00b6 # IF statement if 1 < 2 : print ( 'Yep!' ) # IF ELSE statement if 1 < 2 : print ( 'first' ) else : print ( 'last' ) if 1 > 2 : print ( 'first' ) else : print ( 'last' ) # IF, ELIF, ELSE statement if 1 == 2 : print ( 'first' ) elif 3 == 3 : print ( 'middle' ) else : print ( 'Last' ) For Loops \u00b6 seq = [ 1 , 2 , 3 , 4 , 5 ] for item in seq : print ( item ) for item in seq : print ( 'Yep' ) # You can name the iterator whatever you like for jelly in seq : print ( jelly + jelly ) While Loops \u00b6 i = 1 while i < 5 : print ( 'i is: {} ' . format ( i )) i = i + 1 range() function \u00b6 range ( 5 ) # Great for using in For loops for i in range ( 5 ): print ( i ) # You can use it to create lists list ( range ( 5 )) List comprehension \u00b6 x = [ 1 , 2 , 3 , 4 ] # Perform operations within a For loop and append the outputs to a list object out = [] for item in x : out . append ( item ** 2 ) print ( out ) A very useful technique in Python is the one line for loop: [ item ** 2 for item in x ] Defining functions \u00b6 def my_func ( param1 = 'default' ): \"\"\" Docstring goes here. \"\"\" print ( param1 ) # To call your function you need to include brackets at the end my_func my_func () Now that you have defined your function with an input you can provide new inputs to the function to perform an operation # You can either call the defined input varible for your function my_func ( param1 = 'new param' ) # Or you can just provide the input, remember if you have multiple function inputs the position of these inputs matter! my_func ( 'new param' ) # Use the 'Return' function to return a value from within your function and assign it to a variable def square ( x ): return x ** 2 out = square ( 2 ) print ( out ) Lambda, map and filter \u00b6 Instead of writing a function you can use the lambda function instead: def times2 ( var ): return var * 2 times2 ( 2 ) # lambda lambda var : var * 2 # map seq = [ 1 , 2 , 3 , 4 , 5 ] map ( times2 , seq ) # Combining lambda and map together you get list ( map ( times2 , seq )) # Here is more detail list ( map ( lambda var : var * 2 , seq )) # Using the filter function to return values that meet a condition filter ( lambda item : item % 2 == 0 , seq ) list ( filter ( lambda item : item % 2 == 0 , seq )) Methods \u00b6 One of the most useful aspects of the Python language is that everything is an object and has inherent methods. string methods \u00b6 # Assign 'st' to be a string st = 'hello my name is Sam' # A string type in Python has several methods # To return all lowercase st . lower () # All uppercase st . upper () # Split the string at white spaces st . split () # You can use the split method to split at a character you want tweet = 'Go Sports! #Sports' tweet . split ( '#' ) # You can return only the part of the string you want after the split method tweet . split ( '#' )[ 1 ] dictionary methods \u00b6 d = { 'key1' : 'item1' , 'key2' : 'item2' } # Print the keys in a dictionary d . keys () # Print the items in a dictionary d . items () list methods \u00b6 lst = [ 1 , 2 , 3 ] lst . pop () lst # Find a value within a list 'x' in [ 1 , 2 , 3 ] 'x' in [ 'x' , 'y' , 'z' ]","title":"Operations"},{"location":"python_intro/01_01_python_basics_operations.html#operations","text":"The following are simple math expressions that can be done in Python.","title":"Operations"},{"location":"python_intro/01_01_python_basics_operations.html#arithmetic","text":"Symbol Task Performed + Addition - Subtraction / division % mod * multiplication // floor division ** to the power of Simple arithmetic calculations can be completed within Python: # Addition >>> 1 + 1 2 # Multiplication >>> 1 * 3 3 # Division >>> 1 / 2 0.5 # Square >>> 2 ** 4 16 # Find remainder - called modulus >>> 4 % 2 0 # Find remainder - called modulus >>> 5 % 2 1 # BEDMAS >>> ( 2 + 3 ) * ( 5 + 5 ) 50","title":"Arithmetic"},{"location":"python_intro/01_01_python_basics_operations.html#trigonometry","text":"Trig Function Name Description math.pi pi mathematical constant \\(\\pi\\) math.sin() sine sine of an angle in radians math.cos() cosine cosine of an angle in radians math.tan() tangent tangent of an angle in radians math.asin() arc sine inverse sine, ouput in radians math.acos() arc cosine inverse cosine, ouput in radians math.atan() arc tangent inverse tangent, ouput in radians math.radians() radians conversion degrees to radians math.degrees() degree conversion radians to degrees Trigonometry functions such as sine, cosine, and tangent can also be calculated using Python: >>> from math import sin >>> sin ( 60 ) - 0.3048106211022167 >>> from math import sin , cos , tan , pi >>> pi 3.141592653589793 >>> sin ( pi / 6 ) 0.49999999999999994 >>> cos ( pi / 6 ) 0.8660254037844387 >>> tan ( pi / 6 ) 0.5773502691896257","title":"Trigonometry"},{"location":"python_intro/01_01_python_basics_operations.html#exponentslogarithms","text":"Calculating exponents and logarithms with Python is easy. Note the exponent and logarithm functions are imported from the math module just like the trig functions were imported from the math module above. >>> from math import log , log10 , exp , e , pow , sqrt >>> log ( 3.0 * e ** 3.4 ) # note: natural log 4.4986122886681095 >>> sqrt ( 3 ** 2 + 4 ** 2 ) 5.0 # The power function pow() works like the ** operator. pow() raises a number to a power >>> 5 ** 2 25 >>> pow ( 5 , 2 ) 25.0 Math function Name Description math.e Euler\u2019s number mathematical constant \\(e\\) math.exp() exponent \\(e\\) raised to a power math.log() natural logarithm log base e math.log10() base 10 logarithm log base 10 math.pow() power raises a number to a power math.sqrt() square root square root of a number","title":"Exponents/Logarithms"},{"location":"python_intro/01_01_python_basics_operations.html#variables","text":"A name that is used to denote something or a value is called a variable. When assigning variables, the variable name should be something meaningful. This way you will remeber what it is for. Variables can not start with a number or special character. In python, variables can be declared and values can be assigned to it as follows: # I prefer sepearting words in a variable with '_' >>> name_of_var = 2 # you can also use camelCase >>> nameOfVar = 2 # Assign numbers to variables. These are now objects in Python. >>> x = 2 >>> y = 3 # Since they are objects you can now use them to perform operations >>> z = x + y >>> z 5 # Multiple variables can be assigned with the same value at once >>> x = y = 1 >>> print ( x , y ) 1 1 Variable names in Python must conform to the following rules: variable names must start with a letter variable names can only contain letters, numbers, and the underscore character _ variable names can not contain spaces variable names can not include punctuation variable names are not enclosed in quotes or brackets","title":"Variables"},{"location":"python_intro/01_01_python_basics_operations.html#string-operations","text":"Strings are sequences of letters, numbers, punctuation, and spaces. Strings are defined by enclosing letters, numbers, punctuation, and spaces in single quotes ' ' or double quotes \" \". # When using strings you can use single quotes or double quotes >>> single = 'single quotes' >>> double = \"double quotes\" # If you want a string to contain an apostrophe then use double quotes around the string... >>> apostrophe = \" wrap lot's of other quotes\"","title":"String Operations"},{"location":"python_intro/01_01_python_basics_operations.html#string-concatenation","text":"Strings can be concatenated or combined using the + operator. >>> word = \"Solution\" >>> another_word = \"another solution\" >>> third_word = \"3rd solution!\" >>> all_words = word + another_word + third_word >>> all_words 'Solutionanother solution3rd solution!'","title":"String Concatenation"},{"location":"python_intro/01_01_python_basics_operations.html#string-comparison","text":"Strings can be compared using the comparison operator; the double equals sign ==. Note the comparison operator (double equals ==) is not the same as the assignment operator, a single equals sign =. >>> name1 = 'Gabby' >>> name2 = 'Gabby' >>> name1 == name2 True >>> name1 = 'Gabby' >>> name2 = 'Maelle' >>> name1 == name2 False","title":"String Comparison"},{"location":"python_intro/01_01_python_basics_operations.html#printing-variables","text":"One built-in function in Python is print(). The value or expression inside of the parenthesis of a print() function \u201cprints\u201d out to terminal when the print() function is called. >>> x = 'hello' # Use the built-in function to print variables/objects out >>> print ( x ) 'hello' # Use the format function to set the values within the string enclosed by curly braces {} >>> num = 12 >>> name = 'Sam' # Either of these methods work... >>> print ( 'My number is: {one} , and my name is: {two} ' . format ( one = num , two = name )) 'My number is: 12, and my name is: Sam' >>> print ( 'My number is: {} , and my name is: {} ' . format ( num , name )) 'My number is: 12, and my name is: Sam'","title":"Printing variables"},{"location":"python_intro/01_01_python_basics_operations.html#lists","text":"# With only integers [ 1 , 2 , 3 ] # With integers and strings [ 'hi' , 1 ,[ 1 , 2 ]] # Adding new values to a list my_list = [ 'a' , 'b' , 'c' ] my_list . append ( 'd' ) print ( my_list ) # Indexing a list by the items index my_list [ 0 ] # Indexing using a slice notation : my_list [ 1 :] # Replace existing values in list my_list [ 0 ] = 'NEW' print ( my_list ) # You can create nested lists as well nest = [ 1 , 2 , 3 ,[ 4 , 5 ,[ 'target' ]]] nest [ 3 ] nest [ 3 ][ 2 ] nest [ 3 ][ 2 ][ 0 ]","title":"Lists"},{"location":"python_intro/01_01_python_basics_operations.html#dictionaries","text":"d = { 'key1' : 'item1' , 'key2' : 'item2' } d d [ 'key1' ]","title":"Dictionaries"},{"location":"python_intro/01_01_python_basics_operations.html#booleans","text":"True False","title":"Booleans"},{"location":"python_intro/01_01_python_basics_operations.html#tuples","text":"t = ( 1 , 2 , 3 ) t [ 0 ] # You can not assign items to a tuple like you can with a list t [ 0 ] = 'NEW'","title":"Tuples"},{"location":"python_intro/01_01_python_basics_operations.html#sets","text":"{ 1 , 2 , 3 } { 1 , 2 , 3 , 1 , 2 , 1 , 2 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 1 , 2 }","title":"Sets"},{"location":"python_intro/01_01_python_basics_operations.html#relational-operators","text":"Symbol Task Performed == True, if it is equal != True, if not equal to < less than > greater than <= less than or equal to >= greater than or equal to # False statements 1 > 2 'hi' == 'bye' # True statements 1 < 2 1 >= 1 1 <= 4 1 == 1","title":"Relational Operators"},{"location":"python_intro/01_01_python_basics_operations.html#logic-operators","text":"# Using 'and' to indicate both conditions need to be True ( 1 > 2 ) and ( 2 < 3 ) # Using 'or' to indicate only one conditions needs to be True ( 1 > 2 ) or ( 2 < 3 ) # You can have as many conditional statements as you want ( 1 == 2 ) or ( 2 == 3 ) or ( 4 == 4 )","title":"Logic Operators"},{"location":"python_intro/01_01_python_basics_operations.html#ifelif-else-statements","text":"# IF statement if 1 < 2 : print ( 'Yep!' ) # IF ELSE statement if 1 < 2 : print ( 'first' ) else : print ( 'last' ) if 1 > 2 : print ( 'first' ) else : print ( 'last' ) # IF, ELIF, ELSE statement if 1 == 2 : print ( 'first' ) elif 3 == 3 : print ( 'middle' ) else : print ( 'Last' )","title":"if,elif, else Statements"},{"location":"python_intro/01_01_python_basics_operations.html#for-loops","text":"seq = [ 1 , 2 , 3 , 4 , 5 ] for item in seq : print ( item ) for item in seq : print ( 'Yep' ) # You can name the iterator whatever you like for jelly in seq : print ( jelly + jelly )","title":"For Loops"},{"location":"python_intro/01_01_python_basics_operations.html#while-loops","text":"i = 1 while i < 5 : print ( 'i is: {} ' . format ( i )) i = i + 1","title":"While Loops"},{"location":"python_intro/01_01_python_basics_operations.html#range-function","text":"range ( 5 ) # Great for using in For loops for i in range ( 5 ): print ( i ) # You can use it to create lists list ( range ( 5 ))","title":"range() function"},{"location":"python_intro/01_01_python_basics_operations.html#list-comprehension","text":"x = [ 1 , 2 , 3 , 4 ] # Perform operations within a For loop and append the outputs to a list object out = [] for item in x : out . append ( item ** 2 ) print ( out ) A very useful technique in Python is the one line for loop: [ item ** 2 for item in x ]","title":"List comprehension"},{"location":"python_intro/01_01_python_basics_operations.html#defining-functions","text":"def my_func ( param1 = 'default' ): \"\"\" Docstring goes here. \"\"\" print ( param1 ) # To call your function you need to include brackets at the end my_func my_func () Now that you have defined your function with an input you can provide new inputs to the function to perform an operation # You can either call the defined input varible for your function my_func ( param1 = 'new param' ) # Or you can just provide the input, remember if you have multiple function inputs the position of these inputs matter! my_func ( 'new param' ) # Use the 'Return' function to return a value from within your function and assign it to a variable def square ( x ): return x ** 2 out = square ( 2 ) print ( out )","title":"Defining functions"},{"location":"python_intro/01_01_python_basics_operations.html#lambda-map-and-filter","text":"Instead of writing a function you can use the lambda function instead: def times2 ( var ): return var * 2 times2 ( 2 ) # lambda lambda var : var * 2 # map seq = [ 1 , 2 , 3 , 4 , 5 ] map ( times2 , seq ) # Combining lambda and map together you get list ( map ( times2 , seq )) # Here is more detail list ( map ( lambda var : var * 2 , seq )) # Using the filter function to return values that meet a condition filter ( lambda item : item % 2 == 0 , seq ) list ( filter ( lambda item : item % 2 == 0 , seq ))","title":"Lambda, map and filter"},{"location":"python_intro/01_01_python_basics_operations.html#methods","text":"One of the most useful aspects of the Python language is that everything is an object and has inherent methods.","title":"Methods"},{"location":"python_intro/01_01_python_basics_operations.html#string-methods","text":"# Assign 'st' to be a string st = 'hello my name is Sam' # A string type in Python has several methods # To return all lowercase st . lower () # All uppercase st . upper () # Split the string at white spaces st . split () # You can use the split method to split at a character you want tweet = 'Go Sports! #Sports' tweet . split ( '#' ) # You can return only the part of the string you want after the split method tweet . split ( '#' )[ 1 ]","title":"string methods"},{"location":"python_intro/01_01_python_basics_operations.html#dictionary-methods","text":"d = { 'key1' : 'item1' , 'key2' : 'item2' } # Print the keys in a dictionary d . keys () # Print the items in a dictionary d . items ()","title":"dictionary methods"},{"location":"python_intro/01_01_python_basics_operations.html#list-methods","text":"lst = [ 1 , 2 , 3 ] lst . pop () lst # Find a value within a list 'x' in [ 1 , 2 , 3 ] 'x' in [ 'x' , 'y' , 'z' ]","title":"list methods"},{"location":"python_intro/01_02_python_basics_numpy.html","text":"NumPy (or Numpy) is a Linear Algebra Library for Python, the reason it is so important for Data Science with Python is that almost all of the libraries in the PyData Ecosystem rely on NumPy as one of their main building blocks. Numpy is also incredibly fast, as it has bindings to C libraries. For more info on why you would want to use Arrays instead of lists, check out this great StackOverflow post . We will only learn the basics of NumPy, to get started we need to install it! Using NumPy \u00b6 Once you've installed NumPy you can import it as a library: import numpy as np Numpy has many built-in functions and capabilities. We won't cover them all but instead we will focus on some of the most important aspects of Numpy: vectors,arrays,matrices, and number generation. Let's start by discussing arrays. Numpy Arrays \u00b6 NumPy arrays are the main way we will use Numpy throughout the course. Numpy arrays essentially come in two flavors: vectors and matrices. Vectors are strictly 1-d arrays and matrices are 2-d (but you should note a matrix can still have only one row or one column). Let's begin our introduction by exploring how to create NumPy arrays. From a Python List \u00b6 We can create an array by directly converting a list or list of lists: my_list = [ 1 , 2 , 3 ] my_list [1, 2, 3] np . array ( my_list ) array([1, 2, 3]) my_matrix = [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ],[ 7 , 8 , 9 ]] my_matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]] np . array ( my_matrix ) array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Built-in Methods \u00b6 There are lots of built-in ways to generate Arrays arange \u00b6 Return evenly spaced values within a given interval. np . arange ( 0 , 10 ) array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) np . arange ( 0 , 11 , 2 ) array([ 0, 2, 4, 6, 8, 10]) zeros and ones \u00b6 Generate arrays of zeros or ones np . zeros ( 3 ) array([0., 0., 0.]) np . zeros (( 5 , 5 )) array([[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]]) np . ones ( 3 ) array([1., 1., 1.]) np . ones (( 3 , 3 )) array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]) linspace \u00b6 Return evenly spaced numbers over a specified interval. np . linspace ( 0 , 10 , 3 ) array([ 0., 5., 10.]) np . linspace ( 0 , 10 , 50 ) array([ 0. , 0.20408163, 0.40816327, 0.6122449 , 0.81632653, 1.02040816, 1.2244898 , 1.42857143, 1.63265306, 1.83673469, 2.04081633, 2.24489796, 2.44897959, 2.65306122, 2.85714286, 3.06122449, 3.26530612, 3.46938776, 3.67346939, 3.87755102, 4.08163265, 4.28571429, 4.48979592, 4.69387755, 4.89795918, 5.10204082, 5.30612245, 5.51020408, 5.71428571, 5.91836735, 6.12244898, 6.32653061, 6.53061224, 6.73469388, 6.93877551, 7.14285714, 7.34693878, 7.55102041, 7.75510204, 7.95918367, 8.16326531, 8.36734694, 8.57142857, 8.7755102 , 8.97959184, 9.18367347, 9.3877551 , 9.59183673, 9.79591837, 10. ]) eye \u00b6 Creates an identity matrix np . eye ( 4 ) array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) Random \u00b6 Numpy also has lots of ways to create random number arrays: rand \u00b6 Create an array of the given shape and populate it with random samples from a uniform distribution over [0, 1) . np . random . rand ( 2 ) array([0.48986762, 0.01468397]) np . random . rand ( 5 , 5 ) array([[0.49717583, 0.85567488, 0.94414447, 0.66025653, 0.85163724], [0.32891759, 0.74810469, 0.16001041, 0.77051371, 0.88918009], [0.74608104, 0.58533077, 0.40581863, 0.25006859, 0.79847227], [0.06457888, 0.14487206, 0.72442204, 0.62528167, 0.73544863], [0.38535387, 0.7203514 , 0.34161177, 0.99193526, 0.79151416]]) randn \u00b6 Return a sample (or samples) from the \"standard normal\" distribution. Unlike rand which is uniform: np . random . randn ( 2 ) array([-1.31222401, 1.20662849]) np . random . randn ( 5 , 5 ) array([[ 0.05155323, -2.03255688, 1.09044905, 1.37866648, -0.43513118], [-0.113966 , 0.06371491, -0.58679889, 0.32057308, -1.90984774], [ 0.44065855, -0.93779379, 1.61012331, -1.21481517, 1.65470737], [ 1.31027626, 0.15909068, 0.85816313, -0.91927387, 1.13879634], [-0.18915251, -0.48102558, 0.38557437, 1.03093896, 2.00252213]]) randint \u00b6 Return random integers from low (inclusive) to high (exclusive). np . random . randint ( 1 , 100 ) 42 np . random . randint ( 1 , 100 , 10 ) array([73, 70, 12, 99, 69, 26, 10, 41, 92, 6]) Array Attributes and Methods \u00b6 Let's discuss some useful attributes and methods or an array: arr = np . arange ( 25 ) ranarr = np . random . randint ( 0 , 50 , 10 ) arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ranarr array([29, 42, 21, 45, 11, 47, 46, 43, 25, 19]) Reshape \u00b6 Returns an array containing the same data with a new shape. arr . reshape ( 5 , 5 ) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]) max,min,argmax,argmin \u00b6 These are useful methods for finding max or min values. Or to find their index locations using argmin or argmax ranarr array([29, 42, 21, 45, 11, 47, 46, 43, 25, 19]) ranarr . max () 47 ranarr . argmax () 5 ranarr . min () 11 ranarr . argmin () 4 Shape \u00b6 Shape is an attribute that arrays have (not a method): # Vector arr . shape (25,) # Notice the two sets of brackets arr . reshape ( 1 , 25 ) array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]) arr . reshape ( 1 , 25 ) . shape (1, 25) arr . reshape ( 25 , 1 ) array([[ 0], [ 1], [ 2], [ 3], [ 4], [ 5], [ 6], [ 7], [ 8], [ 9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24]]) arr . reshape ( 25 , 1 ) . shape (25, 1) dtype \u00b6 You can also grab the data type of the object in the array: arr . dtype dtype('int64') NumPy Indexing and Selection \u00b6 In this section we will discuss how to select elements or groups of elements from an array. import numpy as np #Creating sample array arr = np . arange ( 0 , 11 ) #Show arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) Bracket Indexing and Selection \u00b6 The simplest way to pick one or some elements of an array looks very similar to python lists: #Get a value at an index arr [ 8 ] 8 #Get values in a range arr [ 1 : 5 ] array([1, 2, 3, 4]) #Get values in a range arr [ 0 : 5 ] array([0, 1, 2, 3, 4]) Broadcasting \u00b6 Numpy arrays differ from a normal Python list because of their ability to broadcast: #Setting a value with index range (Broadcasting) arr [ 0 : 5 ] = 100 #Show arr array([100, 100, 100, 100, 100, 5, 6, 7, 8, 9, 10]) # Reset array, we'll see why I had to reset in a moment arr = np . arange ( 0 , 11 ) #Show arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) #Important notes on Slices slice_of_arr = arr [ 0 : 6 ] #Show slice slice_of_arr array([0, 1, 2, 3, 4, 5]) #Change Slice slice_of_arr [:] = 99 #Show Slice again slice_of_arr array([99, 99, 99, 99, 99, 99]) Now note the changes also occur in our original array! arr array([99, 99, 99, 99, 99, 99, 6, 7, 8, 9, 10]) Data is not copied, it's a view of the original array! This avoids memory problems! #To get a copy, need to be explicit arr_copy = arr . copy () arr_copy array([99, 99, 99, 99, 99, 99, 6, 7, 8, 9, 10]) Indexing a 2D array (matrices) \u00b6 The general format is arr_2d[row][col] or arr_2d[row,col] . I recommend usually using the comma notation for clarity. arr_2d = np . array (([ 5 , 10 , 15 ],[ 20 , 25 , 30 ],[ 35 , 40 , 45 ])) #Show arr_2d array([[ 5, 10, 15], [20, 25, 30], [35, 40, 45]]) #Indexing row arr_2d [ 1 ] array([20, 25, 30]) # Format is arr_2d[row][col] or arr_2d[row,col] # Getting individual element value arr_2d [ 1 ][ 0 ] 20 # Getting individual element value arr_2d [ 1 , 0 ] 20 # 2D array slicing #Shape (2,2) from top right corner arr_2d [: 2 , 1 :] array([[10, 15], [25, 30]]) #Shape bottom row arr_2d [ 2 ] array([35, 40, 45]) #Shape bottom row arr_2d [ 2 ,:] array([35, 40, 45]) Fancy Indexing \u00b6 Fancy indexing allows you to select entire rows or columns out of order,to show this, let's quickly build out a numpy array: #Set up matrix arr2d = np . zeros (( 10 , 10 )) #Length of array arr_length = arr2d . shape [ 1 ] #Set up array for i in range ( arr_length ): arr2d [ i ] = i arr2d array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [5., 5., 5., 5., 5., 5., 5., 5., 5., 5.], [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.], [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.], [9., 9., 9., 9., 9., 9., 9., 9., 9., 9.]]) Fancy indexing allows the following arr2d [[ 2 , 4 , 6 , 8 ]] array([[2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.]]) #Allows in any order arr2d [[ 6 , 4 , 2 , 7 ]] array([[6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.]]) More Indexing Help \u00b6 Indexing a 2d matrix can be a bit confusing at first, especially when you start to add in step size. Try google image searching NumPy indexing to fins useful images, like this one: Selection \u00b6 Let's briefly go over how to use brackets for selection based off of comparison operators. arr = np . arange ( 1 , 11 ) arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) arr > 4 array([False, False, False, False, True, True, True, True, True, True]) bool_arr = arr > 4 bool_arr array([False, False, False, False, True, True, True, True, True, True]) arr [ bool_arr ] array([ 5, 6, 7, 8, 9, 10]) arr [ arr > 2 ] array([ 3, 4, 5, 6, 7, 8, 9, 10]) x = 2 arr [ arr > x ] array([ 3, 4, 5, 6, 7, 8, 9, 10]) Arithmetic \u00b6 You can easily perform array with array arithmetic, or scalar with array arithmetic. Let's see some examples: import numpy as np arr = np . arange ( 0 , 10 ) arr + arr array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) arr * arr array([ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81]) arr - arr array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) # Warning on division by zero, but not an error! # Just replaced with nan arr / arr / home / ggilmore / . local / lib / python3 . 6 / site - packages / ipykernel_launcher . py : 3 : RuntimeWarning : invalid value encountered in true_divide This is separate from the ipykernel package so we can avoid doing imports until array ( [ nan , 1 ., 1 ., 1 ., 1 ., 1 ., 1 ., 1 ., 1 ., 1 .] ) # Also warning, but not an error instead infinity 1 / arr /home/ggilmore/.local/lib/python3.6/site-packages/ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in true_divide array([ inf, 1. , 0.5 , 0.33333333, 0.25 , 0.2 , 0.16666667, 0.14285714, 0.125 , 0.11111111]) arr ** 3 array([ 0, 1, 8, 27, 64, 125, 216, 343, 512, 729]) Universal Array Functions \u00b6 Numpy comes with many universal array functions , which are essentially just mathematical operations you can use to perform the operation across the array. Let's show some common ones: #Taking Square Roots np . sqrt ( arr ) array([0. , 1. , 1.41421356, 1.73205081, 2. , 2.23606798, 2.44948974, 2.64575131, 2.82842712, 3. ]) #Calcualting exponential (e^) np . exp ( arr ) array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01, 5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03, 2.98095799e+03, 8.10308393e+03]) np . max ( arr ) #same as arr.max() 9 np . sin ( arr ) array([ 0. , 0.84147098, 0.90929743, 0.14112001, -0.7568025 , -0.95892427, -0.2794155 , 0.6569866 , 0.98935825, 0.41211849]) np . log ( arr ) / home / ggilmore / . local / lib / python3 . 6 / site - packages / ipykernel_launcher . py : 1 : RuntimeWarning : divide by zero encountered in log \"\"\" Entry point for launching an IPython kernel. array ( [ - inf , 0 . , 0 . 69314718 , 1 . 09861229 , 1 . 38629436 , 1 . 60943791 , 1 . 79175947 , 1 . 94591015 , 2 . 07944154 , 2 . 19722458 ] )","title":"Numpy"},{"location":"python_intro/01_02_python_basics_numpy.html#using-numpy","text":"Once you've installed NumPy you can import it as a library: import numpy as np Numpy has many built-in functions and capabilities. We won't cover them all but instead we will focus on some of the most important aspects of Numpy: vectors,arrays,matrices, and number generation. Let's start by discussing arrays.","title":"Using NumPy"},{"location":"python_intro/01_02_python_basics_numpy.html#numpy-arrays","text":"NumPy arrays are the main way we will use Numpy throughout the course. Numpy arrays essentially come in two flavors: vectors and matrices. Vectors are strictly 1-d arrays and matrices are 2-d (but you should note a matrix can still have only one row or one column). Let's begin our introduction by exploring how to create NumPy arrays.","title":"Numpy Arrays"},{"location":"python_intro/01_02_python_basics_numpy.html#from-a-python-list","text":"We can create an array by directly converting a list or list of lists: my_list = [ 1 , 2 , 3 ] my_list [1, 2, 3] np . array ( my_list ) array([1, 2, 3]) my_matrix = [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ],[ 7 , 8 , 9 ]] my_matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]] np . array ( my_matrix ) array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])","title":"From a Python List"},{"location":"python_intro/01_02_python_basics_numpy.html#built-in-methods","text":"There are lots of built-in ways to generate Arrays","title":"Built-in Methods"},{"location":"python_intro/01_02_python_basics_numpy.html#arange","text":"Return evenly spaced values within a given interval. np . arange ( 0 , 10 ) array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) np . arange ( 0 , 11 , 2 ) array([ 0, 2, 4, 6, 8, 10])","title":"arange"},{"location":"python_intro/01_02_python_basics_numpy.html#zeros-and-ones","text":"Generate arrays of zeros or ones np . zeros ( 3 ) array([0., 0., 0.]) np . zeros (( 5 , 5 )) array([[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]]) np . ones ( 3 ) array([1., 1., 1.]) np . ones (( 3 , 3 )) array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]])","title":"zeros and ones"},{"location":"python_intro/01_02_python_basics_numpy.html#linspace","text":"Return evenly spaced numbers over a specified interval. np . linspace ( 0 , 10 , 3 ) array([ 0., 5., 10.]) np . linspace ( 0 , 10 , 50 ) array([ 0. , 0.20408163, 0.40816327, 0.6122449 , 0.81632653, 1.02040816, 1.2244898 , 1.42857143, 1.63265306, 1.83673469, 2.04081633, 2.24489796, 2.44897959, 2.65306122, 2.85714286, 3.06122449, 3.26530612, 3.46938776, 3.67346939, 3.87755102, 4.08163265, 4.28571429, 4.48979592, 4.69387755, 4.89795918, 5.10204082, 5.30612245, 5.51020408, 5.71428571, 5.91836735, 6.12244898, 6.32653061, 6.53061224, 6.73469388, 6.93877551, 7.14285714, 7.34693878, 7.55102041, 7.75510204, 7.95918367, 8.16326531, 8.36734694, 8.57142857, 8.7755102 , 8.97959184, 9.18367347, 9.3877551 , 9.59183673, 9.79591837, 10. ])","title":"linspace"},{"location":"python_intro/01_02_python_basics_numpy.html#eye","text":"Creates an identity matrix np . eye ( 4 ) array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]])","title":"eye"},{"location":"python_intro/01_02_python_basics_numpy.html#random","text":"Numpy also has lots of ways to create random number arrays:","title":"Random"},{"location":"python_intro/01_02_python_basics_numpy.html#rand","text":"Create an array of the given shape and populate it with random samples from a uniform distribution over [0, 1) . np . random . rand ( 2 ) array([0.48986762, 0.01468397]) np . random . rand ( 5 , 5 ) array([[0.49717583, 0.85567488, 0.94414447, 0.66025653, 0.85163724], [0.32891759, 0.74810469, 0.16001041, 0.77051371, 0.88918009], [0.74608104, 0.58533077, 0.40581863, 0.25006859, 0.79847227], [0.06457888, 0.14487206, 0.72442204, 0.62528167, 0.73544863], [0.38535387, 0.7203514 , 0.34161177, 0.99193526, 0.79151416]])","title":"rand"},{"location":"python_intro/01_02_python_basics_numpy.html#randn","text":"Return a sample (or samples) from the \"standard normal\" distribution. Unlike rand which is uniform: np . random . randn ( 2 ) array([-1.31222401, 1.20662849]) np . random . randn ( 5 , 5 ) array([[ 0.05155323, -2.03255688, 1.09044905, 1.37866648, -0.43513118], [-0.113966 , 0.06371491, -0.58679889, 0.32057308, -1.90984774], [ 0.44065855, -0.93779379, 1.61012331, -1.21481517, 1.65470737], [ 1.31027626, 0.15909068, 0.85816313, -0.91927387, 1.13879634], [-0.18915251, -0.48102558, 0.38557437, 1.03093896, 2.00252213]])","title":"randn"},{"location":"python_intro/01_02_python_basics_numpy.html#randint","text":"Return random integers from low (inclusive) to high (exclusive). np . random . randint ( 1 , 100 ) 42 np . random . randint ( 1 , 100 , 10 ) array([73, 70, 12, 99, 69, 26, 10, 41, 92, 6])","title":"randint"},{"location":"python_intro/01_02_python_basics_numpy.html#array-attributes-and-methods","text":"Let's discuss some useful attributes and methods or an array: arr = np . arange ( 25 ) ranarr = np . random . randint ( 0 , 50 , 10 ) arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ranarr array([29, 42, 21, 45, 11, 47, 46, 43, 25, 19])","title":"Array Attributes and Methods"},{"location":"python_intro/01_02_python_basics_numpy.html#reshape","text":"Returns an array containing the same data with a new shape. arr . reshape ( 5 , 5 ) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]])","title":"Reshape"},{"location":"python_intro/01_02_python_basics_numpy.html#maxminargmaxargmin","text":"These are useful methods for finding max or min values. Or to find their index locations using argmin or argmax ranarr array([29, 42, 21, 45, 11, 47, 46, 43, 25, 19]) ranarr . max () 47 ranarr . argmax () 5 ranarr . min () 11 ranarr . argmin () 4","title":"max,min,argmax,argmin"},{"location":"python_intro/01_02_python_basics_numpy.html#shape","text":"Shape is an attribute that arrays have (not a method): # Vector arr . shape (25,) # Notice the two sets of brackets arr . reshape ( 1 , 25 ) array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]) arr . reshape ( 1 , 25 ) . shape (1, 25) arr . reshape ( 25 , 1 ) array([[ 0], [ 1], [ 2], [ 3], [ 4], [ 5], [ 6], [ 7], [ 8], [ 9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24]]) arr . reshape ( 25 , 1 ) . shape (25, 1)","title":"Shape"},{"location":"python_intro/01_02_python_basics_numpy.html#dtype","text":"You can also grab the data type of the object in the array: arr . dtype dtype('int64')","title":"dtype"},{"location":"python_intro/01_02_python_basics_numpy.html#numpy-indexing-and-selection","text":"In this section we will discuss how to select elements or groups of elements from an array. import numpy as np #Creating sample array arr = np . arange ( 0 , 11 ) #Show arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])","title":"NumPy Indexing and Selection"},{"location":"python_intro/01_02_python_basics_numpy.html#bracket-indexing-and-selection","text":"The simplest way to pick one or some elements of an array looks very similar to python lists: #Get a value at an index arr [ 8 ] 8 #Get values in a range arr [ 1 : 5 ] array([1, 2, 3, 4]) #Get values in a range arr [ 0 : 5 ] array([0, 1, 2, 3, 4])","title":"Bracket Indexing and Selection"},{"location":"python_intro/01_02_python_basics_numpy.html#broadcasting","text":"Numpy arrays differ from a normal Python list because of their ability to broadcast: #Setting a value with index range (Broadcasting) arr [ 0 : 5 ] = 100 #Show arr array([100, 100, 100, 100, 100, 5, 6, 7, 8, 9, 10]) # Reset array, we'll see why I had to reset in a moment arr = np . arange ( 0 , 11 ) #Show arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) #Important notes on Slices slice_of_arr = arr [ 0 : 6 ] #Show slice slice_of_arr array([0, 1, 2, 3, 4, 5]) #Change Slice slice_of_arr [:] = 99 #Show Slice again slice_of_arr array([99, 99, 99, 99, 99, 99]) Now note the changes also occur in our original array! arr array([99, 99, 99, 99, 99, 99, 6, 7, 8, 9, 10]) Data is not copied, it's a view of the original array! This avoids memory problems! #To get a copy, need to be explicit arr_copy = arr . copy () arr_copy array([99, 99, 99, 99, 99, 99, 6, 7, 8, 9, 10])","title":"Broadcasting"},{"location":"python_intro/01_02_python_basics_numpy.html#indexing-a-2d-array-matrices","text":"The general format is arr_2d[row][col] or arr_2d[row,col] . I recommend usually using the comma notation for clarity. arr_2d = np . array (([ 5 , 10 , 15 ],[ 20 , 25 , 30 ],[ 35 , 40 , 45 ])) #Show arr_2d array([[ 5, 10, 15], [20, 25, 30], [35, 40, 45]]) #Indexing row arr_2d [ 1 ] array([20, 25, 30]) # Format is arr_2d[row][col] or arr_2d[row,col] # Getting individual element value arr_2d [ 1 ][ 0 ] 20 # Getting individual element value arr_2d [ 1 , 0 ] 20 # 2D array slicing #Shape (2,2) from top right corner arr_2d [: 2 , 1 :] array([[10, 15], [25, 30]]) #Shape bottom row arr_2d [ 2 ] array([35, 40, 45]) #Shape bottom row arr_2d [ 2 ,:] array([35, 40, 45])","title":"Indexing a 2D array (matrices)"},{"location":"python_intro/01_02_python_basics_numpy.html#fancy-indexing","text":"Fancy indexing allows you to select entire rows or columns out of order,to show this, let's quickly build out a numpy array: #Set up matrix arr2d = np . zeros (( 10 , 10 )) #Length of array arr_length = arr2d . shape [ 1 ] #Set up array for i in range ( arr_length ): arr2d [ i ] = i arr2d array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [5., 5., 5., 5., 5., 5., 5., 5., 5., 5.], [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.], [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.], [9., 9., 9., 9., 9., 9., 9., 9., 9., 9.]]) Fancy indexing allows the following arr2d [[ 2 , 4 , 6 , 8 ]] array([[2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.]]) #Allows in any order arr2d [[ 6 , 4 , 2 , 7 ]] array([[6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.]])","title":"Fancy Indexing"},{"location":"python_intro/01_02_python_basics_numpy.html#more-indexing-help","text":"Indexing a 2d matrix can be a bit confusing at first, especially when you start to add in step size. Try google image searching NumPy indexing to fins useful images, like this one:","title":"More Indexing Help"},{"location":"python_intro/01_02_python_basics_numpy.html#selection","text":"Let's briefly go over how to use brackets for selection based off of comparison operators. arr = np . arange ( 1 , 11 ) arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) arr > 4 array([False, False, False, False, True, True, True, True, True, True]) bool_arr = arr > 4 bool_arr array([False, False, False, False, True, True, True, True, True, True]) arr [ bool_arr ] array([ 5, 6, 7, 8, 9, 10]) arr [ arr > 2 ] array([ 3, 4, 5, 6, 7, 8, 9, 10]) x = 2 arr [ arr > x ] array([ 3, 4, 5, 6, 7, 8, 9, 10])","title":"Selection"},{"location":"python_intro/01_02_python_basics_numpy.html#arithmetic","text":"You can easily perform array with array arithmetic, or scalar with array arithmetic. Let's see some examples: import numpy as np arr = np . arange ( 0 , 10 ) arr + arr array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) arr * arr array([ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81]) arr - arr array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) # Warning on division by zero, but not an error! # Just replaced with nan arr / arr / home / ggilmore / . local / lib / python3 . 6 / site - packages / ipykernel_launcher . py : 3 : RuntimeWarning : invalid value encountered in true_divide This is separate from the ipykernel package so we can avoid doing imports until array ( [ nan , 1 ., 1 ., 1 ., 1 ., 1 ., 1 ., 1 ., 1 ., 1 .] ) # Also warning, but not an error instead infinity 1 / arr /home/ggilmore/.local/lib/python3.6/site-packages/ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in true_divide array([ inf, 1. , 0.5 , 0.33333333, 0.25 , 0.2 , 0.16666667, 0.14285714, 0.125 , 0.11111111]) arr ** 3 array([ 0, 1, 8, 27, 64, 125, 216, 343, 512, 729])","title":"Arithmetic"},{"location":"python_intro/01_02_python_basics_numpy.html#universal-array-functions","text":"Numpy comes with many universal array functions , which are essentially just mathematical operations you can use to perform the operation across the array. Let's show some common ones: #Taking Square Roots np . sqrt ( arr ) array([0. , 1. , 1.41421356, 1.73205081, 2. , 2.23606798, 2.44948974, 2.64575131, 2.82842712, 3. ]) #Calcualting exponential (e^) np . exp ( arr ) array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01, 5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03, 2.98095799e+03, 8.10308393e+03]) np . max ( arr ) #same as arr.max() 9 np . sin ( arr ) array([ 0. , 0.84147098, 0.90929743, 0.14112001, -0.7568025 , -0.95892427, -0.2794155 , 0.6569866 , 0.98935825, 0.41211849]) np . log ( arr ) / home / ggilmore / . local / lib / python3 . 6 / site - packages / ipykernel_launcher . py : 1 : RuntimeWarning : divide by zero encountered in log \"\"\" Entry point for launching an IPython kernel. array ( [ - inf , 0 . , 0 . 69314718 , 1 . 09861229 , 1 . 38629436 , 1 . 60943791 , 1 . 79175947 , 1 . 94591015 , 2 . 07944154 , 2 . 19722458 ] )","title":"Universal Array Functions"},{"location":"python_intro/01_03_python_basics_pandas.html","text":"Pandas is a newer package built on top of NumPy, and provides an efficient implementation of a DataFrame . DataFrames are essentially multidimensional arrays with attached row and column labels, and often with heterogeneous types and/or missing data. As well as offering a convenient storage interface for labeled data, Pandas implements a number of powerful data operations familiar to users of both database frameworks and spreadsheet programs. At the very basic level, Pandas objects can be thought of as enhanced versions of NumPy structured arrays in which the rows and columns are identified with labels rather than simple integer indices. As we will see during the course of this chapter, Pandas provides a host of useful tools, methods, and functionality on top of the basic data structures, but nearly everything that follows will require an understanding of what these structures are. Thus, before we go any further, let's introduce these three fundamental Pandas data structures: the Series, DataFrame, and Index. Series \u00b6 The first main data type we will learn about for pandas is the Series data type. Let's import Pandas and explore the Series object. A Series is very similar to a NumPy array (in fact it is built on top of the NumPy array object). What differentiates the NumPy array from a Series, is that a Series can have axis labels, meaning it can be indexed by a label, instead of just a number location. It also doesn't need to hold numeric data, it can hold any arbitrary Python Object. Let's explore this concept through some examples: import numpy as np import pandas as pd You can convert a list, numpy array, or dictionary to a Series: labels = [ 'a' , 'b' , 'c' ] my_list = [ 10 , 20 , 30 ] arr = np . array ([ 10 , 20 , 30 ]) d = { 'a' : 10 , 'b' : 20 , 'c' : 30 } Using Lists \u00b6 pd . Series ( data = my_list ) 0 10 1 20 2 30 dtype : int64 pd . Series ( data = my_list , index = labels ) a 10 b 20 c 30 dtype : int64 pd . Series ( my_list , labels ) a 10 b 20 c 30 dtype : int64 NumPy Arrays \u00b6 pd . Series ( arr ) 0 10 1 20 2 30 dtype : int64 pd . Series ( arr , labels ) a 10 b 20 c 30 dtype : int64 Dictionary \u00b6 pd . Series ( d ) a 10 b 20 c 30 dtype : int64 Data in a Series \u00b6 A pandas Series can hold a variety of object types: pd . Series ( data = labels ) 0 a 1 b 2 c dtype : object # Even functions (although unlikely that you will use this) pd . Series ([ sum , print , len ]) 0 < built - in function sum > 1 < built - in function print > 2 < built - in function len > dtype : object Using an Index \u00b6 The key to using a Series is understanding its index. Pandas makes use of these index names or numbers by allowing for fast look ups of information (works like a hash table or dictionary). Let's see some examples of how to grab information from a Series. Let us create two sereis, ser1 and ser2: ser1 = pd . Series ([ 1 , 2 , 3 , 4 ], index = [ 'USA' , 'Germany' , 'USSR' , 'Japan' ]) ser1 USA 1 Germany 2 USSR 3 Japan 4 dtype : int64 ser2 = pd . Series ([ 1 , 2 , 5 , 4 ], index = [ 'USA' , 'Germany' , 'Italy' , 'Japan' ]) ser2 USA 1 Germany 2 Italy 5 Japan 4 dtype : int64 ser1 [ 'USA' ] 1 Operations are then also done based off of index: ser1 + ser2 Germany 4.0 Italy NaN Japan 8.0 USA 2.0 USSR NaN dtype : float64 Let's stop here for now and move on to DataFrames, which will expand on the concept of Series! DataFrames \u00b6 DataFrames are the workhorse of pandas and are directly inspired by the R programming language. We can think of a DataFrame as a bunch of Series objects put together to share the same index. Let's use pandas to explore this topic! import pandas as pd import numpy as np from numpy.random import randn np . random . seed ( 101 ) df = pd . DataFrame ( randn ( 5 , 4 ), index = 'A B C D E' . split (), columns = 'W X Y Z' . split ()) df W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 Selection and Indexing \u00b6 Let's learn the various methods to grab data from a DataFrame df [ 'W' ] A 2.706850 B 0.651118 C - 2.018168 D 0.188695 E 0.190794 Name : W , dtype : float64 # Pass a list of column names df [[ 'W' , 'Z' ]] W Z A 2.706850 0.503826 B 0.651118 0.605965 C -2.018168 -0.589001 D 0.188695 0.955057 E 0.190794 0.683509 #SQL Syntax (NOT RECOMMENDED!) df . W A 2.706850 B 0.651118 C -2.018168 D 0.188695 E 0.190794 Name: W, dtype: float64 DataFrame Columns are just Series type ( df [ 'W' ]) pandas . core . series . Series Creating a new column \u00b6 df [ 'new' ] = df [ 'W' ] + df [ 'Y' ] df W X Y Z new A 2.706850 0.628133 0.907969 0.503826 3.614819 B 0.651118 -0.319318 -0.848077 0.605965 -0.196959 C -2.018168 0.740122 0.528813 -0.589001 -1.489355 D 0.188695 -0.758872 -0.933237 0.955057 -0.744542 E 0.190794 1.978757 2.605967 0.683509 2.796762 Removing Columns \u00b6 df . drop ( 'new' , axis = 1 ) W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 #Not inplace unless specified! df W X Y Z new A 2.706850 0.628133 0.907969 0.503826 3.614819 B 0.651118 -0.319318 -0.848077 0.605965 -0.196959 C -2.018168 0.740122 0.528813 -0.589001 -1.489355 D 0.188695 -0.758872 -0.933237 0.955057 -0.744542 E 0.190794 1.978757 2.605967 0.683509 2.796762 df . drop ( 'new' , axis = 1 , inplace = True ) df W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 Can also drop rows this way: df . drop ( 'E' , axis = 0 ) W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 Selecting Rows \u00b6 df . loc [ 'A' ] W 2.706850 X 0.628133 Y 0.907969 Z 0.503826 Name : A , dtype : float64 Or select based off of position instead of label df . iloc [ 2 ] W - 2.018168 X 0.740122 Y 0.528813 Z - 0.589001 Name : C , dtype : float64 Selecting subset of rows and columns \u00b6 df . loc [ 'B' , 'Y' ] - 0.84807698340363147 df . loc [[ 'A' , 'B' ],[ 'W' , 'Y' ]] W Y A 2.706850 0.907969 B 0.651118 -0.848077 Conditional Selection \u00b6 An important feature of pandas is conditional selection using bracket notation, very similar to numpy: df W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 df > 0 W X Y Z A True True True True B True False False True C False True True False D True False False True E True True True True df [ df > 0 ] W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 NaN NaN 0.605965 C NaN 0.740122 0.528813 NaN D 0.188695 NaN NaN 0.955057 E 0.190794 1.978757 2.605967 0.683509 df [ df [ 'W' ] > 0 ] W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 df [ df [ 'W' ] > 0 ][ 'Y' ] A 0.907969 B - 0.848077 D - 0.933237 E 2.605967 Name : Y , dtype : float64 df [ df [ 'W' ] > 0 ][[ 'Y' , 'X' ]] Y X A 0.907969 0.628133 B -0.848077 -0.319318 D -0.933237 -0.758872 E 2.605967 1.978757 For two conditions you can use | and & with parenthesis: df [( df [ 'W' ] > 0 ) & ( df [ 'Y' ] > 1 )] W X Y Z E 0.190794 1.978757 2.605967 0.683509 More Index Details \u00b6 Let's discuss some more features of indexing, including resetting the index or setting it something else. We'll also talk about index hierarchy! df W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 #Reset to default 0,1...n index df . reset_index () index W X Y Z 0 A 2.706850 0.628133 0.907969 0.503826 1 B 0.651118 -0.319318 -0.848077 0.605965 2 C -2.018168 0.740122 0.528813 -0.589001 3 D 0.188695 -0.758872 -0.933237 0.955057 4 E 0.190794 1.978757 2.605967 0.683509 newind = 'CA NY WY OR CO' . split () df [ 'States' ] = newind df W X Y Z States A 2.706850 0.628133 0.907969 0.503826 CA B 0.651118 -0.319318 -0.848077 0.605965 NY C -2.018168 0.740122 0.528813 -0.589001 WY D 0.188695 -0.758872 -0.933237 0.955057 OR E 0.190794 1.978757 2.605967 0.683509 CO df . set_index ( 'States' ) W X Y Z States CA 2.706850 0.628133 0.907969 0.503826 NY 0.651118 -0.319318 -0.848077 0.605965 WY -2.018168 0.740122 0.528813 -0.589001 OR 0.188695 -0.758872 -0.933237 0.955057 CO 0.190794 1.978757 2.605967 0.683509 df W X Y Z States A 2.706850 0.628133 0.907969 0.503826 CA B 0.651118 -0.319318 -0.848077 0.605965 NY C -2.018168 0.740122 0.528813 -0.589001 WY D 0.188695 -0.758872 -0.933237 0.955057 OR E 0.190794 1.978757 2.605967 0.683509 CO df . set_index ( 'States' , inplace = True ) df W X Y Z States CA 2.706850 0.628133 0.907969 0.503826 NY 0.651118 -0.319318 -0.848077 0.605965 WY -2.018168 0.740122 0.528813 -0.589001 OR 0.188695 -0.758872 -0.933237 0.955057 CO 0.190794 1.978757 2.605967 0.683509 Multi-Index and Index Hierarchy \u00b6 Let us go over how to work with Multi-Index, first we'll create a quick example of what a Multi-Indexed DataFrame would look like: #Index Levels outside = [ 'G1' , 'G1' , 'G1' , 'G2' , 'G2' , 'G2' ] inside = [ 1 , 2 , 3 , 1 , 2 , 3 ] hier_index = list ( zip ( outside , inside )) hier_index = pd . MultiIndex . from_tuples ( hier_index ) hier_index MultiIndex ( levels = [[ 'G1' , 'G2' ], [ 1 , 2 , 3 ]], labels = [[ 0 , 0 , 0 , 1 , 1 , 1 ], [ 0 , 1 , 2 , 0 , 1 , 2 ]]) df = pd . DataFrame ( np . random . randn ( 6 , 2 ), index = hier_index , columns = [ 'A' , 'B' ]) df A B G1 1 0.153661 0.167638 2 -0.765930 0.962299 3 0.902826 -0.537909 G2 1 -1.549671 0.435253 2 1.259904 -0.447898 3 0.266207 0.412580 Now let's show how to index this! For index hierarchy we use df.loc[], if this was on the columns axis, you would just use normal bracket notation df[]. Calling one level of the index returns the sub-dataframe: df . loc [ 'G1' ] A B 1 0.153661 0.167638 2 -0.765930 0.962299 3 0.902826 -0.537909 df . loc [ 'G1' ] . loc [ 1 ] A 0.153661 B 0.167638 Name : 1 , dtype : float64 df . index . names FrozenList ([ None , None ]) df . index . names = [ 'Group' , 'Num' ] df A B Group Num G1 1 0.153661 0.167638 2 -0.765930 0.962299 3 0.902826 -0.537909 G2 1 -1.549671 0.435253 2 1.259904 -0.447898 3 0.266207 0.412580 df . xs ( 'G1' ) A B Num 1 0.153661 0.167638 2 -0.765930 0.962299 3 0.902826 -0.537909 df . xs ([ 'G1' , 1 ]) A 0.153661 B 0.167638 Name : ( G1 , 1 ), dtype : float64 df . xs ( 1 , level = 'Num' ) A B Group G1 0.153661 0.167638 G2 -1.549671 0.435253 Missing Data \u00b6 Let's show a few convenient methods to deal with Missing Data in pandas: import numpy as np import pandas as pd df = pd . DataFrame ({ 'A' :[ 1 , 2 , np . nan ], 'B' :[ 5 , np . nan , np . nan ], 'C' :[ 1 , 2 , 3 ]}) df A B C 0 1.0 5.0 1 1 2.0 NaN 2 2 NaN NaN 3 df . dropna () A B C 0 1.0 5.0 1 df . dropna ( axis = 1 ) C 0 1 1 2 2 3 df . dropna ( thresh = 2 ) A B C 0 1.0 5.0 1 1 2.0 NaN 2 df . fillna ( value = 'FILL VALUE' ) A B C 0 1 5 1 1 2 FILL VALUE 2 2 FILL VALUE FILL VALUE 3 df [ 'A' ] . fillna ( value = df [ 'A' ] . mean ()) 0 1.0 1 2.0 2 1.5 Name : A , dtype : float64 Groupby \u00b6 The groupby method allows you to group rows of data together and call aggregate functions import pandas as pd # Create dataframe data = { 'Company' :[ 'GOOG' , 'GOOG' , 'MSFT' , 'MSFT' , 'FB' , 'FB' ], 'Person' :[ 'Sam' , 'Charlie' , 'Amy' , 'Vanessa' , 'Carl' , 'Sarah' ], 'Sales' :[ 200 , 120 , 340 , 124 , 243 , 350 ]} df = pd . DataFrame ( data ) df Company Person Sales 0 GOOG Sam 200 1 GOOG Charlie 120 2 MSFT Amy 340 3 MSFT Vanessa 124 4 FB Carl 243 5 FB Sarah 350 Now you can use the .groupby() method to group rows together based off of a column name. For instance let's group based off of Company. This will create a DataFrameGroupBy object: df . groupby ( 'Company' ) You can save this object as a new variable: by_comp = df . groupby ( \"Company\" ) And then call aggregate methods off the object: by_comp . mean () Sales Company FB 296.5 GOOG 160.0 MSFT 232.0 df . groupby ( 'Company' ) . mean () Sales Company FB 296.5 GOOG 160.0 MSFT 232.0 More examples of aggregate methods: by_comp . std () Sales Company FB 75.660426 GOOG 56.568542 MSFT 152.735065 by_comp . min () Person Sales Company FB Carl 243 GOOG Charlie 120 MSFT Amy 124 by_comp . max () Person Sales Company FB Sarah 350 GOOG Sam 200 MSFT Vanessa 340 by_comp . count () Person Sales Company FB 2 2 GOOG 2 2 MSFT 2 2 by_comp . describe () Sales Company FB count 2.000000 mean 296.500000 std 75.660426 min 243.000000 25% 269.750000 50% 296.500000 75% 323.250000 max 350.000000 GOOG count 2.000000 mean 160.000000 std 56.568542 min 120.000000 25% 140.000000 50% 160.000000 75% 180.000000 max 200.000000 MSFT count 2.000000 mean 232.000000 std 152.735065 min 124.000000 25% 178.000000 50% 232.000000 75% 286.000000 max 340.000000 by_comp . describe () . transpose () Company FB GOOG MSFT count mean std min 25% 50% 75% max count mean ... 75% max count mean std min 25% 50% 75% max Sales 2.0 296.5 75.660426 243.0 269.75 296.5 323.25 350.0 2.0 160.0 ... 180.0 200.0 2.0 232.0 152.735065 124.0 178.0 232.0 286.0 340.0 1 rows \u00d7 24 columns by_comp . describe () . transpose ()[ 'GOOG' ] count mean std min 25% 50% 75% max Sales 2.0 160.0 56.568542 120.0 140.0 160.0 180.0 200.0 Merging, Joining, and Concatenating \u00b6 There are 3 main ways of combining DataFrames together: Merging, Joining and Concatenating. In this lecture we will discuss these 3 methods with examples. Example DataFrames \u00b6 import pandas as pd df1 = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = [ 0 , 1 , 2 , 3 ]) df1 A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 df2 = pd . DataFrame ({ 'A' : [ 'A4' , 'A5' , 'A6' , 'A7' ], 'B' : [ 'B4' , 'B5' , 'B6' , 'B7' ], 'C' : [ 'C4' , 'C5' , 'C6' , 'C7' ], 'D' : [ 'D4' , 'D5' , 'D6' , 'D7' ]}, index = [ 4 , 5 , 6 , 7 ]) df2 A B C D 0 A4 B4 C4 D4 1 A5 B5 C5 D5 2 A6 B6 C6 D6 3 A7 B7 C7 D7 df3 = pd . DataFrame ({ 'A' : [ 'A8' , 'A9' , 'A10' , 'A11' ], 'B' : [ 'B8' , 'B9' , 'B10' , 'B11' ], 'C' : [ 'C8' , 'C9' , 'C10' , 'C11' ], 'D' : [ 'D8' , 'D9' , 'D10' , 'D11' ]}, index = [ 8 , 9 , 10 , 11 ]) print ( df3 ) | | A | B | C | D | |-|:-|:-|:-|:- |0 |A8 |B8 |C8 |D8 | |1 |A9 |B9 |C9 |D9 | |2 |A10 |B10 |C10 |D10 | |3 |A11 |B11 |C11 |D11 | Concatenation \u00b6 Concatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use pd.concat and pass in a list of DataFrames to concatenate together: pd . concat ([ df1 , df2 , df3 ]) A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 8 A8 B8 C8 D8 9 A9 B9 C9 D9 10 A10 B10 C10 D10 11 A11 B11 C11 D11 pd . concat ([ df1 , df2 , df3 ], axis = 1 ) A B C D A B C D A B C D 0 A0 B0 C0 D0 NaN NaN NaN NaN NaN NaN NaN NaN 1 A1 B1 C1 D1 NaN NaN NaN NaN NaN NaN NaN NaN 2 A2 B2 C2 D2 NaN NaN NaN NaN NaN NaN NaN NaN 3 A3 B3 C3 D3 NaN NaN NaN NaN NaN NaN NaN NaN 4 NaN NaN NaN NaN A4 B4 C4 D4 NaN NaN NaN NaN 5 NaN NaN NaN NaN A5 B5 C5 D5 NaN NaN NaN NaN 6 NaN NaN NaN NaN A6 B6 C6 D6 NaN NaN NaN NaN 7 NaN NaN NaN NaN A7 B7 C7 D7 NaN NaN NaN NaN 8 NaN NaN NaN NaN NaN NaN NaN NaN A8 B8 C8 D8 9 NaN NaN NaN NaN NaN NaN NaN NaN A9 B9 C9 D9 10 NaN NaN NaN NaN NaN NaN NaN NaN A10 B10 C10 D10 11 NaN NaN NaN NaN NaN NaN NaN NaN A11 B11 C11 D11 Example DataFrames \u00b6 left = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) left A B key 0 A0 B0 K0 1 A1 B1 K1 2 A2 B2 K2 3 A3 B3 K3 right C D key 0 C0 D0 K0 1 C1 D1 K1 2 C2 D2 K2 3 C3 D3 K3 Merging \u00b6 The merge function allows you to merge DataFrames together using a similar logic as merging SQL Tables together. For example: pd . merge ( left , right , how = 'inner' , on = 'key' ) A B key C D 0 A0 B0 K0 C0 D0 1 A1 B1 K1 C1 D1 2 A2 B2 K2 C2 D2 3 A3 B3 K3 C3 D3 Or to show a more complicated example: left = pd . DataFrame ({ 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key1' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K0' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) pd . merge ( left , right , on = [ 'key1' , 'key2' ]) A B key1 key2 C D 0 A0 B0 K0 K0 C0 D0 1 A2 B2 K1 K0 C1 D1 2 A2 B2 K1 K0 C2 D2 pd . merge ( left , right , how = 'outer' , on = [ 'key1' , 'key2' ]) A B key1 key2 C D 0 A0 B0 K0 K0 C0 D0 1 A1 B1 K0 K1 NaN NaN 2 A2 B2 K1 K0 C1 D1 3 A2 B2 K1 K0 C2 D2 4 A3 B3 K2 K1 NaN NaN 5 NaN NaN K2 K0 C3 D3 pd . merge ( left , right , how = 'right' , on = [ 'key1' , 'key2' ]) A B key1 key2 C D 0 A0 B0 K0 K0 C0 D0 1 A2 B2 K1 K0 C1 D1 2 A2 B2 K1 K0 C2 D2 3 NaN NaN K2 K0 C3 D3 pd . merge ( left , right , how = 'left' , on = [ 'key1' , 'key2' ]) A B key1 key2 C D 0 A0 B0 K0 K0 C0 D0 1 A1 B1 K0 K1 NaN NaN 2 A2 B2 K1 K0 C1 D1 3 A2 B2 K1 K0 C2 D2 4 A3 B3 K2 K1 NaN NaN Joining \u00b6 Joining is a convenient method for combining the columns of two potentially differently-indexed DataFrames into a single result DataFrame. left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = [ 'K0' , 'K1' , 'K2' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D2' , 'D3' ]}, index = [ 'K0' , 'K2' , 'K3' ]) left . join ( right ) A B C D K0 A0 B0 C0 D0 K1 A1 B1 NaN NaN K2 A2 B2 C2 D2 left . join ( right , how = 'outer' ) A B C D K0 A0 B0 C0 D0 K1 A1 B1 NaN NaN K2 A2 B2 C2 D2 K3 NaN NaN C3 D3 Operations \u00b6 There are lots of operations with pandas that will be really useful to you, but don't fall into any distinct category. import pandas as pd df = pd . DataFrame ({ 'col1' :[ 1 , 2 , 3 , 4 ], 'col2' :[ 444 , 555 , 666 , 444 ], 'col3' :[ 'abc' , 'def' , 'ghi' , 'xyz' ]}) df . head () col1 col2 col3 0 1 444 abc 1 2 555 def 2 3 666 ghi 3 4 444 xyz Info on Unique Values \u00b6 df [ 'col2' ] . unique () array ([ 444 , 555 , 666 ]) df [ 'col2' ] . nunique () 3 df [ 'col2' ] . value_counts () 444 2 555 1 666 1 Name : col2 , dtype : int64 Selecting Data \u00b6 #Select from DataFrame using criteria from multiple columns newdf = df [( df [ 'col1' ] > 2 ) & ( df [ 'col2' ] == 444 )] newdf col1 col2 col3 3 4 444 xyz Applying Functions \u00b6 def times2 ( x ): return x * 2 df [ 'col1' ] . apply ( times2 ) 0 2 1 4 2 6 3 8 Name : col1 , dtype : int64 df [ 'col3' ] . apply ( len ) 0 3 1 3 2 3 3 3 Name : col3 , dtype : int64 df [ 'col1' ] . sum () 10 Permanently Removing a Column \u00b6 del df [ 'col1' ] df col2 col3 0 444 abc 1 555 def 2 666 ghi 3 444 xyz Get column and index names \u00b6 df . columns Index ([ 'col2' , 'col3' ], dtype = 'object' ) df . index RangeIndex ( start = 0 , stop = 4 , step = 1 ) Sorting and Ordering a DataFrame \u00b6 df col2 col3 0 444 abc 1 555 def 2 666 ghi 3 444 xyz df . sort_values ( by = 'col2' ) #inplace=False by default col2 col3 0 444 abc 3 444 xyz 1 555 def 2 666 ghi Find Null Values or Check for Null Values \u00b6 df . isnull () col2 col3 0 False False 1 False False 2 False False 3 False False #Drop rows with NaN Values df . dropna () col2 col3 0 444 abc 1 555 def 2 666 ghi 3 444 xyz Filling in NaN values with something else \u00b6 import numpy as np df = pd . DataFrame ({ 'col1' :[ 1 , 2 , 3 , np . nan ], 'col2' :[ np . nan , 555 , 666 , 444 ], 'col3' :[ 'abc' , 'def' , 'ghi' , 'xyz' ]}) df . head () col1 col2 col3 0 1.0 NaN abc 1 2.0 555.0 def 2 3.0 666.0 ghi 3 NaN 444.0 xyz df . fillna ( 'FILL' ) col1 col2 col3 0 1 FILL abc 1 2 555 def 2 3 666 ghi 3 FILL 444 xyz data = { 'A' :[ 'foo' , 'foo' , 'foo' , 'bar' , 'bar' , 'bar' ], 'B' :[ 'one' , 'one' , 'two' , 'two' , 'one' , 'one' ], 'C' :[ 'x' , 'y' , 'x' , 'y' , 'x' , 'y' ], 'D' :[ 1 , 3 , 2 , 5 , 4 , 1 ]} df = pd . DataFrame ( data ) df A B C D 0 foo one x 1 1 foo one y 3 2 foo two x 2 3 bar two y 5 4 bar one x 4 5 bar one y 1 df . pivot_table ( values = 'D' , index = [ 'A' , 'B' ], columns = [ 'C' ]) C x y A B bar one 4.0 1.0 two NaN 5.0 foo one 1.0 3.0 two 2.0 NaN CSV Data \u00b6 CSV Input \u00b6 df = pd . read_csv ( 'example' ) df a b c d 0 0 1 2 3 1 4 5 6 7 2 8 9 10 11 3 12 13 14 15 CSV Output \u00b6 df . to_csv ( 'example' , index = False ) Excel Data \u00b6 Pandas can read and write excel files, keep in mind, this only imports data. Not formulas or images, having images or macros may cause this read_excel method to crash. Excel Input \u00b6 pd . read_excel ( 'Excel_Sample.xlsx' , sheetname = 'Sheet1' ) a b c d 0 0 1 2 3 1 4 5 6 7 2 8 9 10 11 3 12 13 14 15 Excel Output \u00b6 df . to_excel ( 'Excel_Sample.xlsx' , sheet_name = 'Sheet1' ) HTML Data \u00b6 You may need to install htmllib5,lxml, and BeautifulSoup4. In your terminal/command prompt run: python -m pip install lxml python -m pip install html5lib python -m pip install BeautifulSoup4 Pandas can read table tabs off of html. HTML Input \u00b6 Pandas read_html function will read tables off of a webpage and return a list of DataFrame objects: df = pd . read_html ( 'http://www.fdic.gov/bank/individual/failed/banklist.html' ) df [ 0 ] Bank Name City ST CERT Acquiring Institution Closing Date Updated Date Loss Share Type Agreement Terminated Termination Date 0 First CornerStone Bank King of Prussia PA 35312 First-Citizens Bank & Trust Company May 6, 2016 July 12, 2016 none NaN NaN 1 Trust Company Bank Memphis TN 9956 The Bank of Fayette County April 29, 2016 August 4, 2016 none NaN NaN 2 North Milwaukee State Bank Milwaukee WI 20364 First-Citizens Bank & Trust Company March 11, 2016 June 16, 2016 none NaN NaN 3 Hometown National Bank Longview WA 35156 Twin City Bank October 2, 2015 April 13, 2016 none NaN NaN 4 The Bank of Georgia Peachtree City GA 35259 Fidelity Bank October 2, 2015 April 13, 2016 none NaN NaN ... ... ... ... ... ... ... ... ... ... ... 543 National State Bank of Metropolis Metropolis IL 3815 Banterra Bank of Marion December 14, 2000 March 17, 2005 none NaN NaN 544 Bank of Honolulu Honolulu HI 21029 Bank of the Orient October 13, 2000 March 17, 2005 none NaN NaN SQL Data \u00b6 Note If you are completely unfamiliar with SQL you can check out my other course: \"Complete SQL Bootcamp\" to learn SQL. The pandas.io.sql module provides a collection of query wrappers to both facilitate data retrieval and to reduce dependency on DB-specific API. Database abstraction is provided by SQLAlchemy if installed. In addition you will need a driver library for your database. Examples of such drivers are psycopg2 for PostgreSQL or pymysql for MySQL. For SQLite this is included in Python\u2019s standard library by default. You can find an overview of supported drivers for each SQL dialect in the SQLAlchemy docs. If SQLAlchemy is not installed, a fallback is only provided for sqlite (and for mysql for backwards compatibility, but this is deprecated and will be removed in a future version). This mode requires a Python database adapter which respect the Python DB-API. See also some cookbook examples for some advanced strategies. The key functions are: read_sql_table(table_name, con[, schema, ...]) Read SQL database table into a DataFrame. read_sql_query(sql, con[, index_col, ...]) Read SQL query into a DataFrame. read_sql(sql, con[, index_col, ...]) Read SQL query or database table into a DataFrame. DataFrame.to_sql(name, con[, flavor, ...]) Write records stored in a DataFrame to a SQL database. from sqlalchemy import create_engine engine = create_engine ( 'sqlite:///:memory:' ) df . to_sql ( 'data' , engine ) sql_df = pd . read_sql ( 'data' , con = engine ) sql_df index a b c d 0 0 0 1 2 3 1 1 4 5 6 7 2 2 8 9 10 11 3 3 12 13 14 15","title":"Pandas"},{"location":"python_intro/01_03_python_basics_pandas.html#series","text":"The first main data type we will learn about for pandas is the Series data type. Let's import Pandas and explore the Series object. A Series is very similar to a NumPy array (in fact it is built on top of the NumPy array object). What differentiates the NumPy array from a Series, is that a Series can have axis labels, meaning it can be indexed by a label, instead of just a number location. It also doesn't need to hold numeric data, it can hold any arbitrary Python Object. Let's explore this concept through some examples: import numpy as np import pandas as pd You can convert a list, numpy array, or dictionary to a Series: labels = [ 'a' , 'b' , 'c' ] my_list = [ 10 , 20 , 30 ] arr = np . array ([ 10 , 20 , 30 ]) d = { 'a' : 10 , 'b' : 20 , 'c' : 30 }","title":"Series"},{"location":"python_intro/01_03_python_basics_pandas.html#using-lists","text":"pd . Series ( data = my_list ) 0 10 1 20 2 30 dtype : int64 pd . Series ( data = my_list , index = labels ) a 10 b 20 c 30 dtype : int64 pd . Series ( my_list , labels ) a 10 b 20 c 30 dtype : int64","title":"Using Lists"},{"location":"python_intro/01_03_python_basics_pandas.html#numpy-arrays","text":"pd . Series ( arr ) 0 10 1 20 2 30 dtype : int64 pd . Series ( arr , labels ) a 10 b 20 c 30 dtype : int64","title":"NumPy Arrays"},{"location":"python_intro/01_03_python_basics_pandas.html#dictionary","text":"pd . Series ( d ) a 10 b 20 c 30 dtype : int64","title":"Dictionary"},{"location":"python_intro/01_03_python_basics_pandas.html#data-in-a-series","text":"A pandas Series can hold a variety of object types: pd . Series ( data = labels ) 0 a 1 b 2 c dtype : object # Even functions (although unlikely that you will use this) pd . Series ([ sum , print , len ]) 0 < built - in function sum > 1 < built - in function print > 2 < built - in function len > dtype : object","title":"Data in a Series"},{"location":"python_intro/01_03_python_basics_pandas.html#using-an-index","text":"The key to using a Series is understanding its index. Pandas makes use of these index names or numbers by allowing for fast look ups of information (works like a hash table or dictionary). Let's see some examples of how to grab information from a Series. Let us create two sereis, ser1 and ser2: ser1 = pd . Series ([ 1 , 2 , 3 , 4 ], index = [ 'USA' , 'Germany' , 'USSR' , 'Japan' ]) ser1 USA 1 Germany 2 USSR 3 Japan 4 dtype : int64 ser2 = pd . Series ([ 1 , 2 , 5 , 4 ], index = [ 'USA' , 'Germany' , 'Italy' , 'Japan' ]) ser2 USA 1 Germany 2 Italy 5 Japan 4 dtype : int64 ser1 [ 'USA' ] 1 Operations are then also done based off of index: ser1 + ser2 Germany 4.0 Italy NaN Japan 8.0 USA 2.0 USSR NaN dtype : float64 Let's stop here for now and move on to DataFrames, which will expand on the concept of Series!","title":"Using an Index"},{"location":"python_intro/01_03_python_basics_pandas.html#dataframes","text":"DataFrames are the workhorse of pandas and are directly inspired by the R programming language. We can think of a DataFrame as a bunch of Series objects put together to share the same index. Let's use pandas to explore this topic! import pandas as pd import numpy as np from numpy.random import randn np . random . seed ( 101 ) df = pd . DataFrame ( randn ( 5 , 4 ), index = 'A B C D E' . split (), columns = 'W X Y Z' . split ()) df W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509","title":"DataFrames"},{"location":"python_intro/01_03_python_basics_pandas.html#selection-and-indexing","text":"Let's learn the various methods to grab data from a DataFrame df [ 'W' ] A 2.706850 B 0.651118 C - 2.018168 D 0.188695 E 0.190794 Name : W , dtype : float64 # Pass a list of column names df [[ 'W' , 'Z' ]] W Z A 2.706850 0.503826 B 0.651118 0.605965 C -2.018168 -0.589001 D 0.188695 0.955057 E 0.190794 0.683509 #SQL Syntax (NOT RECOMMENDED!) df . W A 2.706850 B 0.651118 C -2.018168 D 0.188695 E 0.190794 Name: W, dtype: float64 DataFrame Columns are just Series type ( df [ 'W' ]) pandas . core . series . Series","title":"Selection and Indexing"},{"location":"python_intro/01_03_python_basics_pandas.html#creating-a-new-column","text":"df [ 'new' ] = df [ 'W' ] + df [ 'Y' ] df W X Y Z new A 2.706850 0.628133 0.907969 0.503826 3.614819 B 0.651118 -0.319318 -0.848077 0.605965 -0.196959 C -2.018168 0.740122 0.528813 -0.589001 -1.489355 D 0.188695 -0.758872 -0.933237 0.955057 -0.744542 E 0.190794 1.978757 2.605967 0.683509 2.796762","title":"Creating a new column"},{"location":"python_intro/01_03_python_basics_pandas.html#removing-columns","text":"df . drop ( 'new' , axis = 1 ) W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 #Not inplace unless specified! df W X Y Z new A 2.706850 0.628133 0.907969 0.503826 3.614819 B 0.651118 -0.319318 -0.848077 0.605965 -0.196959 C -2.018168 0.740122 0.528813 -0.589001 -1.489355 D 0.188695 -0.758872 -0.933237 0.955057 -0.744542 E 0.190794 1.978757 2.605967 0.683509 2.796762 df . drop ( 'new' , axis = 1 , inplace = True ) df W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 Can also drop rows this way: df . drop ( 'E' , axis = 0 ) W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057","title":"Removing Columns"},{"location":"python_intro/01_03_python_basics_pandas.html#selecting-rows","text":"df . loc [ 'A' ] W 2.706850 X 0.628133 Y 0.907969 Z 0.503826 Name : A , dtype : float64 Or select based off of position instead of label df . iloc [ 2 ] W - 2.018168 X 0.740122 Y 0.528813 Z - 0.589001 Name : C , dtype : float64","title":"Selecting Rows"},{"location":"python_intro/01_03_python_basics_pandas.html#selecting-subset-of-rows-and-columns","text":"df . loc [ 'B' , 'Y' ] - 0.84807698340363147 df . loc [[ 'A' , 'B' ],[ 'W' , 'Y' ]] W Y A 2.706850 0.907969 B 0.651118 -0.848077","title":"Selecting subset of rows and columns"},{"location":"python_intro/01_03_python_basics_pandas.html#conditional-selection","text":"An important feature of pandas is conditional selection using bracket notation, very similar to numpy: df W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 df > 0 W X Y Z A True True True True B True False False True C False True True False D True False False True E True True True True df [ df > 0 ] W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 NaN NaN 0.605965 C NaN 0.740122 0.528813 NaN D 0.188695 NaN NaN 0.955057 E 0.190794 1.978757 2.605967 0.683509 df [ df [ 'W' ] > 0 ] W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 df [ df [ 'W' ] > 0 ][ 'Y' ] A 0.907969 B - 0.848077 D - 0.933237 E 2.605967 Name : Y , dtype : float64 df [ df [ 'W' ] > 0 ][[ 'Y' , 'X' ]] Y X A 0.907969 0.628133 B -0.848077 -0.319318 D -0.933237 -0.758872 E 2.605967 1.978757 For two conditions you can use | and & with parenthesis: df [( df [ 'W' ] > 0 ) & ( df [ 'Y' ] > 1 )] W X Y Z E 0.190794 1.978757 2.605967 0.683509","title":"Conditional Selection"},{"location":"python_intro/01_03_python_basics_pandas.html#more-index-details","text":"Let's discuss some more features of indexing, including resetting the index or setting it something else. We'll also talk about index hierarchy! df W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 #Reset to default 0,1...n index df . reset_index () index W X Y Z 0 A 2.706850 0.628133 0.907969 0.503826 1 B 0.651118 -0.319318 -0.848077 0.605965 2 C -2.018168 0.740122 0.528813 -0.589001 3 D 0.188695 -0.758872 -0.933237 0.955057 4 E 0.190794 1.978757 2.605967 0.683509 newind = 'CA NY WY OR CO' . split () df [ 'States' ] = newind df W X Y Z States A 2.706850 0.628133 0.907969 0.503826 CA B 0.651118 -0.319318 -0.848077 0.605965 NY C -2.018168 0.740122 0.528813 -0.589001 WY D 0.188695 -0.758872 -0.933237 0.955057 OR E 0.190794 1.978757 2.605967 0.683509 CO df . set_index ( 'States' ) W X Y Z States CA 2.706850 0.628133 0.907969 0.503826 NY 0.651118 -0.319318 -0.848077 0.605965 WY -2.018168 0.740122 0.528813 -0.589001 OR 0.188695 -0.758872 -0.933237 0.955057 CO 0.190794 1.978757 2.605967 0.683509 df W X Y Z States A 2.706850 0.628133 0.907969 0.503826 CA B 0.651118 -0.319318 -0.848077 0.605965 NY C -2.018168 0.740122 0.528813 -0.589001 WY D 0.188695 -0.758872 -0.933237 0.955057 OR E 0.190794 1.978757 2.605967 0.683509 CO df . set_index ( 'States' , inplace = True ) df W X Y Z States CA 2.706850 0.628133 0.907969 0.503826 NY 0.651118 -0.319318 -0.848077 0.605965 WY -2.018168 0.740122 0.528813 -0.589001 OR 0.188695 -0.758872 -0.933237 0.955057 CO 0.190794 1.978757 2.605967 0.683509","title":"More Index Details"},{"location":"python_intro/01_03_python_basics_pandas.html#multi-index-and-index-hierarchy","text":"Let us go over how to work with Multi-Index, first we'll create a quick example of what a Multi-Indexed DataFrame would look like: #Index Levels outside = [ 'G1' , 'G1' , 'G1' , 'G2' , 'G2' , 'G2' ] inside = [ 1 , 2 , 3 , 1 , 2 , 3 ] hier_index = list ( zip ( outside , inside )) hier_index = pd . MultiIndex . from_tuples ( hier_index ) hier_index MultiIndex ( levels = [[ 'G1' , 'G2' ], [ 1 , 2 , 3 ]], labels = [[ 0 , 0 , 0 , 1 , 1 , 1 ], [ 0 , 1 , 2 , 0 , 1 , 2 ]]) df = pd . DataFrame ( np . random . randn ( 6 , 2 ), index = hier_index , columns = [ 'A' , 'B' ]) df A B G1 1 0.153661 0.167638 2 -0.765930 0.962299 3 0.902826 -0.537909 G2 1 -1.549671 0.435253 2 1.259904 -0.447898 3 0.266207 0.412580 Now let's show how to index this! For index hierarchy we use df.loc[], if this was on the columns axis, you would just use normal bracket notation df[]. Calling one level of the index returns the sub-dataframe: df . loc [ 'G1' ] A B 1 0.153661 0.167638 2 -0.765930 0.962299 3 0.902826 -0.537909 df . loc [ 'G1' ] . loc [ 1 ] A 0.153661 B 0.167638 Name : 1 , dtype : float64 df . index . names FrozenList ([ None , None ]) df . index . names = [ 'Group' , 'Num' ] df A B Group Num G1 1 0.153661 0.167638 2 -0.765930 0.962299 3 0.902826 -0.537909 G2 1 -1.549671 0.435253 2 1.259904 -0.447898 3 0.266207 0.412580 df . xs ( 'G1' ) A B Num 1 0.153661 0.167638 2 -0.765930 0.962299 3 0.902826 -0.537909 df . xs ([ 'G1' , 1 ]) A 0.153661 B 0.167638 Name : ( G1 , 1 ), dtype : float64 df . xs ( 1 , level = 'Num' ) A B Group G1 0.153661 0.167638 G2 -1.549671 0.435253","title":"Multi-Index and Index Hierarchy"},{"location":"python_intro/01_03_python_basics_pandas.html#missing-data","text":"Let's show a few convenient methods to deal with Missing Data in pandas: import numpy as np import pandas as pd df = pd . DataFrame ({ 'A' :[ 1 , 2 , np . nan ], 'B' :[ 5 , np . nan , np . nan ], 'C' :[ 1 , 2 , 3 ]}) df A B C 0 1.0 5.0 1 1 2.0 NaN 2 2 NaN NaN 3 df . dropna () A B C 0 1.0 5.0 1 df . dropna ( axis = 1 ) C 0 1 1 2 2 3 df . dropna ( thresh = 2 ) A B C 0 1.0 5.0 1 1 2.0 NaN 2 df . fillna ( value = 'FILL VALUE' ) A B C 0 1 5 1 1 2 FILL VALUE 2 2 FILL VALUE FILL VALUE 3 df [ 'A' ] . fillna ( value = df [ 'A' ] . mean ()) 0 1.0 1 2.0 2 1.5 Name : A , dtype : float64","title":"Missing Data"},{"location":"python_intro/01_03_python_basics_pandas.html#groupby","text":"The groupby method allows you to group rows of data together and call aggregate functions import pandas as pd # Create dataframe data = { 'Company' :[ 'GOOG' , 'GOOG' , 'MSFT' , 'MSFT' , 'FB' , 'FB' ], 'Person' :[ 'Sam' , 'Charlie' , 'Amy' , 'Vanessa' , 'Carl' , 'Sarah' ], 'Sales' :[ 200 , 120 , 340 , 124 , 243 , 350 ]} df = pd . DataFrame ( data ) df Company Person Sales 0 GOOG Sam 200 1 GOOG Charlie 120 2 MSFT Amy 340 3 MSFT Vanessa 124 4 FB Carl 243 5 FB Sarah 350 Now you can use the .groupby() method to group rows together based off of a column name. For instance let's group based off of Company. This will create a DataFrameGroupBy object: df . groupby ( 'Company' ) You can save this object as a new variable: by_comp = df . groupby ( \"Company\" ) And then call aggregate methods off the object: by_comp . mean () Sales Company FB 296.5 GOOG 160.0 MSFT 232.0 df . groupby ( 'Company' ) . mean () Sales Company FB 296.5 GOOG 160.0 MSFT 232.0 More examples of aggregate methods: by_comp . std () Sales Company FB 75.660426 GOOG 56.568542 MSFT 152.735065 by_comp . min () Person Sales Company FB Carl 243 GOOG Charlie 120 MSFT Amy 124 by_comp . max () Person Sales Company FB Sarah 350 GOOG Sam 200 MSFT Vanessa 340 by_comp . count () Person Sales Company FB 2 2 GOOG 2 2 MSFT 2 2 by_comp . describe () Sales Company FB count 2.000000 mean 296.500000 std 75.660426 min 243.000000 25% 269.750000 50% 296.500000 75% 323.250000 max 350.000000 GOOG count 2.000000 mean 160.000000 std 56.568542 min 120.000000 25% 140.000000 50% 160.000000 75% 180.000000 max 200.000000 MSFT count 2.000000 mean 232.000000 std 152.735065 min 124.000000 25% 178.000000 50% 232.000000 75% 286.000000 max 340.000000 by_comp . describe () . transpose () Company FB GOOG MSFT count mean std min 25% 50% 75% max count mean ... 75% max count mean std min 25% 50% 75% max Sales 2.0 296.5 75.660426 243.0 269.75 296.5 323.25 350.0 2.0 160.0 ... 180.0 200.0 2.0 232.0 152.735065 124.0 178.0 232.0 286.0 340.0 1 rows \u00d7 24 columns by_comp . describe () . transpose ()[ 'GOOG' ] count mean std min 25% 50% 75% max Sales 2.0 160.0 56.568542 120.0 140.0 160.0 180.0 200.0","title":"Groupby"},{"location":"python_intro/01_03_python_basics_pandas.html#merging-joining-and-concatenating","text":"There are 3 main ways of combining DataFrames together: Merging, Joining and Concatenating. In this lecture we will discuss these 3 methods with examples.","title":"Merging, Joining, and Concatenating"},{"location":"python_intro/01_03_python_basics_pandas.html#example-dataframes","text":"import pandas as pd df1 = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = [ 0 , 1 , 2 , 3 ]) df1 A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 df2 = pd . DataFrame ({ 'A' : [ 'A4' , 'A5' , 'A6' , 'A7' ], 'B' : [ 'B4' , 'B5' , 'B6' , 'B7' ], 'C' : [ 'C4' , 'C5' , 'C6' , 'C7' ], 'D' : [ 'D4' , 'D5' , 'D6' , 'D7' ]}, index = [ 4 , 5 , 6 , 7 ]) df2 A B C D 0 A4 B4 C4 D4 1 A5 B5 C5 D5 2 A6 B6 C6 D6 3 A7 B7 C7 D7 df3 = pd . DataFrame ({ 'A' : [ 'A8' , 'A9' , 'A10' , 'A11' ], 'B' : [ 'B8' , 'B9' , 'B10' , 'B11' ], 'C' : [ 'C8' , 'C9' , 'C10' , 'C11' ], 'D' : [ 'D8' , 'D9' , 'D10' , 'D11' ]}, index = [ 8 , 9 , 10 , 11 ]) print ( df3 ) | | A | B | C | D | |-|:-|:-|:-|:- |0 |A8 |B8 |C8 |D8 | |1 |A9 |B9 |C9 |D9 | |2 |A10 |B10 |C10 |D10 | |3 |A11 |B11 |C11 |D11 |","title":"Example DataFrames"},{"location":"python_intro/01_03_python_basics_pandas.html#concatenation","text":"Concatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use pd.concat and pass in a list of DataFrames to concatenate together: pd . concat ([ df1 , df2 , df3 ]) A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 8 A8 B8 C8 D8 9 A9 B9 C9 D9 10 A10 B10 C10 D10 11 A11 B11 C11 D11 pd . concat ([ df1 , df2 , df3 ], axis = 1 ) A B C D A B C D A B C D 0 A0 B0 C0 D0 NaN NaN NaN NaN NaN NaN NaN NaN 1 A1 B1 C1 D1 NaN NaN NaN NaN NaN NaN NaN NaN 2 A2 B2 C2 D2 NaN NaN NaN NaN NaN NaN NaN NaN 3 A3 B3 C3 D3 NaN NaN NaN NaN NaN NaN NaN NaN 4 NaN NaN NaN NaN A4 B4 C4 D4 NaN NaN NaN NaN 5 NaN NaN NaN NaN A5 B5 C5 D5 NaN NaN NaN NaN 6 NaN NaN NaN NaN A6 B6 C6 D6 NaN NaN NaN NaN 7 NaN NaN NaN NaN A7 B7 C7 D7 NaN NaN NaN NaN 8 NaN NaN NaN NaN NaN NaN NaN NaN A8 B8 C8 D8 9 NaN NaN NaN NaN NaN NaN NaN NaN A9 B9 C9 D9 10 NaN NaN NaN NaN NaN NaN NaN NaN A10 B10 C10 D10 11 NaN NaN NaN NaN NaN NaN NaN NaN A11 B11 C11 D11","title":"Concatenation"},{"location":"python_intro/01_03_python_basics_pandas.html#example-dataframes_1","text":"left = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) left A B key 0 A0 B0 K0 1 A1 B1 K1 2 A2 B2 K2 3 A3 B3 K3 right C D key 0 C0 D0 K0 1 C1 D1 K1 2 C2 D2 K2 3 C3 D3 K3","title":"Example DataFrames"},{"location":"python_intro/01_03_python_basics_pandas.html#merging","text":"The merge function allows you to merge DataFrames together using a similar logic as merging SQL Tables together. For example: pd . merge ( left , right , how = 'inner' , on = 'key' ) A B key C D 0 A0 B0 K0 C0 D0 1 A1 B1 K1 C1 D1 2 A2 B2 K2 C2 D2 3 A3 B3 K3 C3 D3 Or to show a more complicated example: left = pd . DataFrame ({ 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key1' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K0' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) pd . merge ( left , right , on = [ 'key1' , 'key2' ]) A B key1 key2 C D 0 A0 B0 K0 K0 C0 D0 1 A2 B2 K1 K0 C1 D1 2 A2 B2 K1 K0 C2 D2 pd . merge ( left , right , how = 'outer' , on = [ 'key1' , 'key2' ]) A B key1 key2 C D 0 A0 B0 K0 K0 C0 D0 1 A1 B1 K0 K1 NaN NaN 2 A2 B2 K1 K0 C1 D1 3 A2 B2 K1 K0 C2 D2 4 A3 B3 K2 K1 NaN NaN 5 NaN NaN K2 K0 C3 D3 pd . merge ( left , right , how = 'right' , on = [ 'key1' , 'key2' ]) A B key1 key2 C D 0 A0 B0 K0 K0 C0 D0 1 A2 B2 K1 K0 C1 D1 2 A2 B2 K1 K0 C2 D2 3 NaN NaN K2 K0 C3 D3 pd . merge ( left , right , how = 'left' , on = [ 'key1' , 'key2' ]) A B key1 key2 C D 0 A0 B0 K0 K0 C0 D0 1 A1 B1 K0 K1 NaN NaN 2 A2 B2 K1 K0 C1 D1 3 A2 B2 K1 K0 C2 D2 4 A3 B3 K2 K1 NaN NaN","title":"Merging"},{"location":"python_intro/01_03_python_basics_pandas.html#joining","text":"Joining is a convenient method for combining the columns of two potentially differently-indexed DataFrames into a single result DataFrame. left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = [ 'K0' , 'K1' , 'K2' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D2' , 'D3' ]}, index = [ 'K0' , 'K2' , 'K3' ]) left . join ( right ) A B C D K0 A0 B0 C0 D0 K1 A1 B1 NaN NaN K2 A2 B2 C2 D2 left . join ( right , how = 'outer' ) A B C D K0 A0 B0 C0 D0 K1 A1 B1 NaN NaN K2 A2 B2 C2 D2 K3 NaN NaN C3 D3","title":"Joining"},{"location":"python_intro/01_03_python_basics_pandas.html#operations","text":"There are lots of operations with pandas that will be really useful to you, but don't fall into any distinct category. import pandas as pd df = pd . DataFrame ({ 'col1' :[ 1 , 2 , 3 , 4 ], 'col2' :[ 444 , 555 , 666 , 444 ], 'col3' :[ 'abc' , 'def' , 'ghi' , 'xyz' ]}) df . head () col1 col2 col3 0 1 444 abc 1 2 555 def 2 3 666 ghi 3 4 444 xyz","title":"Operations"},{"location":"python_intro/01_03_python_basics_pandas.html#info-on-unique-values","text":"df [ 'col2' ] . unique () array ([ 444 , 555 , 666 ]) df [ 'col2' ] . nunique () 3 df [ 'col2' ] . value_counts () 444 2 555 1 666 1 Name : col2 , dtype : int64","title":"Info on Unique Values"},{"location":"python_intro/01_03_python_basics_pandas.html#selecting-data","text":"#Select from DataFrame using criteria from multiple columns newdf = df [( df [ 'col1' ] > 2 ) & ( df [ 'col2' ] == 444 )] newdf col1 col2 col3 3 4 444 xyz","title":"Selecting Data"},{"location":"python_intro/01_03_python_basics_pandas.html#applying-functions","text":"def times2 ( x ): return x * 2 df [ 'col1' ] . apply ( times2 ) 0 2 1 4 2 6 3 8 Name : col1 , dtype : int64 df [ 'col3' ] . apply ( len ) 0 3 1 3 2 3 3 3 Name : col3 , dtype : int64 df [ 'col1' ] . sum () 10","title":"Applying Functions"},{"location":"python_intro/01_03_python_basics_pandas.html#permanently-removing-a-column","text":"del df [ 'col1' ] df col2 col3 0 444 abc 1 555 def 2 666 ghi 3 444 xyz","title":"Permanently Removing a Column"},{"location":"python_intro/01_03_python_basics_pandas.html#get-column-and-index-names","text":"df . columns Index ([ 'col2' , 'col3' ], dtype = 'object' ) df . index RangeIndex ( start = 0 , stop = 4 , step = 1 )","title":"Get column and index names"},{"location":"python_intro/01_03_python_basics_pandas.html#sorting-and-ordering-a-dataframe","text":"df col2 col3 0 444 abc 1 555 def 2 666 ghi 3 444 xyz df . sort_values ( by = 'col2' ) #inplace=False by default col2 col3 0 444 abc 3 444 xyz 1 555 def 2 666 ghi","title":"Sorting and Ordering a DataFrame"},{"location":"python_intro/01_03_python_basics_pandas.html#find-null-values-or-check-for-null-values","text":"df . isnull () col2 col3 0 False False 1 False False 2 False False 3 False False #Drop rows with NaN Values df . dropna () col2 col3 0 444 abc 1 555 def 2 666 ghi 3 444 xyz","title":"Find Null Values or Check for Null Values"},{"location":"python_intro/01_03_python_basics_pandas.html#filling-in-nan-values-with-something-else","text":"import numpy as np df = pd . DataFrame ({ 'col1' :[ 1 , 2 , 3 , np . nan ], 'col2' :[ np . nan , 555 , 666 , 444 ], 'col3' :[ 'abc' , 'def' , 'ghi' , 'xyz' ]}) df . head () col1 col2 col3 0 1.0 NaN abc 1 2.0 555.0 def 2 3.0 666.0 ghi 3 NaN 444.0 xyz df . fillna ( 'FILL' ) col1 col2 col3 0 1 FILL abc 1 2 555 def 2 3 666 ghi 3 FILL 444 xyz data = { 'A' :[ 'foo' , 'foo' , 'foo' , 'bar' , 'bar' , 'bar' ], 'B' :[ 'one' , 'one' , 'two' , 'two' , 'one' , 'one' ], 'C' :[ 'x' , 'y' , 'x' , 'y' , 'x' , 'y' ], 'D' :[ 1 , 3 , 2 , 5 , 4 , 1 ]} df = pd . DataFrame ( data ) df A B C D 0 foo one x 1 1 foo one y 3 2 foo two x 2 3 bar two y 5 4 bar one x 4 5 bar one y 1 df . pivot_table ( values = 'D' , index = [ 'A' , 'B' ], columns = [ 'C' ]) C x y A B bar one 4.0 1.0 two NaN 5.0 foo one 1.0 3.0 two 2.0 NaN","title":"Filling in NaN values with something else"},{"location":"python_intro/01_03_python_basics_pandas.html#csv-data","text":"","title":"CSV Data"},{"location":"python_intro/01_03_python_basics_pandas.html#csv-input","text":"df = pd . read_csv ( 'example' ) df a b c d 0 0 1 2 3 1 4 5 6 7 2 8 9 10 11 3 12 13 14 15","title":"CSV Input"},{"location":"python_intro/01_03_python_basics_pandas.html#csv-output","text":"df . to_csv ( 'example' , index = False )","title":"CSV Output"},{"location":"python_intro/01_03_python_basics_pandas.html#excel-data","text":"Pandas can read and write excel files, keep in mind, this only imports data. Not formulas or images, having images or macros may cause this read_excel method to crash.","title":"Excel Data"},{"location":"python_intro/01_03_python_basics_pandas.html#excel-input","text":"pd . read_excel ( 'Excel_Sample.xlsx' , sheetname = 'Sheet1' ) a b c d 0 0 1 2 3 1 4 5 6 7 2 8 9 10 11 3 12 13 14 15","title":"Excel Input"},{"location":"python_intro/01_03_python_basics_pandas.html#excel-output","text":"df . to_excel ( 'Excel_Sample.xlsx' , sheet_name = 'Sheet1' )","title":"Excel Output"},{"location":"python_intro/01_03_python_basics_pandas.html#html-data","text":"You may need to install htmllib5,lxml, and BeautifulSoup4. In your terminal/command prompt run: python -m pip install lxml python -m pip install html5lib python -m pip install BeautifulSoup4 Pandas can read table tabs off of html.","title":"HTML Data"},{"location":"python_intro/01_03_python_basics_pandas.html#html-input","text":"Pandas read_html function will read tables off of a webpage and return a list of DataFrame objects: df = pd . read_html ( 'http://www.fdic.gov/bank/individual/failed/banklist.html' ) df [ 0 ] Bank Name City ST CERT Acquiring Institution Closing Date Updated Date Loss Share Type Agreement Terminated Termination Date 0 First CornerStone Bank King of Prussia PA 35312 First-Citizens Bank & Trust Company May 6, 2016 July 12, 2016 none NaN NaN 1 Trust Company Bank Memphis TN 9956 The Bank of Fayette County April 29, 2016 August 4, 2016 none NaN NaN 2 North Milwaukee State Bank Milwaukee WI 20364 First-Citizens Bank & Trust Company March 11, 2016 June 16, 2016 none NaN NaN 3 Hometown National Bank Longview WA 35156 Twin City Bank October 2, 2015 April 13, 2016 none NaN NaN 4 The Bank of Georgia Peachtree City GA 35259 Fidelity Bank October 2, 2015 April 13, 2016 none NaN NaN ... ... ... ... ... ... ... ... ... ... ... 543 National State Bank of Metropolis Metropolis IL 3815 Banterra Bank of Marion December 14, 2000 March 17, 2005 none NaN NaN 544 Bank of Honolulu Honolulu HI 21029 Bank of the Orient October 13, 2000 March 17, 2005 none NaN NaN","title":"HTML Input"},{"location":"python_intro/01_03_python_basics_pandas.html#sql-data","text":"Note If you are completely unfamiliar with SQL you can check out my other course: \"Complete SQL Bootcamp\" to learn SQL. The pandas.io.sql module provides a collection of query wrappers to both facilitate data retrieval and to reduce dependency on DB-specific API. Database abstraction is provided by SQLAlchemy if installed. In addition you will need a driver library for your database. Examples of such drivers are psycopg2 for PostgreSQL or pymysql for MySQL. For SQLite this is included in Python\u2019s standard library by default. You can find an overview of supported drivers for each SQL dialect in the SQLAlchemy docs. If SQLAlchemy is not installed, a fallback is only provided for sqlite (and for mysql for backwards compatibility, but this is deprecated and will be removed in a future version). This mode requires a Python database adapter which respect the Python DB-API. See also some cookbook examples for some advanced strategies. The key functions are: read_sql_table(table_name, con[, schema, ...]) Read SQL database table into a DataFrame. read_sql_query(sql, con[, index_col, ...]) Read SQL query into a DataFrame. read_sql(sql, con[, index_col, ...]) Read SQL query or database table into a DataFrame. DataFrame.to_sql(name, con[, flavor, ...]) Write records stored in a DataFrame to a SQL database. from sqlalchemy import create_engine engine = create_engine ( 'sqlite:///:memory:' ) df . to_sql ( 'data' , engine ) sql_df = pd . read_sql ( 'data' , con = engine ) sql_df index a b c d 0 0 0 1 2 3 1 1 4 5 6 7 2 2 8 9 10 11 3 3 12 13 14 15","title":"SQL Data"},{"location":"python_intro/02_01_plotting.html","text":"Visualising Data \u00b6 The purpose of scientific computation is insight not numbers: To understand the meaning of the (many) numbers we compute, we often need postprocessing, statistical analysis and graphical visualisation of our data. The ensuing sections will outline the use of plotting tools within Python, mainly Matplotlib, Pandas and Plotly. Matplotlib \u00b6 The Python library Matplotlib is a python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments. Matplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc, with just a few lines of code. For more detailed information, check these links: The project web page for matplotlib. The source code for matplotlib. A large gallery showcaseing various types of plots matplotlib can create. A good matplotlib tutorial. Another good matplotlib reference.","title":"Plotting Intro"},{"location":"python_intro/02_01_plotting.html#visualising-data","text":"The purpose of scientific computation is insight not numbers: To understand the meaning of the (many) numbers we compute, we often need postprocessing, statistical analysis and graphical visualisation of our data. The ensuing sections will outline the use of plotting tools within Python, mainly Matplotlib, Pandas and Plotly.","title":"Visualising Data"},{"location":"python_intro/02_01_plotting.html#matplotlib","text":"The Python library Matplotlib is a python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments. Matplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc, with just a few lines of code. For more detailed information, check these links: The project web page for matplotlib. The source code for matplotlib. A large gallery showcaseing various types of plots matplotlib can create. A good matplotlib tutorial. Another good matplotlib reference.","title":"Matplotlib"},{"location":"python_intro/02_02_plotting_matplotlib.html","text":"Matplotlib is the \"grandfather\" library of data visualization with Python. It was created by John Hunter. He created it to try to replicate MatLab's (another programming language) plotting capabilities in Python. So if you happen to be familiar with matlab, matplotlib will feel natural to you. It is an excellent 2D and 3D graphics library for generating scientific figures. Some of the major Pros of Matplotlib are: Generally easy to get started for simple plots Support for custom labels and texts Great control of every element in a figure High-quality output in many formats Very customizable in general Matplotlib allows you to create reproducible figures programmatically. Let's learn how to use it! Before continuing this lecture, I encourage you just to explore the official Matplotlib web page. Installation \u00b6 You'll need to install matplotlib first with either: pip install matplotlib Importing \u00b6 Import the matplotlib.pyplot module under the name plt (the tidy way): import matplotlib.pyplot as plt You'll also need to use this line to see plots in the notebook: % matplotlib inline That line is only for jupyter notebooks, if you are using another editor, you'll use: plt.show() at the end of all your plotting commands to have the figure pop up in another window. Basic Example \u00b6 Let's walk through a very simple example using two numpy arrays. You can also use lists, but most likely you'll be passing numpy arrays or pandas columns (which essentially also behave like arrays). ** The data we want to plot:** import numpy as np x = np . linspace ( 0 , 5 , 11 ) y = x ** 2 x array([ 0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. ]) y array([ 0. , 0.25, 1. , 2.25, 4. , 6.25, 9. , 12.25, 16. , 20.25, 25. ]) Basic Matplotlib Commands \u00b6 We can create a very simple line plot using the following ( I encourage you to pause and use Shift+Tab along the way to check out the document strings for the functions we are using). plt . plot ( x , y , 'r' ) # 'r' is the color red plt . xlabel ( 'X Axis Title Here' ) plt . ylabel ( 'Y Axis Title Here' ) plt . title ( 'String Title Here' ) plt . show () Creating Multiplots on Same Canvas \u00b6 # plt.subplot(nrows, ncols, plot_number) plt . subplot ( 1 , 2 , 1 ) plt . plot ( x , y , 'r--' ) # More on color options later plt . subplot ( 1 , 2 , 2 ) plt . plot ( y , x , 'g*-' ); Matplotlib Object Oriented Method \u00b6 Now that we've seen the basics, let's break it all down with a more formal introduction of Matplotlib's Object Oriented API. This means we will instantiate figure objects and then call methods or attributes from that object. Introduction to the Object Oriented Method \u00b6 The main idea in using the more formal Object Oriented method is to create figure objects and then just call methods or attributes off of that object. This approach is nicer when dealing with a canvas that has multiple plots on it. To begin we create a figure instance. Then we can add axes to that figure: # Create Figure (empty canvas) fig = plt . figure () # Add set of axes to figure axes = fig . add_axes ([ 0.1 , 0.1 , 0.8 , 0.8 ]) # left, bottom, width, height (range 0 to 1) # Plot on that set of axes axes . plot ( x , y , 'b' ) axes . set_xlabel ( 'Set X Label' ) # Notice the use of set_ to begin methods axes . set_ylabel ( 'Set y Label' ) axes . set_title ( 'Set Title' ) Code is a little more complicated, but the advantage is that we now have full control of where the plot axes are placed, and we can easily add more than one axis to the figure: # Creates blank canvas fig = plt . figure () axes1 = fig . add_axes ([ 0.1 , 0.1 , 0.8 , 0.8 ]) # main axes axes2 = fig . add_axes ([ 0.2 , 0.5 , 0.4 , 0.3 ]) # inset axes # Larger Figure Axes 1 axes1 . plot ( x , y , 'b' ) axes1 . set_xlabel ( 'X_label_axes2' ) axes1 . set_ylabel ( 'Y_label_axes2' ) axes1 . set_title ( 'Axes 2 Title' ) # Insert Figure Axes 2 axes2 . plot ( y , x , 'r' ) axes2 . set_xlabel ( 'X_label_axes2' ) axes2 . set_ylabel ( 'Y_label_axes2' ) axes2 . set_title ( 'Axes 2 Title' ); subplots() \u00b6 The plt.subplots() object will act as a more automatic axis manager. Basic use cases: # Use similar to plt.figure() except use tuple unpacking to grab fig and axes fig , axes = plt . subplots () # Now use the axes object to add stuff to plot axes . plot ( x , y , 'r' ) axes . set_xlabel ( 'x' ) axes . set_ylabel ( 'y' ) axes . set_title ( 'title' ); Then you can specify the number of rows and columns when creating the subplots() object: # Empty canvas of 1 by 2 subplots fig , axes = plt . subplots ( nrows = 1 , ncols = 2 ) # Axes is an array of axes to plot on axes array([<matplotlib.axes._subplots.AxesSubplot object at 0x111f0f8d0>, <matplotlib.axes._subplots.AxesSubplot object at 0x1121f5588>], dtype=object) We can iterate through this array: for ax in axes : ax . plot ( x , y , 'b' ) ax . set_xlabel ( 'x' ) ax . set_ylabel ( 'y' ) ax . set_title ( 'title' ) # Display the figure object fig A common issue with matplolib is overlapping subplots or figures. We ca use fig.tight_layout() or plt.tight_layout() method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content: fig , axes = plt . subplots ( nrows = 1 , ncols = 2 ) for ax in axes : ax . plot ( x , y , 'g' ) ax . set_xlabel ( 'x' ) ax . set_ylabel ( 'y' ) ax . set_title ( 'title' ) fig plt . tight_layout () Figure size, aspect ratio and DPI \u00b6 Matplotlib allows the aspect ratio, DPI and figure size to be specified when the Figure object is created. You can use the figsize and dpi keyword arguments. figsize is a tuple of the width and height of the figure in inches dpi is the dots-per-inch (pixel per inch). For example: fig = plt . figure ( figsize = ( 8 , 4 ), dpi = 100 ) The same arguments can also be passed to layout managers, such as the subplots function: fig , axes = plt . subplots ( figsize = ( 12 , 3 )) axes . plot ( x , y , 'r' ) axes . set_xlabel ( 'x' ) axes . set_ylabel ( 'y' ) axes . set_title ( 'title' ); Saving figures \u00b6 Matplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF. To save a figure to a file we can use the savefig method in the Figure class: fig . savefig ( \"filename.png\" ) Here we can also optionally specify the DPI and choose between different output formats: fig . savefig ( \"filename.png\" , dpi = 200 ) Legends, labels and titles \u00b6 Now that we have covered the basics of how to create a figure canvas and add axes instances to the canvas, let's look at how decorate a figure with titles, axis labels, and legends. Figure titles \u00b6 A title can be added to each axis instance in a figure. To set the title, use the set_title method in the axes instance: ax . set_title ( \"title\" ); Axis labels \u00b6 Similarly, with the methods set_xlabel and set_ylabel , we can set the labels of the X and Y axes: ax . set_xlabel ( \"x\" ) ax . set_ylabel ( \"y\" ); Legends \u00b6 You can use the label=\"label text\" keyword argument when plots or other objects are added to the figure, and then using the legend method without arguments to add the legend to the figure: fig = plt . figure () ax = fig . add_axes ([ 0 , 0 , 1 , 1 ]) ax . plot ( x , x ** 2 , label = \"x**2\" ) ax . plot ( x , x ** 3 , label = \"x**3\" ) ax . legend () Notice how are legend overlaps some of the actual plot! The legend function takes an optional keyword argument loc that can be used to specify where in the figure the legend is to be drawn. The allowed values of loc are numerical codes for the various places the legend can be drawn. See the documentation page for details. Some of the most common loc values are: # Lots of options.... ax . legend ( loc = 1 ) # upper right corner ax . legend ( loc = 2 ) # upper left corner ax . legend ( loc = 3 ) # lower left corner ax . legend ( loc = 4 ) # lower right corner # .. many more options are available # Most common to choose ax . legend ( loc = 0 ) # let matplotlib decide the optimal location fig Colors with the color= parameter \u00b6 We can also define colors by their names or RGB hex codes and optionally provide an alpha value using the color and alpha keyword arguments. Alpha indicates opacity. fig , ax = plt . subplots () ax . plot ( x , x + 1 , color = \"blue\" , alpha = 0.5 ) # half-transparant ax . plot ( x , x + 2 , color = \"#8B008B\" ) # RGB hex code ax . plot ( x , x + 3 , color = \"#FF8C00\" ) # RGB hex code Line and marker styles \u00b6 To change the line width, we can use the linewidth or lw keyword argument. The line style can be selected using the linestyle or ls keyword arguments: fig , ax = plt . subplots ( figsize = ( 12 , 6 )) ax . plot ( x , x + 1 , color = \"red\" , linewidth = 0.25 ) ax . plot ( x , x + 2 , color = \"red\" , linewidth = 0.50 ) ax . plot ( x , x + 3 , color = \"red\" , linewidth = 1.00 ) ax . plot ( x , x + 4 , color = \"red\" , linewidth = 2.00 ) # possible linestype options \u2018-\u2018, \u2018\u2013\u2019, \u2018-.\u2019, \u2018:\u2019, \u2018steps\u2019 ax . plot ( x , x + 5 , color = \"green\" , lw = 3 , linestyle = '-' ) ax . plot ( x , x + 6 , color = \"green\" , lw = 3 , ls = '-.' ) ax . plot ( x , x + 7 , color = \"green\" , lw = 3 , ls = ':' ) # custom dash line , = ax . plot ( x , x + 8 , color = \"black\" , lw = 1.50 ) line . set_dashes ([ 5 , 10 , 15 , 10 ]) # format: line length, space length, ... # possible marker symbols: marker = '+', 'o', '*', 's', ',', '.', '1', '2', '3', '4', ... ax . plot ( x , x + 9 , color = \"blue\" , lw = 3 , ls = '-' , marker = '+' ) ax . plot ( x , x + 10 , color = \"blue\" , lw = 3 , ls = '--' , marker = 'o' ) ax . plot ( x , x + 11 , color = \"blue\" , lw = 3 , ls = '-' , marker = 's' ) ax . plot ( x , x + 12 , color = \"blue\" , lw = 3 , ls = '--' , marker = '1' ) # marker size and color ax . plot ( x , x + 13 , color = \"purple\" , lw = 1 , ls = '-' , marker = 'o' , markersize = 2 ) ax . plot ( x , x + 14 , color = \"purple\" , lw = 1 , ls = '-' , marker = 'o' , markersize = 4 ) ax . plot ( x , x + 15 , color = \"purple\" , lw = 1 , ls = '-' , marker = 'o' , markersize = 8 , markerfacecolor = \"red\" ) ax . plot ( x , x + 16 , color = \"purple\" , lw = 1 , ls = '-' , marker = 's' , markersize = 8 , markerfacecolor = \"yellow\" , markeredgewidth = 3 , markeredgecolor = \"green\" ); Control over axis appearance \u00b6 In this section we will look at controlling axis sizing properties in a matplotlib figure. Plot range \u00b6 We can configure the ranges of the axes using the set_ylim and set_xlim methods in the axis object, or axis('tight') for automatically getting \"tightly fitted\" axes ranges: fig , axes = plt . subplots ( 1 , 3 , figsize = ( 12 , 4 )) axes [ 0 ] . plot ( x , x ** 2 , x , x ** 3 ) axes [ 0 ] . set_title ( \"default axes ranges\" ) axes [ 1 ] . plot ( x , x ** 2 , x , x ** 3 ) axes [ 1 ] . axis ( 'tight' ) axes [ 1 ] . set_title ( \"tight axes\" ) axes [ 2 ] . plot ( x , x ** 2 , x , x ** 3 ) axes [ 2 ] . set_ylim ([ 0 , 60 ]) axes [ 2 ] . set_xlim ([ 2 , 5 ]) axes [ 2 ] . set_title ( \"custom axes range\" ); Special Plot Types \u00b6 There are many specialized plots we can create, such as barplots, histograms, scatter plots, and much more. Most of these type of plots we will actually create using seaborn, a statistical plotting library for Python. But here are a few examples of these type of plots: plt . scatter ( x , y ) from random import sample data = sample ( range ( 1 , 1000 ), 100 ) plt . hist ( data ) (array([ 14., 11., 9., 12., 6., 7., 13., 13., 6., 9.]), array([ 28. , 123.5, 219. , 314.5, 410. , 505.5, 601. , 696.5, 792. , 887.5, 983. ]), <a list of 10 Patch objects>) data = [ np . random . normal ( 0 , std , 100 ) for std in range ( 1 , 4 )] # rectangular box plot plt . boxplot ( data , vert = True , patch_artist = True );","title":"Matplotlib"},{"location":"python_intro/02_02_plotting_matplotlib.html#installation","text":"You'll need to install matplotlib first with either: pip install matplotlib","title":"Installation"},{"location":"python_intro/02_02_plotting_matplotlib.html#importing","text":"Import the matplotlib.pyplot module under the name plt (the tidy way): import matplotlib.pyplot as plt You'll also need to use this line to see plots in the notebook: % matplotlib inline That line is only for jupyter notebooks, if you are using another editor, you'll use: plt.show() at the end of all your plotting commands to have the figure pop up in another window.","title":"Importing"},{"location":"python_intro/02_02_plotting_matplotlib.html#basic-example","text":"Let's walk through a very simple example using two numpy arrays. You can also use lists, but most likely you'll be passing numpy arrays or pandas columns (which essentially also behave like arrays). ** The data we want to plot:** import numpy as np x = np . linspace ( 0 , 5 , 11 ) y = x ** 2 x array([ 0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. ]) y array([ 0. , 0.25, 1. , 2.25, 4. , 6.25, 9. , 12.25, 16. , 20.25, 25. ])","title":"Basic Example"},{"location":"python_intro/02_02_plotting_matplotlib.html#basic-matplotlib-commands","text":"We can create a very simple line plot using the following ( I encourage you to pause and use Shift+Tab along the way to check out the document strings for the functions we are using). plt . plot ( x , y , 'r' ) # 'r' is the color red plt . xlabel ( 'X Axis Title Here' ) plt . ylabel ( 'Y Axis Title Here' ) plt . title ( 'String Title Here' ) plt . show ()","title":"Basic Matplotlib Commands"},{"location":"python_intro/02_02_plotting_matplotlib.html#creating-multiplots-on-same-canvas","text":"# plt.subplot(nrows, ncols, plot_number) plt . subplot ( 1 , 2 , 1 ) plt . plot ( x , y , 'r--' ) # More on color options later plt . subplot ( 1 , 2 , 2 ) plt . plot ( y , x , 'g*-' );","title":"Creating Multiplots on Same Canvas"},{"location":"python_intro/02_02_plotting_matplotlib.html#matplotlib-object-oriented-method","text":"Now that we've seen the basics, let's break it all down with a more formal introduction of Matplotlib's Object Oriented API. This means we will instantiate figure objects and then call methods or attributes from that object.","title":"Matplotlib Object Oriented Method"},{"location":"python_intro/02_02_plotting_matplotlib.html#introduction-to-the-object-oriented-method","text":"The main idea in using the more formal Object Oriented method is to create figure objects and then just call methods or attributes off of that object. This approach is nicer when dealing with a canvas that has multiple plots on it. To begin we create a figure instance. Then we can add axes to that figure: # Create Figure (empty canvas) fig = plt . figure () # Add set of axes to figure axes = fig . add_axes ([ 0.1 , 0.1 , 0.8 , 0.8 ]) # left, bottom, width, height (range 0 to 1) # Plot on that set of axes axes . plot ( x , y , 'b' ) axes . set_xlabel ( 'Set X Label' ) # Notice the use of set_ to begin methods axes . set_ylabel ( 'Set y Label' ) axes . set_title ( 'Set Title' ) Code is a little more complicated, but the advantage is that we now have full control of where the plot axes are placed, and we can easily add more than one axis to the figure: # Creates blank canvas fig = plt . figure () axes1 = fig . add_axes ([ 0.1 , 0.1 , 0.8 , 0.8 ]) # main axes axes2 = fig . add_axes ([ 0.2 , 0.5 , 0.4 , 0.3 ]) # inset axes # Larger Figure Axes 1 axes1 . plot ( x , y , 'b' ) axes1 . set_xlabel ( 'X_label_axes2' ) axes1 . set_ylabel ( 'Y_label_axes2' ) axes1 . set_title ( 'Axes 2 Title' ) # Insert Figure Axes 2 axes2 . plot ( y , x , 'r' ) axes2 . set_xlabel ( 'X_label_axes2' ) axes2 . set_ylabel ( 'Y_label_axes2' ) axes2 . set_title ( 'Axes 2 Title' );","title":"Introduction to the Object Oriented Method"},{"location":"python_intro/02_02_plotting_matplotlib.html#subplots","text":"The plt.subplots() object will act as a more automatic axis manager. Basic use cases: # Use similar to plt.figure() except use tuple unpacking to grab fig and axes fig , axes = plt . subplots () # Now use the axes object to add stuff to plot axes . plot ( x , y , 'r' ) axes . set_xlabel ( 'x' ) axes . set_ylabel ( 'y' ) axes . set_title ( 'title' ); Then you can specify the number of rows and columns when creating the subplots() object: # Empty canvas of 1 by 2 subplots fig , axes = plt . subplots ( nrows = 1 , ncols = 2 ) # Axes is an array of axes to plot on axes array([<matplotlib.axes._subplots.AxesSubplot object at 0x111f0f8d0>, <matplotlib.axes._subplots.AxesSubplot object at 0x1121f5588>], dtype=object) We can iterate through this array: for ax in axes : ax . plot ( x , y , 'b' ) ax . set_xlabel ( 'x' ) ax . set_ylabel ( 'y' ) ax . set_title ( 'title' ) # Display the figure object fig A common issue with matplolib is overlapping subplots or figures. We ca use fig.tight_layout() or plt.tight_layout() method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content: fig , axes = plt . subplots ( nrows = 1 , ncols = 2 ) for ax in axes : ax . plot ( x , y , 'g' ) ax . set_xlabel ( 'x' ) ax . set_ylabel ( 'y' ) ax . set_title ( 'title' ) fig plt . tight_layout ()","title":"subplots()"},{"location":"python_intro/02_02_plotting_matplotlib.html#figure-size-aspect-ratio-and-dpi","text":"Matplotlib allows the aspect ratio, DPI and figure size to be specified when the Figure object is created. You can use the figsize and dpi keyword arguments. figsize is a tuple of the width and height of the figure in inches dpi is the dots-per-inch (pixel per inch). For example: fig = plt . figure ( figsize = ( 8 , 4 ), dpi = 100 ) The same arguments can also be passed to layout managers, such as the subplots function: fig , axes = plt . subplots ( figsize = ( 12 , 3 )) axes . plot ( x , y , 'r' ) axes . set_xlabel ( 'x' ) axes . set_ylabel ( 'y' ) axes . set_title ( 'title' );","title":"Figure size, aspect ratio and DPI"},{"location":"python_intro/02_02_plotting_matplotlib.html#saving-figures","text":"Matplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF. To save a figure to a file we can use the savefig method in the Figure class: fig . savefig ( \"filename.png\" ) Here we can also optionally specify the DPI and choose between different output formats: fig . savefig ( \"filename.png\" , dpi = 200 )","title":"Saving figures"},{"location":"python_intro/02_02_plotting_matplotlib.html#legends-labels-and-titles","text":"Now that we have covered the basics of how to create a figure canvas and add axes instances to the canvas, let's look at how decorate a figure with titles, axis labels, and legends.","title":"Legends, labels and titles"},{"location":"python_intro/02_02_plotting_matplotlib.html#figure-titles","text":"A title can be added to each axis instance in a figure. To set the title, use the set_title method in the axes instance: ax . set_title ( \"title\" );","title":"Figure titles"},{"location":"python_intro/02_02_plotting_matplotlib.html#axis-labels","text":"Similarly, with the methods set_xlabel and set_ylabel , we can set the labels of the X and Y axes: ax . set_xlabel ( \"x\" ) ax . set_ylabel ( \"y\" );","title":"Axis labels"},{"location":"python_intro/02_02_plotting_matplotlib.html#legends","text":"You can use the label=\"label text\" keyword argument when plots or other objects are added to the figure, and then using the legend method without arguments to add the legend to the figure: fig = plt . figure () ax = fig . add_axes ([ 0 , 0 , 1 , 1 ]) ax . plot ( x , x ** 2 , label = \"x**2\" ) ax . plot ( x , x ** 3 , label = \"x**3\" ) ax . legend () Notice how are legend overlaps some of the actual plot! The legend function takes an optional keyword argument loc that can be used to specify where in the figure the legend is to be drawn. The allowed values of loc are numerical codes for the various places the legend can be drawn. See the documentation page for details. Some of the most common loc values are: # Lots of options.... ax . legend ( loc = 1 ) # upper right corner ax . legend ( loc = 2 ) # upper left corner ax . legend ( loc = 3 ) # lower left corner ax . legend ( loc = 4 ) # lower right corner # .. many more options are available # Most common to choose ax . legend ( loc = 0 ) # let matplotlib decide the optimal location fig","title":"Legends"},{"location":"python_intro/02_02_plotting_matplotlib.html#colors-with-the-color-parameter","text":"We can also define colors by their names or RGB hex codes and optionally provide an alpha value using the color and alpha keyword arguments. Alpha indicates opacity. fig , ax = plt . subplots () ax . plot ( x , x + 1 , color = \"blue\" , alpha = 0.5 ) # half-transparant ax . plot ( x , x + 2 , color = \"#8B008B\" ) # RGB hex code ax . plot ( x , x + 3 , color = \"#FF8C00\" ) # RGB hex code","title":"Colors with the color= parameter"},{"location":"python_intro/02_02_plotting_matplotlib.html#line-and-marker-styles","text":"To change the line width, we can use the linewidth or lw keyword argument. The line style can be selected using the linestyle or ls keyword arguments: fig , ax = plt . subplots ( figsize = ( 12 , 6 )) ax . plot ( x , x + 1 , color = \"red\" , linewidth = 0.25 ) ax . plot ( x , x + 2 , color = \"red\" , linewidth = 0.50 ) ax . plot ( x , x + 3 , color = \"red\" , linewidth = 1.00 ) ax . plot ( x , x + 4 , color = \"red\" , linewidth = 2.00 ) # possible linestype options \u2018-\u2018, \u2018\u2013\u2019, \u2018-.\u2019, \u2018:\u2019, \u2018steps\u2019 ax . plot ( x , x + 5 , color = \"green\" , lw = 3 , linestyle = '-' ) ax . plot ( x , x + 6 , color = \"green\" , lw = 3 , ls = '-.' ) ax . plot ( x , x + 7 , color = \"green\" , lw = 3 , ls = ':' ) # custom dash line , = ax . plot ( x , x + 8 , color = \"black\" , lw = 1.50 ) line . set_dashes ([ 5 , 10 , 15 , 10 ]) # format: line length, space length, ... # possible marker symbols: marker = '+', 'o', '*', 's', ',', '.', '1', '2', '3', '4', ... ax . plot ( x , x + 9 , color = \"blue\" , lw = 3 , ls = '-' , marker = '+' ) ax . plot ( x , x + 10 , color = \"blue\" , lw = 3 , ls = '--' , marker = 'o' ) ax . plot ( x , x + 11 , color = \"blue\" , lw = 3 , ls = '-' , marker = 's' ) ax . plot ( x , x + 12 , color = \"blue\" , lw = 3 , ls = '--' , marker = '1' ) # marker size and color ax . plot ( x , x + 13 , color = \"purple\" , lw = 1 , ls = '-' , marker = 'o' , markersize = 2 ) ax . plot ( x , x + 14 , color = \"purple\" , lw = 1 , ls = '-' , marker = 'o' , markersize = 4 ) ax . plot ( x , x + 15 , color = \"purple\" , lw = 1 , ls = '-' , marker = 'o' , markersize = 8 , markerfacecolor = \"red\" ) ax . plot ( x , x + 16 , color = \"purple\" , lw = 1 , ls = '-' , marker = 's' , markersize = 8 , markerfacecolor = \"yellow\" , markeredgewidth = 3 , markeredgecolor = \"green\" );","title":"Line and marker styles"},{"location":"python_intro/02_02_plotting_matplotlib.html#control-over-axis-appearance","text":"In this section we will look at controlling axis sizing properties in a matplotlib figure.","title":"Control over axis appearance"},{"location":"python_intro/02_02_plotting_matplotlib.html#plot-range","text":"We can configure the ranges of the axes using the set_ylim and set_xlim methods in the axis object, or axis('tight') for automatically getting \"tightly fitted\" axes ranges: fig , axes = plt . subplots ( 1 , 3 , figsize = ( 12 , 4 )) axes [ 0 ] . plot ( x , x ** 2 , x , x ** 3 ) axes [ 0 ] . set_title ( \"default axes ranges\" ) axes [ 1 ] . plot ( x , x ** 2 , x , x ** 3 ) axes [ 1 ] . axis ( 'tight' ) axes [ 1 ] . set_title ( \"tight axes\" ) axes [ 2 ] . plot ( x , x ** 2 , x , x ** 3 ) axes [ 2 ] . set_ylim ([ 0 , 60 ]) axes [ 2 ] . set_xlim ([ 2 , 5 ]) axes [ 2 ] . set_title ( \"custom axes range\" );","title":"Plot range"},{"location":"python_intro/02_02_plotting_matplotlib.html#special-plot-types","text":"There are many specialized plots we can create, such as barplots, histograms, scatter plots, and much more. Most of these type of plots we will actually create using seaborn, a statistical plotting library for Python. But here are a few examples of these type of plots: plt . scatter ( x , y ) from random import sample data = sample ( range ( 1 , 1000 ), 100 ) plt . hist ( data ) (array([ 14., 11., 9., 12., 6., 7., 13., 13., 6., 9.]), array([ 28. , 123.5, 219. , 314.5, 410. , 505.5, 601. , 696.5, 792. , 887.5, 983. ]), <a list of 10 Patch objects>) data = [ np . random . normal ( 0 , std , 100 ) for std in range ( 1 , 4 )] # rectangular box plot plt . boxplot ( data , vert = True , patch_artist = True );","title":"Special Plot Types"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html","text":"In this tutorial we cover some more advanced topics which you won't usually use as often. Logarithmic scale \u00b6 It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes' scales are set seperately using set_xscale and set_yscale methods which accept one parameter (with the value \"log\" in this case): fig , axes = plt . subplots ( 1 , 2 , figsize = ( 10 , 4 )) axes [ 0 ] . plot ( x , x ** 2 , x , np . exp ( x )) axes [ 0 ] . set_title ( \"Normal scale\" ) axes [ 1 ] . plot ( x , x ** 2 , x , np . exp ( x )) axes [ 1 ] . set_yscale ( \"log\" ) axes [ 1 ] . set_title ( \"Logarithmic scale (y)\" ); Placement of ticks and custom tick labels \u00b6 We can explicitly determine where we want the axis ticks with set_xticks and set_yticks , which both take a list of values for where on the axis the ticks are to be placed. We can also use the set_xticklabels and set_yticklabels methods to provide a list of custom text labels for each tick location: fig , ax = plt . subplots ( figsize = ( 10 , 4 )) ax . plot ( x , x ** 2 , x , x ** 3 , lw = 2 ) ax . set_xticks ([ 1 , 2 , 3 , 4 , 5 ]) ax . set_xticklabels ([ r '$\\alpha$' , r '$\\beta$' , r '$\\gamma$' , r '$\\delta$' , r '$\\epsilon$' ], fontsize = 18 ) yticks = [ 0 , 50 , 100 , 150 ] ax . set_yticks ( yticks ) ax . set_yticklabels ([ \"$ %.1f $\" % y for y in yticks ], fontsize = 18 ); # use LaTeX formatted labels There are a number of more advanced methods for controlling major and minor tick placement in matplotlib figures, such as automatic placement according to different policies. See http://matplotlib.org/api/ticker_api.html for details. Scientific notation \u00b6 With large numbers on axes, it is often better use scientific notation: fig , ax = plt . subplots ( 1 , 1 ) ax . plot ( x , x ** 2 , x , np . exp ( x )) ax . set_title ( \"scientific notation\" ) ax . set_yticks ([ 0 , 50 , 100 , 150 ]) from matplotlib import ticker formatter = ticker . ScalarFormatter ( useMathText = True ) formatter . set_scientific ( True ) formatter . set_powerlimits (( - 1 , 1 )) ax . yaxis . set_major_formatter ( formatter ) Axis number and axis label spacing \u00b6 # distance between x and y axis and the numbers on the axes matplotlib . rcParams [ 'xtick.major.pad' ] = 5 matplotlib . rcParams [ 'ytick.major.pad' ] = 5 fig , ax = plt . subplots ( 1 , 1 ) ax . plot ( x , x ** 2 , x , np . exp ( x )) ax . set_yticks ([ 0 , 50 , 100 , 150 ]) ax . set_title ( \"label and axis spacing\" ) # padding between axis label and axis numbers ax . xaxis . labelpad = 5 ax . yaxis . labelpad = 5 ax . set_xlabel ( \"x\" ) ax . set_ylabel ( \"y\" ); # restore defaults matplotlib . rcParams [ 'xtick.major.pad' ] = 3 matplotlib . rcParams [ 'ytick.major.pad' ] = 3 Axis position adjustments \u00b6 Unfortunately, when saving figures the labels are sometimes clipped, and it can be necessary to adjust the positions of axes a little bit. This can be done using subplots_adjust : fig , ax = plt . subplots ( 1 , 1 ) ax . plot ( x , x ** 2 , x , np . exp ( x )) ax . set_yticks ([ 0 , 50 , 100 , 150 ]) ax . set_title ( \"title\" ) ax . set_xlabel ( \"x\" ) ax . set_ylabel ( \"y\" ) fig . subplots_adjust ( left = 0.15 , right = .9 , bottom = 0.1 , top = 0.9 ); Axis grid \u00b6 With the grid method in the axis object, we can turn on and off grid lines. We can also customize the appearance of the grid lines using the same keyword arguments as the plot function: fig , axes = plt . subplots ( 1 , 2 , figsize = ( 10 , 3 )) # default grid appearance axes [ 0 ] . plot ( x , x ** 2 , x , x ** 3 , lw = 2 ) axes [ 0 ] . grid ( True ) # custom grid appearance axes [ 1 ] . plot ( x , x ** 2 , x , x ** 3 , lw = 2 ) axes [ 1 ] . grid ( color = 'b' , alpha = 0.5 , linestyle = 'dashed' , linewidth = 0.5 ) Axis spines \u00b6 We can also change the properties of axis spines: fig , ax = plt . subplots ( figsize = ( 6 , 2 )) ax . spines [ 'bottom' ] . set_color ( 'blue' ) ax . spines [ 'top' ] . set_color ( 'blue' ) ax . spines [ 'left' ] . set_color ( 'red' ) ax . spines [ 'left' ] . set_linewidth ( 2 ) # turn off axis spine to the right ax . spines [ 'right' ] . set_color ( \"none\" ) ax . yaxis . tick_left () # only ticks on the left side Twin axes \u00b6 Sometimes it is useful to have dual x or y axes in a figure; for example, when plotting curves with different units together. Matplotlib supports this with the twinx and twiny functions: fig , ax1 = plt . subplots () ax1 . plot ( x , x ** 2 , lw = 2 , color = \"blue\" ) ax1 . set_ylabel ( r \"area $(m^2)$\" , fontsize = 18 , color = \"blue\" ) for label in ax1 . get_yticklabels (): label . set_color ( \"blue\" ) ax2 = ax1 . twinx () ax2 . plot ( x , x ** 3 , lw = 2 , color = \"red\" ) ax2 . set_ylabel ( r \"volume $(m^3)$\" , fontsize = 18 , color = \"red\" ) for label in ax2 . get_yticklabels (): label . set_color ( \"red\" ) Axes where x and y is zero \u00b6 fig , ax = plt . subplots () ax . spines [ 'right' ] . set_color ( 'none' ) ax . spines [ 'top' ] . set_color ( 'none' ) ax . xaxis . set_ticks_position ( 'bottom' ) ax . spines [ 'bottom' ] . set_position (( 'data' , 0 )) # set position of x spine to x=0 ax . yaxis . set_ticks_position ( 'left' ) ax . spines [ 'left' ] . set_position (( 'data' , 0 )) # set position of y spine to y=0 xx = np . linspace ( - 0.75 , 1. , 100 ) ax . plot ( xx , xx ** 3 ); Other 2D plot styles \u00b6 In addition to the regular plot method, there are a number of other functions for generating different kind of plots. See the matplotlib plot gallery for a complete list of available plot types. Some of the more useful ones are show below: n = np . array ([ 0 , 1 , 2 , 3 , 4 , 5 ]) fig , axes = plt . subplots ( 1 , 4 , figsize = ( 12 , 3 )) axes [ 0 ] . scatter ( xx , xx + 0.25 * np . random . randn ( len ( xx ))) axes [ 0 ] . set_title ( \"scatter\" ) axes [ 1 ] . step ( n , n ** 2 , lw = 2 ) axes [ 1 ] . set_title ( \"step\" ) axes [ 2 ] . bar ( n , n ** 2 , align = \"center\" , width = 0.5 , alpha = 0.5 ) axes [ 2 ] . set_title ( \"bar\" ) axes [ 3 ] . fill_between ( x , x ** 2 , x ** 3 , color = \"green\" , alpha = 0.5 ); axes [ 3 ] . set_title ( \"fill_between\" ); Text annotation \u00b6 Annotating text in matplotlib figures can be done using the text function. It supports LaTeX formatting just like axis label texts and titles: fig , ax = plt . subplots () ax . plot ( xx , xx ** 2 , xx , xx ** 3 ) ax . text ( 0.15 , 0.2 , r \"$y=x^2$\" , fontsize = 20 , color = \"blue\" ) ax . text ( 0.65 , 0.1 , r \"$y=x^3$\" , fontsize = 20 , color = \"green\" ); Figures with multiple subplots and insets \u00b6 Axes can be added to a matplotlib Figure canvas manually using fig.add_axes or using a sub-figure layout manager such as subplots , subplot2grid , or gridspec : subplots \u00b6 fig , ax = plt . subplots ( 2 , 3 ) fig . tight_layout () subplot2grid \u00b6 fig = plt . figure () ax1 = plt . subplot2grid (( 3 , 3 ), ( 0 , 0 ), colspan = 3 ) ax2 = plt . subplot2grid (( 3 , 3 ), ( 1 , 0 ), colspan = 2 ) ax3 = plt . subplot2grid (( 3 , 3 ), ( 1 , 2 ), rowspan = 2 ) ax4 = plt . subplot2grid (( 3 , 3 ), ( 2 , 0 )) ax5 = plt . subplot2grid (( 3 , 3 ), ( 2 , 1 )) fig . tight_layout () gridspec \u00b6 import matplotlib.gridspec as gridspec fig = plt . figure () gs = gridspec . GridSpec ( 2 , 3 , height_ratios = [ 2 , 1 ], width_ratios = [ 1 , 2 , 1 ]) for g in gs : ax = fig . add_subplot ( g ) fig . tight_layout () add_axes \u00b6 Manually adding axes with add_axes is useful for adding insets to figures: fig , ax = plt . subplots () ax . plot ( xx , xx ** 2 , xx , xx ** 3 ) fig . tight_layout () # inset inset_ax = fig . add_axes ([ 0.2 , 0.55 , 0.35 , 0.35 ]) # X, Y, width, height inset_ax . plot ( xx , xx ** 2 , xx , xx ** 3 ) inset_ax . set_title ( 'zoom near origin' ) # set axis range inset_ax . set_xlim ( - .2 , .2 ) inset_ax . set_ylim ( - .005 , .01 ) # set axis tick locations inset_ax . set_yticks ([ 0 , 0.005 , 0.01 ]) inset_ax . set_xticks ([ - 0.1 , 0 , .1 ]); Colormap and contour figures \u00b6 Colormaps and contour figures are useful for plotting functions of two variables. In most of these functions we will use a colormap to encode one dimension of the data. There are a number of predefined colormaps. It is relatively straightforward to define custom colormaps, matplotlib has pre-defined colormaps for you to choose from. alpha = 0.7 phi_ext = 2 * np . pi * 0.5 def flux_qubit_potential ( phi_m , phi_p ): return 2 + alpha - 2 * np . cos ( phi_p ) * np . cos ( phi_m ) - alpha * np . cos ( phi_ext - 2 * phi_p ) phi_m = np . linspace ( 0 , 2 * np . pi , 100 ) phi_p = np . linspace ( 0 , 2 * np . pi , 100 ) X , Y = np . meshgrid ( phi_p , phi_m ) Z = flux_qubit_potential ( X , Y ) . T pcolor \u00b6 fig , ax = plt . subplots () p = ax . pcolor ( X / ( 2 * np . pi ), Y / ( 2 * np . pi ), Z , cmap = matplotlib . cm . RdBu , vmin = abs ( Z ) . min (), vmax = abs ( Z ) . max ()) cb = fig . colorbar ( p , ax = ax ) imshow \u00b6 fig , ax = plt . subplots () im = ax . imshow ( Z , cmap = matplotlib . cm . RdBu , vmin = abs ( Z ) . min (), vmax = abs ( Z ) . max (), extent = [ 0 , 1 , 0 , 1 ]) im . set_interpolation ( 'bilinear' ) cb = fig . colorbar ( im , ax = ax ) contour \u00b6 fig , ax = plt . subplots () cnt = ax . contour ( Z , cmap = matplotlib . cm . RdBu , vmin = abs ( Z ) . min (), vmax = abs ( Z ) . max (), extent = [ 0 , 1 , 0 , 1 ]) 3D figures \u00b6 To use 3D graphics in matplotlib, we first need to create an instance of the Axes3D class. 3D axes can be added to a matplotlib figure canvas in exactly the same way as 2D axes; or, more conveniently, by passing a projection='3d' keyword argument to the add_axes or add_subplot methods. from mpl_toolkits.mplot3d.axes3d import Axes3D Surface plots \u00b6 fig = plt . figure ( figsize = ( 14 , 6 )) # `ax` is a 3D-aware axis instance because of the projection='3d' keyword argument to add_subplot ax = fig . add_subplot ( 1 , 2 , 1 , projection = '3d' ) p = ax . plot_surface ( X , Y , Z , rstride = 4 , cstride = 4 , linewidth = 0 ) # surface_plot with color grading and color bar ax = fig . add_subplot ( 1 , 2 , 2 , projection = '3d' ) p = ax . plot_surface ( X , Y , Z , rstride = 1 , cstride = 1 , cmap = matplotlib . cm . coolwarm , linewidth = 0 , antialiased = False ) cb = fig . colorbar ( p , shrink = 0.5 ) Wire-frame plot \u00b6 fig = plt . figure ( figsize = ( 8 , 6 )) ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) p = ax . plot_wireframe ( X , Y , Z , rstride = 4 , cstride = 4 ) Coutour plots with projections \u00b6 fig = plt . figure ( figsize = ( 8 , 6 )) ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) ax . plot_surface ( X , Y , Z , rstride = 4 , cstride = 4 , alpha = 0.25 ) cset = ax . contour ( X , Y , Z , zdir = 'z' , offset =- np . pi , cmap = matplotlib . cm . coolwarm ) cset = ax . contour ( X , Y , Z , zdir = 'x' , offset =- np . pi , cmap = matplotlib . cm . coolwarm ) cset = ax . contour ( X , Y , Z , zdir = 'y' , offset = 3 * np . pi , cmap = matplotlib . cm . coolwarm ) ax . set_xlim3d ( - np . pi , 2 * np . pi ); ax . set_ylim3d ( 0 , 3 * np . pi ); ax . set_zlim3d ( - np . pi , 2 * np . pi );","title":"Advanced Matplotlib"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#logarithmic-scale","text":"It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes' scales are set seperately using set_xscale and set_yscale methods which accept one parameter (with the value \"log\" in this case): fig , axes = plt . subplots ( 1 , 2 , figsize = ( 10 , 4 )) axes [ 0 ] . plot ( x , x ** 2 , x , np . exp ( x )) axes [ 0 ] . set_title ( \"Normal scale\" ) axes [ 1 ] . plot ( x , x ** 2 , x , np . exp ( x )) axes [ 1 ] . set_yscale ( \"log\" ) axes [ 1 ] . set_title ( \"Logarithmic scale (y)\" );","title":"Logarithmic scale"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#placement-of-ticks-and-custom-tick-labels","text":"We can explicitly determine where we want the axis ticks with set_xticks and set_yticks , which both take a list of values for where on the axis the ticks are to be placed. We can also use the set_xticklabels and set_yticklabels methods to provide a list of custom text labels for each tick location: fig , ax = plt . subplots ( figsize = ( 10 , 4 )) ax . plot ( x , x ** 2 , x , x ** 3 , lw = 2 ) ax . set_xticks ([ 1 , 2 , 3 , 4 , 5 ]) ax . set_xticklabels ([ r '$\\alpha$' , r '$\\beta$' , r '$\\gamma$' , r '$\\delta$' , r '$\\epsilon$' ], fontsize = 18 ) yticks = [ 0 , 50 , 100 , 150 ] ax . set_yticks ( yticks ) ax . set_yticklabels ([ \"$ %.1f $\" % y for y in yticks ], fontsize = 18 ); # use LaTeX formatted labels There are a number of more advanced methods for controlling major and minor tick placement in matplotlib figures, such as automatic placement according to different policies. See http://matplotlib.org/api/ticker_api.html for details.","title":"Placement of ticks and custom tick labels"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#scientific-notation","text":"With large numbers on axes, it is often better use scientific notation: fig , ax = plt . subplots ( 1 , 1 ) ax . plot ( x , x ** 2 , x , np . exp ( x )) ax . set_title ( \"scientific notation\" ) ax . set_yticks ([ 0 , 50 , 100 , 150 ]) from matplotlib import ticker formatter = ticker . ScalarFormatter ( useMathText = True ) formatter . set_scientific ( True ) formatter . set_powerlimits (( - 1 , 1 )) ax . yaxis . set_major_formatter ( formatter )","title":"Scientific notation"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#axis-number-and-axis-label-spacing","text":"# distance between x and y axis and the numbers on the axes matplotlib . rcParams [ 'xtick.major.pad' ] = 5 matplotlib . rcParams [ 'ytick.major.pad' ] = 5 fig , ax = plt . subplots ( 1 , 1 ) ax . plot ( x , x ** 2 , x , np . exp ( x )) ax . set_yticks ([ 0 , 50 , 100 , 150 ]) ax . set_title ( \"label and axis spacing\" ) # padding between axis label and axis numbers ax . xaxis . labelpad = 5 ax . yaxis . labelpad = 5 ax . set_xlabel ( \"x\" ) ax . set_ylabel ( \"y\" ); # restore defaults matplotlib . rcParams [ 'xtick.major.pad' ] = 3 matplotlib . rcParams [ 'ytick.major.pad' ] = 3","title":"Axis number and axis label spacing"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#axis-position-adjustments","text":"Unfortunately, when saving figures the labels are sometimes clipped, and it can be necessary to adjust the positions of axes a little bit. This can be done using subplots_adjust : fig , ax = plt . subplots ( 1 , 1 ) ax . plot ( x , x ** 2 , x , np . exp ( x )) ax . set_yticks ([ 0 , 50 , 100 , 150 ]) ax . set_title ( \"title\" ) ax . set_xlabel ( \"x\" ) ax . set_ylabel ( \"y\" ) fig . subplots_adjust ( left = 0.15 , right = .9 , bottom = 0.1 , top = 0.9 );","title":"Axis position adjustments"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#axis-grid","text":"With the grid method in the axis object, we can turn on and off grid lines. We can also customize the appearance of the grid lines using the same keyword arguments as the plot function: fig , axes = plt . subplots ( 1 , 2 , figsize = ( 10 , 3 )) # default grid appearance axes [ 0 ] . plot ( x , x ** 2 , x , x ** 3 , lw = 2 ) axes [ 0 ] . grid ( True ) # custom grid appearance axes [ 1 ] . plot ( x , x ** 2 , x , x ** 3 , lw = 2 ) axes [ 1 ] . grid ( color = 'b' , alpha = 0.5 , linestyle = 'dashed' , linewidth = 0.5 )","title":"Axis grid"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#axis-spines","text":"We can also change the properties of axis spines: fig , ax = plt . subplots ( figsize = ( 6 , 2 )) ax . spines [ 'bottom' ] . set_color ( 'blue' ) ax . spines [ 'top' ] . set_color ( 'blue' ) ax . spines [ 'left' ] . set_color ( 'red' ) ax . spines [ 'left' ] . set_linewidth ( 2 ) # turn off axis spine to the right ax . spines [ 'right' ] . set_color ( \"none\" ) ax . yaxis . tick_left () # only ticks on the left side","title":"Axis spines"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#twin-axes","text":"Sometimes it is useful to have dual x or y axes in a figure; for example, when plotting curves with different units together. Matplotlib supports this with the twinx and twiny functions: fig , ax1 = plt . subplots () ax1 . plot ( x , x ** 2 , lw = 2 , color = \"blue\" ) ax1 . set_ylabel ( r \"area $(m^2)$\" , fontsize = 18 , color = \"blue\" ) for label in ax1 . get_yticklabels (): label . set_color ( \"blue\" ) ax2 = ax1 . twinx () ax2 . plot ( x , x ** 3 , lw = 2 , color = \"red\" ) ax2 . set_ylabel ( r \"volume $(m^3)$\" , fontsize = 18 , color = \"red\" ) for label in ax2 . get_yticklabels (): label . set_color ( \"red\" )","title":"Twin axes"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#axes-where-x-and-y-is-zero","text":"fig , ax = plt . subplots () ax . spines [ 'right' ] . set_color ( 'none' ) ax . spines [ 'top' ] . set_color ( 'none' ) ax . xaxis . set_ticks_position ( 'bottom' ) ax . spines [ 'bottom' ] . set_position (( 'data' , 0 )) # set position of x spine to x=0 ax . yaxis . set_ticks_position ( 'left' ) ax . spines [ 'left' ] . set_position (( 'data' , 0 )) # set position of y spine to y=0 xx = np . linspace ( - 0.75 , 1. , 100 ) ax . plot ( xx , xx ** 3 );","title":"Axes where x and y is zero"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#other-2d-plot-styles","text":"In addition to the regular plot method, there are a number of other functions for generating different kind of plots. See the matplotlib plot gallery for a complete list of available plot types. Some of the more useful ones are show below: n = np . array ([ 0 , 1 , 2 , 3 , 4 , 5 ]) fig , axes = plt . subplots ( 1 , 4 , figsize = ( 12 , 3 )) axes [ 0 ] . scatter ( xx , xx + 0.25 * np . random . randn ( len ( xx ))) axes [ 0 ] . set_title ( \"scatter\" ) axes [ 1 ] . step ( n , n ** 2 , lw = 2 ) axes [ 1 ] . set_title ( \"step\" ) axes [ 2 ] . bar ( n , n ** 2 , align = \"center\" , width = 0.5 , alpha = 0.5 ) axes [ 2 ] . set_title ( \"bar\" ) axes [ 3 ] . fill_between ( x , x ** 2 , x ** 3 , color = \"green\" , alpha = 0.5 ); axes [ 3 ] . set_title ( \"fill_between\" );","title":"Other 2D plot styles"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#text-annotation","text":"Annotating text in matplotlib figures can be done using the text function. It supports LaTeX formatting just like axis label texts and titles: fig , ax = plt . subplots () ax . plot ( xx , xx ** 2 , xx , xx ** 3 ) ax . text ( 0.15 , 0.2 , r \"$y=x^2$\" , fontsize = 20 , color = \"blue\" ) ax . text ( 0.65 , 0.1 , r \"$y=x^3$\" , fontsize = 20 , color = \"green\" );","title":"Text annotation"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#figures-with-multiple-subplots-and-insets","text":"Axes can be added to a matplotlib Figure canvas manually using fig.add_axes or using a sub-figure layout manager such as subplots , subplot2grid , or gridspec :","title":"Figures with multiple subplots and insets"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#subplots","text":"fig , ax = plt . subplots ( 2 , 3 ) fig . tight_layout ()","title":"subplots"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#subplot2grid","text":"fig = plt . figure () ax1 = plt . subplot2grid (( 3 , 3 ), ( 0 , 0 ), colspan = 3 ) ax2 = plt . subplot2grid (( 3 , 3 ), ( 1 , 0 ), colspan = 2 ) ax3 = plt . subplot2grid (( 3 , 3 ), ( 1 , 2 ), rowspan = 2 ) ax4 = plt . subplot2grid (( 3 , 3 ), ( 2 , 0 )) ax5 = plt . subplot2grid (( 3 , 3 ), ( 2 , 1 )) fig . tight_layout ()","title":"subplot2grid"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#gridspec","text":"import matplotlib.gridspec as gridspec fig = plt . figure () gs = gridspec . GridSpec ( 2 , 3 , height_ratios = [ 2 , 1 ], width_ratios = [ 1 , 2 , 1 ]) for g in gs : ax = fig . add_subplot ( g ) fig . tight_layout ()","title":"gridspec"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#add_axes","text":"Manually adding axes with add_axes is useful for adding insets to figures: fig , ax = plt . subplots () ax . plot ( xx , xx ** 2 , xx , xx ** 3 ) fig . tight_layout () # inset inset_ax = fig . add_axes ([ 0.2 , 0.55 , 0.35 , 0.35 ]) # X, Y, width, height inset_ax . plot ( xx , xx ** 2 , xx , xx ** 3 ) inset_ax . set_title ( 'zoom near origin' ) # set axis range inset_ax . set_xlim ( - .2 , .2 ) inset_ax . set_ylim ( - .005 , .01 ) # set axis tick locations inset_ax . set_yticks ([ 0 , 0.005 , 0.01 ]) inset_ax . set_xticks ([ - 0.1 , 0 , .1 ]);","title":"add_axes"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#colormap-and-contour-figures","text":"Colormaps and contour figures are useful for plotting functions of two variables. In most of these functions we will use a colormap to encode one dimension of the data. There are a number of predefined colormaps. It is relatively straightforward to define custom colormaps, matplotlib has pre-defined colormaps for you to choose from. alpha = 0.7 phi_ext = 2 * np . pi * 0.5 def flux_qubit_potential ( phi_m , phi_p ): return 2 + alpha - 2 * np . cos ( phi_p ) * np . cos ( phi_m ) - alpha * np . cos ( phi_ext - 2 * phi_p ) phi_m = np . linspace ( 0 , 2 * np . pi , 100 ) phi_p = np . linspace ( 0 , 2 * np . pi , 100 ) X , Y = np . meshgrid ( phi_p , phi_m ) Z = flux_qubit_potential ( X , Y ) . T","title":"Colormap and contour figures"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#pcolor","text":"fig , ax = plt . subplots () p = ax . pcolor ( X / ( 2 * np . pi ), Y / ( 2 * np . pi ), Z , cmap = matplotlib . cm . RdBu , vmin = abs ( Z ) . min (), vmax = abs ( Z ) . max ()) cb = fig . colorbar ( p , ax = ax )","title":"pcolor"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#imshow","text":"fig , ax = plt . subplots () im = ax . imshow ( Z , cmap = matplotlib . cm . RdBu , vmin = abs ( Z ) . min (), vmax = abs ( Z ) . max (), extent = [ 0 , 1 , 0 , 1 ]) im . set_interpolation ( 'bilinear' ) cb = fig . colorbar ( im , ax = ax )","title":"imshow"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#contour","text":"fig , ax = plt . subplots () cnt = ax . contour ( Z , cmap = matplotlib . cm . RdBu , vmin = abs ( Z ) . min (), vmax = abs ( Z ) . max (), extent = [ 0 , 1 , 0 , 1 ])","title":"contour"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#3d-figures","text":"To use 3D graphics in matplotlib, we first need to create an instance of the Axes3D class. 3D axes can be added to a matplotlib figure canvas in exactly the same way as 2D axes; or, more conveniently, by passing a projection='3d' keyword argument to the add_axes or add_subplot methods. from mpl_toolkits.mplot3d.axes3d import Axes3D","title":"3D figures"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#surface-plots","text":"fig = plt . figure ( figsize = ( 14 , 6 )) # `ax` is a 3D-aware axis instance because of the projection='3d' keyword argument to add_subplot ax = fig . add_subplot ( 1 , 2 , 1 , projection = '3d' ) p = ax . plot_surface ( X , Y , Z , rstride = 4 , cstride = 4 , linewidth = 0 ) # surface_plot with color grading and color bar ax = fig . add_subplot ( 1 , 2 , 2 , projection = '3d' ) p = ax . plot_surface ( X , Y , Z , rstride = 1 , cstride = 1 , cmap = matplotlib . cm . coolwarm , linewidth = 0 , antialiased = False ) cb = fig . colorbar ( p , shrink = 0.5 )","title":"Surface plots"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#wire-frame-plot","text":"fig = plt . figure ( figsize = ( 8 , 6 )) ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) p = ax . plot_wireframe ( X , Y , Z , rstride = 4 , cstride = 4 )","title":"Wire-frame plot"},{"location":"python_intro/02_03_plotting_advance_matplotlib.html#coutour-plots-with-projections","text":"fig = plt . figure ( figsize = ( 8 , 6 )) ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) ax . plot_surface ( X , Y , Z , rstride = 4 , cstride = 4 , alpha = 0.25 ) cset = ax . contour ( X , Y , Z , zdir = 'z' , offset =- np . pi , cmap = matplotlib . cm . coolwarm ) cset = ax . contour ( X , Y , Z , zdir = 'x' , offset =- np . pi , cmap = matplotlib . cm . coolwarm ) cset = ax . contour ( X , Y , Z , zdir = 'y' , offset = 3 * np . pi , cmap = matplotlib . cm . coolwarm ) ax . set_xlim3d ( - np . pi , 2 * np . pi ); ax . set_ylim3d ( 0 , 3 * np . pi ); ax . set_zlim3d ( - np . pi , 2 * np . pi );","title":"Coutour plots with projections"},{"location":"python_intro/02_04_plotting_distribution.html","text":"Let's discuss some plots that allow us to visualize the distribution of a data set. These plots are: distplot jointplot pairplot rugplot kdeplot Imports \u00b6 import seaborn as sns % matplotlib inline Data \u00b6 Seaborn comes with built-in data sets! tips = sns . load_dataset ( 'tips' ) tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 distplot \u00b6 The distplot shows the distribution of a univariate set of observations. sns . distplot ( tips [ 'total_bill' ]) # Safe to ignore warnings <matplotlib.axes._subplots.AxesSubplot at 0x7f094c6b3a90> To remove the kde layer and just have the histogram use: sns . distplot ( tips [ 'total_bill' ], kde = False , bins = 30 ) <matplotlib.axes._subplots.AxesSubplot at 0x7f094a543e10> jointplot \u00b6 jointplot() allows you to basically match up two distplots for bivariate data. With your choice of what kind parameter to compare with: * \u201cscatter\u201d * \u201creg\u201d * \u201cresid\u201d * \u201ckde\u201d * \u201chex\u201d sns . jointplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' ) <seaborn.axisgrid.JointGrid at 0x7f0949ed63c8> sns . jointplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'hex' ) <seaborn.axisgrid.JointGrid at 0x7f094cf28cc0> sns . jointplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'reg' ) <seaborn.axisgrid.JointGrid at 0x7f0949ce0eb8> pairplot \u00b6 pairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns). sns . pairplot ( tips ) <seaborn.axisgrid.PairGrid at 0x7f0949a907f0> sns . pairplot ( tips , hue = 'sex' , palette = 'coolwarm' ) <seaborn.axisgrid.PairGrid at 0x7f094968dda0> rugplot \u00b6 rugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot: sns . rugplot ( tips [ 'total_bill' ]) <matplotlib.axes._subplots.AxesSubplot at 0x7f094913c898> kdeplot \u00b6 kdeplots are Kernel Density Estimation plots . These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example: # Don't worry about understanding this code! # It's just for the diagram below import numpy as np import matplotlib.pyplot as plt from scipy import stats #Create dataset dataset = np . random . randn ( 25 ) # Create another rugplot sns . rugplot ( dataset ); # Set up the x-axis for the plot x_min = dataset . min () - 2 x_max = dataset . max () + 2 # 100 equally spaced points from x_min to x_max x_axis = np . linspace ( x_min , x_max , 100 ) # Set up the bandwidth, for info on this: url = 'http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth' bandwidth = (( 4 * dataset . std () ** 5 ) / ( 3 * len ( dataset ))) ** .2 # Create an empty kernel list kernel_list = [] # Plot each basis function for data_point in dataset : # Create a kernel for each point and append to list kernel = stats . norm ( data_point , bandwidth ) . pdf ( x_axis ) kernel_list . append ( kernel ) #Scale for plotting kernel = kernel / kernel . max () kernel = kernel * .4 plt . plot ( x_axis , kernel , color = 'grey' , alpha = 0.5 ) plt . ylim ( 0 , 1 ) (0, 1) # To get the kde plot we can sum these basis functions. # Plot the sum of the basis function sum_of_kde = np . sum ( kernel_list , axis = 0 ) # Plot figure fig = plt . plot ( x_axis , sum_of_kde , color = 'indianred' ) # Add the initial rugplot sns . rugplot ( dataset , c = 'indianred' ) # Get rid of y-tick marks plt . yticks ([]) # Set title plt . suptitle ( \"Sum of the Basis Functions\" ) Text(0.5, 0.98, 'Sum of the Basis Functions') So with our tips dataset: sns . kdeplot ( tips [ 'total_bill' ]) sns . rugplot ( tips [ 'total_bill' ]) <matplotlib.axes._subplots.AxesSubplot at 0x7f09491856a0> sns . kdeplot ( tips [ 'tip' ]) sns . rugplot ( tips [ 'tip' ]) <matplotlib.axes._subplots.AxesSubplot at 0x7f0948023e80>","title":"Distribution Plots"},{"location":"python_intro/02_04_plotting_distribution.html#imports","text":"import seaborn as sns % matplotlib inline","title":"Imports"},{"location":"python_intro/02_04_plotting_distribution.html#data","text":"Seaborn comes with built-in data sets! tips = sns . load_dataset ( 'tips' ) tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4","title":"Data"},{"location":"python_intro/02_04_plotting_distribution.html#distplot","text":"The distplot shows the distribution of a univariate set of observations. sns . distplot ( tips [ 'total_bill' ]) # Safe to ignore warnings <matplotlib.axes._subplots.AxesSubplot at 0x7f094c6b3a90> To remove the kde layer and just have the histogram use: sns . distplot ( tips [ 'total_bill' ], kde = False , bins = 30 ) <matplotlib.axes._subplots.AxesSubplot at 0x7f094a543e10>","title":"distplot"},{"location":"python_intro/02_04_plotting_distribution.html#jointplot","text":"jointplot() allows you to basically match up two distplots for bivariate data. With your choice of what kind parameter to compare with: * \u201cscatter\u201d * \u201creg\u201d * \u201cresid\u201d * \u201ckde\u201d * \u201chex\u201d sns . jointplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' ) <seaborn.axisgrid.JointGrid at 0x7f0949ed63c8> sns . jointplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'hex' ) <seaborn.axisgrid.JointGrid at 0x7f094cf28cc0> sns . jointplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'reg' ) <seaborn.axisgrid.JointGrid at 0x7f0949ce0eb8>","title":"jointplot"},{"location":"python_intro/02_04_plotting_distribution.html#pairplot","text":"pairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns). sns . pairplot ( tips ) <seaborn.axisgrid.PairGrid at 0x7f0949a907f0> sns . pairplot ( tips , hue = 'sex' , palette = 'coolwarm' ) <seaborn.axisgrid.PairGrid at 0x7f094968dda0>","title":"pairplot"},{"location":"python_intro/02_04_plotting_distribution.html#rugplot","text":"rugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot: sns . rugplot ( tips [ 'total_bill' ]) <matplotlib.axes._subplots.AxesSubplot at 0x7f094913c898>","title":"rugplot"},{"location":"python_intro/02_04_plotting_distribution.html#kdeplot","text":"kdeplots are Kernel Density Estimation plots . These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example: # Don't worry about understanding this code! # It's just for the diagram below import numpy as np import matplotlib.pyplot as plt from scipy import stats #Create dataset dataset = np . random . randn ( 25 ) # Create another rugplot sns . rugplot ( dataset ); # Set up the x-axis for the plot x_min = dataset . min () - 2 x_max = dataset . max () + 2 # 100 equally spaced points from x_min to x_max x_axis = np . linspace ( x_min , x_max , 100 ) # Set up the bandwidth, for info on this: url = 'http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth' bandwidth = (( 4 * dataset . std () ** 5 ) / ( 3 * len ( dataset ))) ** .2 # Create an empty kernel list kernel_list = [] # Plot each basis function for data_point in dataset : # Create a kernel for each point and append to list kernel = stats . norm ( data_point , bandwidth ) . pdf ( x_axis ) kernel_list . append ( kernel ) #Scale for plotting kernel = kernel / kernel . max () kernel = kernel * .4 plt . plot ( x_axis , kernel , color = 'grey' , alpha = 0.5 ) plt . ylim ( 0 , 1 ) (0, 1) # To get the kde plot we can sum these basis functions. # Plot the sum of the basis function sum_of_kde = np . sum ( kernel_list , axis = 0 ) # Plot figure fig = plt . plot ( x_axis , sum_of_kde , color = 'indianred' ) # Add the initial rugplot sns . rugplot ( dataset , c = 'indianred' ) # Get rid of y-tick marks plt . yticks ([]) # Set title plt . suptitle ( \"Sum of the Basis Functions\" ) Text(0.5, 0.98, 'Sum of the Basis Functions') So with our tips dataset: sns . kdeplot ( tips [ 'total_bill' ]) sns . rugplot ( tips [ 'total_bill' ]) <matplotlib.axes._subplots.AxesSubplot at 0x7f09491856a0> sns . kdeplot ( tips [ 'tip' ]) sns . rugplot ( tips [ 'tip' ]) <matplotlib.axes._subplots.AxesSubplot at 0x7f0948023e80>","title":"kdeplot"},{"location":"python_intro/02_05_plotting_categorical.html","text":"Now let's discuss using seaborn to plot categorical data! There are a few main plot types for this: factorplot boxplot violinplot stripplot swarmplot barplot countplot Let's go through examples of each! import seaborn as sns % matplotlib inline tips = sns . load_dataset ( 'tips' ) tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 barplot and countplot \u00b6 These very similar plots allow you to get aggregate data off a categorical feature in your data. barplot is a general plot that allows you to aggregate the categorical data based off some function, by default the mean: sns . barplot ( x = 'sex' , y = 'total_bill' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c50fa58> import numpy as np You can change the estimator object to your own function, that converts a vector to a scalar: sns . barplot ( x = 'sex' , y = 'total_bill' , data = tips , estimator = np . std ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c506dd8> countplot \u00b6 This is essentially the same as barplot except the estimator is explicitly counting the number of occurrences. Which is why we only pass the x value: sns . countplot ( x = 'sex' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c460e48> boxplot and violinplot \u00b6 boxplots and violinplots are used to shown the distribution of categorical data. A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be \u201coutliers\u201d using a method that is a function of the inter-quartile range. sns . boxplot ( x = \"day\" , y = \"total_bill\" , data = tips , palette = 'rainbow' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c4e5710> # Can do entire dataframe with orient='h' sns . boxplot ( data = tips , palette = 'rainbow' , orient = 'h' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c352080> sns . boxplot ( x = \"day\" , y = \"total_bill\" , hue = \"smoker\" , data = tips , palette = \"coolwarm\" ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c34b6d8> violinplot \u00b6 A violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution. sns . violinplot ( x = \"day\" , y = \"total_bill\" , data = tips , palette = 'rainbow' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c1cc9b0> sns . violinplot ( x = \"day\" , y = \"total_bill\" , data = tips , hue = 'sex' , palette = 'Set1' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c14e470> sns . violinplot ( x = \"day\" , y = \"total_bill\" , data = tips , hue = 'sex' , split = True , palette = 'Set1' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c0f6f98> stripplot and swarmplot \u00b6 The stripplot will draw a scatterplot where one variable is categorical. A strip plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution. The swarmplot is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they don\u2019t overlap. This gives a better representation of the distribution of values, although it does not scale as well to large numbers of observations (both in terms of the ability to show all the points and in terms of the computation needed to arrange them). sns . stripplot ( x = \"day\" , y = \"total_bill\" , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c0206d8> sns . stripplot ( x = \"day\" , y = \"total_bill\" , data = tips , jitter = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527bff4a20> sns . stripplot ( x = \"day\" , y = \"total_bill\" , data = tips , jitter = True , hue = 'sex' , palette = 'Set1' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527bf5d9e8> sns . stripplot ( x = \"day\" , y = \"total_bill\" , data = tips , jitter = True , hue = 'sex' , palette = 'Set1' , dodge = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527beceba8> sns . swarmplot ( x = \"day\" , y = \"total_bill\" , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527beb88d0> sns . swarmplot ( x = \"day\" , y = \"total_bill\" , hue = 'sex' , data = tips , palette = \"Set1\" , dodge = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527be82d68> Combining Categorical Plots \u00b6 sns . violinplot ( x = \"tip\" , y = \"day\" , data = tips , palette = 'rainbow' ) sns . swarmplot ( x = \"tip\" , y = \"day\" , data = tips , color = 'black' , size = 3 ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527be088d0> factorplot \u00b6 factorplot is the most general form of a categorical plot. It can take in a kind parameter to adjust the plot type: sns . catplot ( x = 'sex' , y = 'total_bill' , data = tips , kind = 'bar' ) <seaborn.axisgrid.FacetGrid at 0x7f527bece4a8>","title":"Categorical Data Plots"},{"location":"python_intro/02_05_plotting_categorical.html#barplot-and-countplot","text":"These very similar plots allow you to get aggregate data off a categorical feature in your data. barplot is a general plot that allows you to aggregate the categorical data based off some function, by default the mean: sns . barplot ( x = 'sex' , y = 'total_bill' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c50fa58> import numpy as np You can change the estimator object to your own function, that converts a vector to a scalar: sns . barplot ( x = 'sex' , y = 'total_bill' , data = tips , estimator = np . std ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c506dd8>","title":"barplot and countplot"},{"location":"python_intro/02_05_plotting_categorical.html#countplot","text":"This is essentially the same as barplot except the estimator is explicitly counting the number of occurrences. Which is why we only pass the x value: sns . countplot ( x = 'sex' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c460e48>","title":"countplot"},{"location":"python_intro/02_05_plotting_categorical.html#boxplot-and-violinplot","text":"boxplots and violinplots are used to shown the distribution of categorical data. A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be \u201coutliers\u201d using a method that is a function of the inter-quartile range. sns . boxplot ( x = \"day\" , y = \"total_bill\" , data = tips , palette = 'rainbow' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c4e5710> # Can do entire dataframe with orient='h' sns . boxplot ( data = tips , palette = 'rainbow' , orient = 'h' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c352080> sns . boxplot ( x = \"day\" , y = \"total_bill\" , hue = \"smoker\" , data = tips , palette = \"coolwarm\" ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c34b6d8>","title":"boxplot and violinplot"},{"location":"python_intro/02_05_plotting_categorical.html#violinplot","text":"A violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution. sns . violinplot ( x = \"day\" , y = \"total_bill\" , data = tips , palette = 'rainbow' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c1cc9b0> sns . violinplot ( x = \"day\" , y = \"total_bill\" , data = tips , hue = 'sex' , palette = 'Set1' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c14e470> sns . violinplot ( x = \"day\" , y = \"total_bill\" , data = tips , hue = 'sex' , split = True , palette = 'Set1' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c0f6f98>","title":"violinplot"},{"location":"python_intro/02_05_plotting_categorical.html#stripplot-and-swarmplot","text":"The stripplot will draw a scatterplot where one variable is categorical. A strip plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution. The swarmplot is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they don\u2019t overlap. This gives a better representation of the distribution of values, although it does not scale as well to large numbers of observations (both in terms of the ability to show all the points and in terms of the computation needed to arrange them). sns . stripplot ( x = \"day\" , y = \"total_bill\" , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527c0206d8> sns . stripplot ( x = \"day\" , y = \"total_bill\" , data = tips , jitter = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527bff4a20> sns . stripplot ( x = \"day\" , y = \"total_bill\" , data = tips , jitter = True , hue = 'sex' , palette = 'Set1' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527bf5d9e8> sns . stripplot ( x = \"day\" , y = \"total_bill\" , data = tips , jitter = True , hue = 'sex' , palette = 'Set1' , dodge = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527beceba8> sns . swarmplot ( x = \"day\" , y = \"total_bill\" , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527beb88d0> sns . swarmplot ( x = \"day\" , y = \"total_bill\" , hue = 'sex' , data = tips , palette = \"Set1\" , dodge = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527be82d68>","title":"stripplot and swarmplot"},{"location":"python_intro/02_05_plotting_categorical.html#combining-categorical-plots","text":"sns . violinplot ( x = \"tip\" , y = \"day\" , data = tips , palette = 'rainbow' ) sns . swarmplot ( x = \"tip\" , y = \"day\" , data = tips , color = 'black' , size = 3 ) <matplotlib.axes._subplots.AxesSubplot at 0x7f527be088d0>","title":"Combining Categorical Plots"},{"location":"python_intro/02_05_plotting_categorical.html#factorplot","text":"factorplot is the most general form of a categorical plot. It can take in a kind parameter to adjust the plot type: sns . catplot ( x = 'sex' , y = 'total_bill' , data = tips , kind = 'bar' ) <seaborn.axisgrid.FacetGrid at 0x7f527bece4a8>","title":"factorplot"},{"location":"python_intro/02_06_plotting_matrix.html","text":"Matrix plots allow you to plot data as color-encoded matrices and can also be used to indicate clusters within the data (later in the machine learning section we will learn how to formally cluster data). Let's begin by exploring seaborn's heatmap and clutermap: import seaborn as sns % matplotlib inline flights = sns . load_dataset ( 'flights' ) tips = sns . load_dataset ( 'tips' ) tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 flights . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year month passengers 0 1949 January 112 1 1949 February 118 2 1949 March 132 3 1949 April 129 4 1949 May 121 Heatmap \u00b6 In order for a heatmap to work properly, your data should already be in a matrix form, the sns.heatmap function basically just colors it in for you. For example: tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 # Matrix form for correlation data tips . corr () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip size total_bill 1.000000 0.675734 0.598315 tip 0.675734 1.000000 0.489299 size 0.598315 0.489299 1.000000 sns . heatmap ( tips . corr ()) <matplotlib.axes._subplots.AxesSubplot at 0x7f66fe34a4e0> sns . heatmap ( tips . corr (), cmap = 'coolwarm' , annot = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7f66fc24a4e0> Or for the flights data: flights . pivot_table ( values = 'passengers' , index = 'month' , columns = 'year' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 month January 112 115 145 171 196 204 242 284 315 340 360 417 February 118 126 150 180 196 188 233 277 301 318 342 391 March 132 141 178 193 236 235 267 317 356 362 406 419 April 129 135 163 181 235 227 269 313 348 348 396 461 May 121 125 172 183 229 234 270 318 355 363 420 472 June 135 149 178 218 243 264 315 374 422 435 472 535 July 148 170 199 230 264 302 364 413 465 491 548 622 August 148 170 199 242 272 293 347 405 467 505 559 606 September 136 158 184 209 237 259 312 355 404 404 463 508 October 119 133 162 191 211 229 274 306 347 359 407 461 November 104 114 146 172 180 203 237 271 305 310 362 390 December 118 140 166 194 201 229 278 306 336 337 405 432 pvflights = flights . pivot_table ( values = 'passengers' , index = 'month' , columns = 'year' ) sns . heatmap ( pvflights ) <matplotlib.axes._subplots.AxesSubplot at 0x7f66fbab1eb8> sns . heatmap ( pvflights , cmap = 'magma' , linecolor = 'white' , linewidths = 1 ) <matplotlib.axes._subplots.AxesSubplot at 0x7f66fb9f0080> clustermap \u00b6 The clustermap uses hierarchal clustering to produce a clustered version of the heatmap. For example: sns . clustermap ( pvflights ) <seaborn.matrix.ClusterGrid at 0x7f66fba5a080> Notice now how the years and months are no longer in order, instead they are grouped by similarity in value (passenger count). That means we can begin to infer things from this plot, such as August and July being similar (makes sense, since they are both summer travel months) # More options to get the information a little clearer like normalization sns . clustermap ( pvflights , cmap = 'coolwarm' , standard_scale = 1 ) <seaborn.matrix.ClusterGrid at 0x7f66fe335be0>","title":"Matrix Plots"},{"location":"python_intro/02_06_plotting_matrix.html#heatmap","text":"In order for a heatmap to work properly, your data should already be in a matrix form, the sns.heatmap function basically just colors it in for you. For example: tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 # Matrix form for correlation data tips . corr () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip size total_bill 1.000000 0.675734 0.598315 tip 0.675734 1.000000 0.489299 size 0.598315 0.489299 1.000000 sns . heatmap ( tips . corr ()) <matplotlib.axes._subplots.AxesSubplot at 0x7f66fe34a4e0> sns . heatmap ( tips . corr (), cmap = 'coolwarm' , annot = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7f66fc24a4e0> Or for the flights data: flights . pivot_table ( values = 'passengers' , index = 'month' , columns = 'year' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 month January 112 115 145 171 196 204 242 284 315 340 360 417 February 118 126 150 180 196 188 233 277 301 318 342 391 March 132 141 178 193 236 235 267 317 356 362 406 419 April 129 135 163 181 235 227 269 313 348 348 396 461 May 121 125 172 183 229 234 270 318 355 363 420 472 June 135 149 178 218 243 264 315 374 422 435 472 535 July 148 170 199 230 264 302 364 413 465 491 548 622 August 148 170 199 242 272 293 347 405 467 505 559 606 September 136 158 184 209 237 259 312 355 404 404 463 508 October 119 133 162 191 211 229 274 306 347 359 407 461 November 104 114 146 172 180 203 237 271 305 310 362 390 December 118 140 166 194 201 229 278 306 336 337 405 432 pvflights = flights . pivot_table ( values = 'passengers' , index = 'month' , columns = 'year' ) sns . heatmap ( pvflights ) <matplotlib.axes._subplots.AxesSubplot at 0x7f66fbab1eb8> sns . heatmap ( pvflights , cmap = 'magma' , linecolor = 'white' , linewidths = 1 ) <matplotlib.axes._subplots.AxesSubplot at 0x7f66fb9f0080>","title":"Heatmap"},{"location":"python_intro/02_06_plotting_matrix.html#clustermap","text":"The clustermap uses hierarchal clustering to produce a clustered version of the heatmap. For example: sns . clustermap ( pvflights ) <seaborn.matrix.ClusterGrid at 0x7f66fba5a080> Notice now how the years and months are no longer in order, instead they are grouped by similarity in value (passenger count). That means we can begin to infer things from this plot, such as August and July being similar (makes sense, since they are both summer travel months) # More options to get the information a little clearer like normalization sns . clustermap ( pvflights , cmap = 'coolwarm' , standard_scale = 1 ) <seaborn.matrix.ClusterGrid at 0x7f66fe335be0>","title":"clustermap"},{"location":"python_intro/02_07_plotting_grid.html","text":"Grids are general types of plots that allow you to map plot types to rows and columns of a grid, this helps you create similar plots separated by features. import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline iris = sns . load_dataset ( 'iris' ) iris . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width species 0 5.1 3.5 1.4 0.2 setosa 1 4.9 3.0 1.4 0.2 setosa 2 4.7 3.2 1.3 0.2 setosa 3 4.6 3.1 1.5 0.2 setosa 4 5.0 3.6 1.4 0.2 setosa PairGrid \u00b6 Pairgrid is a subplot grid for plotting pairwise relationships in a dataset. # Just the Grid sns . PairGrid ( iris ) <seaborn.axisgrid.PairGrid at 0x7f00d6bfccf8> # Then you map to the grid g = sns . PairGrid ( iris ) g . map ( plt . scatter ) <seaborn.axisgrid.PairGrid at 0x7f00d3ccf898> # Map to upper,lower, and diagonal g = sns . PairGrid ( iris ) g . map_diag ( plt . hist ) g . map_upper ( plt . scatter ) g . map_lower ( sns . kdeplot ) <seaborn.axisgrid.PairGrid at 0x7f00d30b4978> pairplot \u00b6 pairplot is a simpler version of PairGrid (you'll use quite often) sns . pairplot ( iris ) <seaborn.axisgrid.PairGrid at 0x7f00d0f46fd0> sns . pairplot ( iris , hue = 'species' , palette = 'rainbow' ) <seaborn.axisgrid.PairGrid at 0x7f00d0925908> Facet Grid \u00b6 FacetGrid is the general way to create grids of plots based off of a feature: tips = sns . load_dataset ( 'tips' ) tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 # Just the Grid g = sns . FacetGrid ( tips , col = \"time\" , row = \"smoker\" ) g = sns . FacetGrid ( tips , col = \"time\" , row = \"smoker\" ) g = g . map ( plt . hist , \"total_bill\" ) g = sns . FacetGrid ( tips , col = \"time\" , row = \"smoker\" , hue = 'sex' ) # Notice hwo the arguments come after plt.scatter call g = g . map ( plt . scatter , \"total_bill\" , \"tip\" ) . add_legend () JointGrid \u00b6 JointGrid is the general version for jointplot() type grids, for a quick example: g = sns . JointGrid ( x = \"total_bill\" , y = \"tip\" , data = tips ) g = sns . JointGrid ( x = \"total_bill\" , y = \"tip\" , data = tips ) g = g . plot ( sns . regplot , sns . distplot ) Reference the documentation as necessary for grid types, but most of the time you'll just use the easier plots discussed earlier.","title":"Grids Plots"},{"location":"python_intro/02_07_plotting_grid.html#pairgrid","text":"Pairgrid is a subplot grid for plotting pairwise relationships in a dataset. # Just the Grid sns . PairGrid ( iris ) <seaborn.axisgrid.PairGrid at 0x7f00d6bfccf8> # Then you map to the grid g = sns . PairGrid ( iris ) g . map ( plt . scatter ) <seaborn.axisgrid.PairGrid at 0x7f00d3ccf898> # Map to upper,lower, and diagonal g = sns . PairGrid ( iris ) g . map_diag ( plt . hist ) g . map_upper ( plt . scatter ) g . map_lower ( sns . kdeplot ) <seaborn.axisgrid.PairGrid at 0x7f00d30b4978>","title":"PairGrid"},{"location":"python_intro/02_07_plotting_grid.html#pairplot","text":"pairplot is a simpler version of PairGrid (you'll use quite often) sns . pairplot ( iris ) <seaborn.axisgrid.PairGrid at 0x7f00d0f46fd0> sns . pairplot ( iris , hue = 'species' , palette = 'rainbow' ) <seaborn.axisgrid.PairGrid at 0x7f00d0925908>","title":"pairplot"},{"location":"python_intro/02_07_plotting_grid.html#facet-grid","text":"FacetGrid is the general way to create grids of plots based off of a feature: tips = sns . load_dataset ( 'tips' ) tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 # Just the Grid g = sns . FacetGrid ( tips , col = \"time\" , row = \"smoker\" ) g = sns . FacetGrid ( tips , col = \"time\" , row = \"smoker\" ) g = g . map ( plt . hist , \"total_bill\" ) g = sns . FacetGrid ( tips , col = \"time\" , row = \"smoker\" , hue = 'sex' ) # Notice hwo the arguments come after plt.scatter call g = g . map ( plt . scatter , \"total_bill\" , \"tip\" ) . add_legend ()","title":"Facet Grid"},{"location":"python_intro/02_07_plotting_grid.html#jointgrid","text":"JointGrid is the general version for jointplot() type grids, for a quick example: g = sns . JointGrid ( x = \"total_bill\" , y = \"tip\" , data = tips ) g = sns . JointGrid ( x = \"total_bill\" , y = \"tip\" , data = tips ) g = g . plot ( sns . regplot , sns . distplot ) Reference the documentation as necessary for grid types, but most of the time you'll just use the easier plots discussed earlier.","title":"JointGrid"},{"location":"python_intro/02_08_plotting_regression.html","text":"Seaborn has many built-in capabilities for regression plots, however we won't really discuss regression until the machine learning section of the course, so we will only cover the lmplot() function for now. lmplot allows you to display linear models, but it also conveniently allows you to split up those plots based off of features, as well as coloring the hue based off of features. Let's explore how this works: import seaborn as sns % matplotlib inline tips = sns . load_dataset ( 'tips' ) tips . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 lmplot() \u00b6 sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips ) <seaborn.axisgrid.FacetGrid at 0x7f62f3a8d588> sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , hue = 'sex' ) <seaborn.axisgrid.FacetGrid at 0x7f62f19f72b0> sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , hue = 'sex' , palette = 'coolwarm' ) <seaborn.axisgrid.FacetGrid at 0x7f62f12adf60> Working with Markers \u00b6 lmplot kwargs get passed through to regplot which is a more general form of lmplot(). regplot has a scatter_kws parameter that gets passed to plt.scatter. So you want to set the s parameter in that dictionary, which corresponds (a bit confusingly) to the squared markersize. In other words you end up passing a dictionary with the base matplotlib arguments, in this case, s for size of a scatter plot. In general, you probably won't remember this off the top of your head, but instead reference the documentation. # http://matplotlib.org/api/markers_api.html sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , hue = 'sex' , palette = 'coolwarm' , markers = [ 'o' , 'v' ], scatter_kws = { 's' : 100 }) <seaborn.axisgrid.FacetGrid at 0x7f62f1230128> Using a Grid \u00b6 We can add more variable separation through columns and rows with the use of a grid. Just indicate this with the col or row arguments: sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , col = 'sex' ) <seaborn.axisgrid.FacetGrid at 0x7f62f11b45f8> sns . lmplot ( x = \"total_bill\" , y = \"tip\" , row = \"sex\" , col = \"time\" , data = tips ) <seaborn.axisgrid.FacetGrid at 0x7f62f1155fd0> sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , col = 'day' , hue = 'sex' , palette = 'coolwarm' ) <seaborn.axisgrid.FacetGrid at 0x7f62f0dbe0f0> Aspect and Size \u00b6 Seaborn figures can have their size and aspect ratio adjusted with the size and aspect parameters: sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , col = 'day' , hue = 'sex' , palette = 'coolwarm' , aspect = 0.6 , size = 8 ) / home / ggilmore / . local / lib / python3 .6 / site - packages / seaborn / regression . py : 546 : UserWarning : The `size` paramter has been renamed to `height` ; please update your code . warnings . warn ( msg , UserWarning ) < seaborn . axisgrid . FacetGrid at 0x7f62f008ef98 > You're probably wondering how to change the font size or control the aesthetics even more, check out the Style and Color Lecture and Notebook for more info on that!","title":"Regression Plots"},{"location":"python_intro/02_08_plotting_regression.html#lmplot","text":"sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips ) <seaborn.axisgrid.FacetGrid at 0x7f62f3a8d588> sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , hue = 'sex' ) <seaborn.axisgrid.FacetGrid at 0x7f62f19f72b0> sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , hue = 'sex' , palette = 'coolwarm' ) <seaborn.axisgrid.FacetGrid at 0x7f62f12adf60>","title":"lmplot()"},{"location":"python_intro/02_08_plotting_regression.html#working-with-markers","text":"lmplot kwargs get passed through to regplot which is a more general form of lmplot(). regplot has a scatter_kws parameter that gets passed to plt.scatter. So you want to set the s parameter in that dictionary, which corresponds (a bit confusingly) to the squared markersize. In other words you end up passing a dictionary with the base matplotlib arguments, in this case, s for size of a scatter plot. In general, you probably won't remember this off the top of your head, but instead reference the documentation. # http://matplotlib.org/api/markers_api.html sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , hue = 'sex' , palette = 'coolwarm' , markers = [ 'o' , 'v' ], scatter_kws = { 's' : 100 }) <seaborn.axisgrid.FacetGrid at 0x7f62f1230128>","title":"Working with Markers"},{"location":"python_intro/02_08_plotting_regression.html#using-a-grid","text":"We can add more variable separation through columns and rows with the use of a grid. Just indicate this with the col or row arguments: sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , col = 'sex' ) <seaborn.axisgrid.FacetGrid at 0x7f62f11b45f8> sns . lmplot ( x = \"total_bill\" , y = \"tip\" , row = \"sex\" , col = \"time\" , data = tips ) <seaborn.axisgrid.FacetGrid at 0x7f62f1155fd0> sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , col = 'day' , hue = 'sex' , palette = 'coolwarm' ) <seaborn.axisgrid.FacetGrid at 0x7f62f0dbe0f0>","title":"Using a Grid"},{"location":"python_intro/02_08_plotting_regression.html#aspect-and-size","text":"Seaborn figures can have their size and aspect ratio adjusted with the size and aspect parameters: sns . lmplot ( x = 'total_bill' , y = 'tip' , data = tips , col = 'day' , hue = 'sex' , palette = 'coolwarm' , aspect = 0.6 , size = 8 ) / home / ggilmore / . local / lib / python3 .6 / site - packages / seaborn / regression . py : 546 : UserWarning : The `size` paramter has been renamed to `height` ; please update your code . warnings . warn ( msg , UserWarning ) < seaborn . axisgrid . FacetGrid at 0x7f62f008ef98 > You're probably wondering how to change the font size or control the aesthetics even more, check out the Style and Color Lecture and Notebook for more info on that!","title":"Aspect and Size"},{"location":"python_intro/02_09_plotting_style_color.html","text":"We've shown a few times how to control figure aesthetics in seaborn, but let's now go over it formally: import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline tips = sns . load_dataset ( 'tips' ) Styles \u00b6 You can set particular styles: sns . countplot ( x = 'sex' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f3651d0> sns . set_style ( 'white' ) sns . countplot ( x = 'sex' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f2bf3c8> sns . set_style ( 'ticks' ) sns . countplot ( x = 'sex' , data = tips , palette = 'deep' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f279ef0> Spine Removal \u00b6 sns . countplot ( x = 'sex' , data = tips ) sns . despine () sns . countplot ( x = 'sex' , data = tips ) sns . despine ( left = True ) Size and Aspect \u00b6 You can use matplotlib's **plt.figure(figsize=(width,height) ** to change the size of most seaborn plots. You can control the size and aspect ratio of most seaborn grid plots by passing in parameters: size, and aspect. For example: # Non Grid Plot plt . figure ( figsize = ( 12 , 3 )) sns . countplot ( x = 'sex' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f4d8b38> # Grid Type Plot sns . lmplot ( x = 'total_bill' , y = 'tip' , height = 2 , aspect = 4 , data = tips ) /home/ggilmore/.local/lib/python3.6/site-packages/seaborn/axisgrid.py:375: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all axes decorations. fig.tight_layout() /home/ggilmore/.local/lib/python3.6/site-packages/seaborn/axisgrid.py:848: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all axes decorations. self.fig.tight_layout() <seaborn.axisgrid.FacetGrid at 0x7f1d2f1e7860> Scale and Context \u00b6 The set_context() allows you to override default parameters: sns . set_context ( 'poster' , font_scale = 4 ) sns . countplot ( x = 'sex' , data = tips , palette = 'coolwarm' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f1e7b70> Check out the documentation page for more info on these topics: https://stanford.edu/~mwaskom/software/seaborn/tutorial/aesthetics.html","title":"Plots Style and Color"},{"location":"python_intro/02_09_plotting_style_color.html#styles","text":"You can set particular styles: sns . countplot ( x = 'sex' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f3651d0> sns . set_style ( 'white' ) sns . countplot ( x = 'sex' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f2bf3c8> sns . set_style ( 'ticks' ) sns . countplot ( x = 'sex' , data = tips , palette = 'deep' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f279ef0>","title":"Styles"},{"location":"python_intro/02_09_plotting_style_color.html#spine-removal","text":"sns . countplot ( x = 'sex' , data = tips ) sns . despine () sns . countplot ( x = 'sex' , data = tips ) sns . despine ( left = True )","title":"Spine Removal"},{"location":"python_intro/02_09_plotting_style_color.html#size-and-aspect","text":"You can use matplotlib's **plt.figure(figsize=(width,height) ** to change the size of most seaborn plots. You can control the size and aspect ratio of most seaborn grid plots by passing in parameters: size, and aspect. For example: # Non Grid Plot plt . figure ( figsize = ( 12 , 3 )) sns . countplot ( x = 'sex' , data = tips ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f4d8b38> # Grid Type Plot sns . lmplot ( x = 'total_bill' , y = 'tip' , height = 2 , aspect = 4 , data = tips ) /home/ggilmore/.local/lib/python3.6/site-packages/seaborn/axisgrid.py:375: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all axes decorations. fig.tight_layout() /home/ggilmore/.local/lib/python3.6/site-packages/seaborn/axisgrid.py:848: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all axes decorations. self.fig.tight_layout() <seaborn.axisgrid.FacetGrid at 0x7f1d2f1e7860>","title":"Size and Aspect"},{"location":"python_intro/02_09_plotting_style_color.html#scale-and-context","text":"The set_context() allows you to override default parameters: sns . set_context ( 'poster' , font_scale = 4 ) sns . countplot ( x = 'sex' , data = tips , palette = 'coolwarm' ) <matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f1e7b70> Check out the documentation page for more info on these topics: https://stanford.edu/~mwaskom/software/seaborn/tutorial/aesthetics.html","title":"Scale and Context"},{"location":"python_intro/02_10_plotting_pandas.html","text":"In this lecture we will learn about pandas built-in capabilities for data visualization! It's built-off of matplotlib, but it baked into pandas for easier usage! Let's take a look! Imports \u00b6 import numpy as np import pandas as pd % matplotlib inline The Data \u00b6 There are some fake data csv files you can read in as dataframes: df1 = pd . read_csv ( 'df1' , index_col = 0 ) df2 = pd . read_csv ( 'df2' ) Style Sheets \u00b6 Matplotlib has style sheets you can use to make your plots look a little nicer. These style sheets include plot_bmh,plot_fivethirtyeight,plot_ggplot and more. They basically create a set of style rules that your plots follow. I recommend using them, they make all your plots have the same look and feel more professional. You can even create your own if you want your company's plots to all have the same look (it is a bit tedious to create on though). Here is how to use them. Before plt.style.use() your plots look like this: df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef50c19d68> Call the style: import matplotlib.pyplot as plt plt . style . use ( 'ggplot' ) Now your plots look like this: df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef50a037b8> plt . style . use ( 'bmh' ) df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef5096c550> plt . style . use ( 'dark_background' ) df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef508e80b8> plt . style . use ( 'fivethirtyeight' ) df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef508654a8> plt . style . use ( 'ggplot' ) Let's stick with the ggplot style and actually show you how to utilize pandas built-in plotting capabilities! Plot Types \u00b6 There are several plot types built-in to pandas, most of them statistical plots by nature: df.plot.area df.plot.barh df.plot.density df.plot.hist df.plot.line df.plot.scatter df.plot.bar df.plot.box df.plot.hexbin df.plot.kde df.plot.pie You can also just call df.plot(kind='hist') or replace that kind argument with any of the key terms shown in the list above (e.g. 'box','barh', etc..) Let's start going through them! Area \u00b6 df2 . plot . area ( alpha = 0.4 ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef5081c080> Barplots \u00b6 df2 . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d 0 0.039762 0.218517 0.103423 0.957904 1 0.937288 0.041567 0.899125 0.977680 2 0.780504 0.008948 0.557808 0.797510 3 0.672717 0.247870 0.264071 0.444358 4 0.053829 0.520124 0.552264 0.190008 df2 . plot . bar () <matplotlib.axes._subplots.AxesSubplot at 0x7fef50762748> df2 . plot . bar ( stacked = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef5070a780> Histograms \u00b6 df1 [ 'A' ] . plot . hist ( bins = 50 ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef50837ac8> Line Plots \u00b6 #df1.plot.line(x=df1.index,y='B',figsize=(12,3),lw=1) Scatter Plots \u00b6 df1 . plot . scatter ( x = 'A' , y = 'B' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef505d8908> You can use c to color based off another column value Use cmap to indicate colormap to use. For all the colormaps, check out: http://matplotlib.org/users/colormaps.html df1 . plot . scatter ( x = 'A' , y = 'B' , c = 'C' , cmap = 'coolwarm' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef50643278> Or use s to indicate size based off another column. s parameter needs to be an array, not just the name of a column: df1 . plot . scatter ( x = 'A' , y = 'B' , s = df1 [ 'C' ] * 200 ) /home/ggilmore/.local/lib/python3.6/site-packages/matplotlib/collections.py:857: RuntimeWarning: invalid value encountered in sqrt scale = np.sqrt(self._sizes) * dpi / 72.0 * self._factor <matplotlib.axes._subplots.AxesSubplot at 0x7fef50465da0> BoxPlots \u00b6 df2 . plot . box () # Can also pass a by= argument for groupby <matplotlib.axes._subplots.AxesSubplot at 0x7fef50332e10> Hexagonal Bin Plot \u00b6 Useful for Bivariate Data, alternative to scatterplot: df = pd . DataFrame ( np . random . randn ( 1000 , 2 ), columns = [ 'a' , 'b' ]) df . plot . hexbin ( x = 'a' , y = 'b' , gridsize = 25 , cmap = 'Oranges' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef502539e8> Kernel Density Estimation plot (KDE) \u00b6 df2 [ 'a' ] . plot . kde () <matplotlib.axes._subplots.AxesSubplot at 0x7fef50190780> df2 . plot . density () <matplotlib.axes._subplots.AxesSubplot at 0x7fef47aaa908> That's it! Hopefully you can see why this method of plotting will be a lot easier to use than full-on matplotlib, it balances ease of use with control over the figure. A lot of the plot calls also accept additional arguments of their parent matplotlib plt. call.","title":"Pandas Plotting"},{"location":"python_intro/02_10_plotting_pandas.html#imports","text":"import numpy as np import pandas as pd % matplotlib inline","title":"Imports"},{"location":"python_intro/02_10_plotting_pandas.html#the-data","text":"There are some fake data csv files you can read in as dataframes: df1 = pd . read_csv ( 'df1' , index_col = 0 ) df2 = pd . read_csv ( 'df2' )","title":"The Data"},{"location":"python_intro/02_10_plotting_pandas.html#style-sheets","text":"Matplotlib has style sheets you can use to make your plots look a little nicer. These style sheets include plot_bmh,plot_fivethirtyeight,plot_ggplot and more. They basically create a set of style rules that your plots follow. I recommend using them, they make all your plots have the same look and feel more professional. You can even create your own if you want your company's plots to all have the same look (it is a bit tedious to create on though). Here is how to use them. Before plt.style.use() your plots look like this: df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef50c19d68> Call the style: import matplotlib.pyplot as plt plt . style . use ( 'ggplot' ) Now your plots look like this: df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef50a037b8> plt . style . use ( 'bmh' ) df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef5096c550> plt . style . use ( 'dark_background' ) df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef508e80b8> plt . style . use ( 'fivethirtyeight' ) df1 [ 'A' ] . hist () <matplotlib.axes._subplots.AxesSubplot at 0x7fef508654a8> plt . style . use ( 'ggplot' ) Let's stick with the ggplot style and actually show you how to utilize pandas built-in plotting capabilities!","title":"Style Sheets"},{"location":"python_intro/02_10_plotting_pandas.html#plot-types","text":"There are several plot types built-in to pandas, most of them statistical plots by nature: df.plot.area df.plot.barh df.plot.density df.plot.hist df.plot.line df.plot.scatter df.plot.bar df.plot.box df.plot.hexbin df.plot.kde df.plot.pie You can also just call df.plot(kind='hist') or replace that kind argument with any of the key terms shown in the list above (e.g. 'box','barh', etc..) Let's start going through them!","title":"Plot Types"},{"location":"python_intro/02_10_plotting_pandas.html#area","text":"df2 . plot . area ( alpha = 0.4 ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef5081c080>","title":"Area"},{"location":"python_intro/02_10_plotting_pandas.html#barplots","text":"df2 . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d 0 0.039762 0.218517 0.103423 0.957904 1 0.937288 0.041567 0.899125 0.977680 2 0.780504 0.008948 0.557808 0.797510 3 0.672717 0.247870 0.264071 0.444358 4 0.053829 0.520124 0.552264 0.190008 df2 . plot . bar () <matplotlib.axes._subplots.AxesSubplot at 0x7fef50762748> df2 . plot . bar ( stacked = True ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef5070a780>","title":"Barplots"},{"location":"python_intro/02_10_plotting_pandas.html#histograms","text":"df1 [ 'A' ] . plot . hist ( bins = 50 ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef50837ac8>","title":"Histograms"},{"location":"python_intro/02_10_plotting_pandas.html#line-plots","text":"#df1.plot.line(x=df1.index,y='B',figsize=(12,3),lw=1)","title":"Line Plots"},{"location":"python_intro/02_10_plotting_pandas.html#scatter-plots","text":"df1 . plot . scatter ( x = 'A' , y = 'B' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef505d8908> You can use c to color based off another column value Use cmap to indicate colormap to use. For all the colormaps, check out: http://matplotlib.org/users/colormaps.html df1 . plot . scatter ( x = 'A' , y = 'B' , c = 'C' , cmap = 'coolwarm' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef50643278> Or use s to indicate size based off another column. s parameter needs to be an array, not just the name of a column: df1 . plot . scatter ( x = 'A' , y = 'B' , s = df1 [ 'C' ] * 200 ) /home/ggilmore/.local/lib/python3.6/site-packages/matplotlib/collections.py:857: RuntimeWarning: invalid value encountered in sqrt scale = np.sqrt(self._sizes) * dpi / 72.0 * self._factor <matplotlib.axes._subplots.AxesSubplot at 0x7fef50465da0>","title":"Scatter Plots"},{"location":"python_intro/02_10_plotting_pandas.html#boxplots","text":"df2 . plot . box () # Can also pass a by= argument for groupby <matplotlib.axes._subplots.AxesSubplot at 0x7fef50332e10>","title":"BoxPlots"},{"location":"python_intro/02_10_plotting_pandas.html#hexagonal-bin-plot","text":"Useful for Bivariate Data, alternative to scatterplot: df = pd . DataFrame ( np . random . randn ( 1000 , 2 ), columns = [ 'a' , 'b' ]) df . plot . hexbin ( x = 'a' , y = 'b' , gridsize = 25 , cmap = 'Oranges' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fef502539e8>","title":"Hexagonal Bin Plot"},{"location":"python_intro/02_10_plotting_pandas.html#kernel-density-estimation-plot-kde","text":"df2 [ 'a' ] . plot . kde () <matplotlib.axes._subplots.AxesSubplot at 0x7fef50190780> df2 . plot . density () <matplotlib.axes._subplots.AxesSubplot at 0x7fef47aaa908> That's it! Hopefully you can see why this method of plotting will be a lot easier to use than full-on matplotlib, it balances ease of use with control over the figure. A lot of the plot calls also accept additional arguments of their parent matplotlib plt. call.","title":"Kernel Density Estimation plot (KDE)"},{"location":"python_intro/02_11_plotting_ploty.html","text":"Plotly is a library that allows you to create interactive plots that you can use in dashboards or websites (you can save them as html files or static images). Installation \u00b6 In order for this all to work, you'll need to install plotly and cufflinks to call plots directly off of a pandas dataframe. These libraries are not currently available through conda but are available through pip . Install the libraries at your command line/terminal using: pip install plotly pip install cufflinks ** NOTE: Make sure you only have one installation of Python on your computer when you do this, otherwise the installation may not work. ** Imports and Set-up \u00b6 import pandas as pd import numpy as np #%matplotlib inline from plotly import __version__ from plotly.offline import download_plotlyjs , init_notebook_mode , plot , iplot print ( __version__ ) # requires version >= 1.9.0 4.3.0 import cufflinks as cf # For Notebooks init_notebook_mode ( connected = True ) window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); } # For offline use cf . go_offline () window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); } Fake Data \u00b6 df = pd . DataFrame ( np . random . randn ( 100 , 4 ), columns = 'A B C D' . split ()) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 1.443094 1.049955 -2.171906 0.493646 1 0.215467 -0.428265 -1.846725 -0.239502 2 -0.540795 -1.273190 -0.326949 0.787827 3 -0.790861 0.408180 -1.324640 1.621891 4 -0.865603 0.911266 1.180761 0.146927 df2 = pd . DataFrame ({ 'Category' :[ 'A' , 'B' , 'C' ], 'Values' :[ 32 , 43 , 50 ]}) df2 . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Category Values 0 A 32 1 B 43 2 C 50 Using Cufflinks and iplot() \u00b6 scatter bar box spread ratio heatmap surface histogram bubble Scatter \u00b6 df . iplot ( kind = 'scatter' , x = 'A' , y = 'B' , mode = 'markers' , size = 10 ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"91765269-716f-4bd2-b1a9-514b53782658\")) { Plotly.newPlot( '91765269-716f-4bd2-b1a9-514b53782658', [{\"line\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 10, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('91765269-716f-4bd2-b1a9-514b53782658'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); Bar Plots \u00b6 df2 . iplot ( kind = 'bar' , x = 'Category' , y = 'Values' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"175d443f-d88d-41c4-87cd-da4fa7be292e\")) { Plotly.newPlot( '175d443f-d88d-41c4-87cd-da4fa7be292e', [{\"marker\": {\"color\": \"rgba(255, 153, 51, 0.6)\", \"line\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"width\": 1}}, \"name\": \"Values\", \"orientation\": \"v\", \"text\": \"\", \"type\": \"bar\", \"x\": [\"A\", \"B\", \"C\"], \"y\": [32, 43, 50]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('175d443f-d88d-41c4-87cd-da4fa7be292e'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); df . count () . iplot ( kind = 'bar' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"8387ca92-054b-42ed-bb9d-e01e412b50af\")) { Plotly.newPlot( '8387ca92-054b-42ed-bb9d-e01e412b50af', [{\"marker\": {\"color\": \"rgba(255, 153, 51, 0.6)\", \"line\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"width\": 1}}, \"name\": \"None\", \"orientation\": \"v\", \"text\": \"\", \"type\": \"bar\", \"x\": [\"A\", \"B\", \"C\", \"D\"], \"y\": [100, 100, 100, 100]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('8387ca92-054b-42ed-bb9d-e01e412b50af'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); Boxplots \u00b6 df . iplot ( kind = 'box' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"e678dca6-2769-43dd-bff3-09bfe70eea32\")) { Plotly.newPlot( 'e678dca6-2769-43dd-bff3-09bfe70eea32', [{\"boxpoints\": false, \"line\": {\"width\": 1.3}, \"marker\": {\"color\": \"rgba(255, 153, 51, 1.0)\"}, \"name\": \"A\", \"orientation\": \"v\", \"type\": \"box\", \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}, {\"boxpoints\": false, \"line\": {\"width\": 1.3}, \"marker\": {\"color\": \"rgba(55, 128, 191, 1.0)\"}, \"name\": \"B\", \"orientation\": \"v\", \"type\": \"box\", \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}, {\"boxpoints\": false, \"line\": {\"width\": 1.3}, \"marker\": {\"color\": \"rgba(50, 171, 96, 1.0)\"}, \"name\": \"C\", \"orientation\": \"v\", \"type\": \"box\", \"y\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415]}, {\"boxpoints\": false, \"line\": {\"width\": 1.3}, \"marker\": {\"color\": \"rgba(128, 0, 128, 1.0)\"}, \"name\": \"D\", \"orientation\": \"v\", \"type\": \"box\", \"y\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('e678dca6-2769-43dd-bff3-09bfe70eea32'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); 3d Surface \u00b6 df3 = pd . DataFrame ({ 'x' :[ 1 , 2 , 3 , 4 , 5 ], 'y' :[ 10 , 20 , 30 , 20 , 10 ], 'z' :[ 5 , 4 , 3 , 2 , 1 ]}) df3 . iplot ( kind = 'surface' , colorscale = 'rdylbu' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"825f4807-44e8-4f6a-8fa7-319ff314df1f\")) { Plotly.newPlot( '825f4807-44e8-4f6a-8fa7-319ff314df1f', [{\"colorscale\": [[0.0, \"rgb(165,0,38)\"], [0.1, \"rgb(215,48,39)\"], [0.2, \"rgb(244,109,67)\"], [0.3, \"rgb(253,174,97)\"], [0.4, \"rgb(254,224,144)\"], [0.5, \"rgb(255,255,191)\"], [0.6, \"rgb(224,243,248)\"], [0.7, \"rgb(171,217,233)\"], [0.8, \"rgb(116,173,209)\"], [0.9, \"rgb(69,117,180)\"], [1.0, \"rgb(49,54,149)\"]], \"type\": \"surface\", \"x\": [0, 1, 2, 3, 4], \"y\": [\"x\", \"y\", \"z\"], \"z\": [[1, 2, 3, 4, 5], [10, 20, 30, 20, 10], [5, 4, 3, 2, 1]]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('825f4807-44e8-4f6a-8fa7-319ff314df1f'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); Spread \u00b6 df [[ 'A' , 'B' ]] . iplot ( kind = 'spread' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"b460a593-440a-4c30-a40b-ff8d3192d37c\")) { Plotly.newPlot( 'b460a593-440a-4c30-a40b-ff8d3192d37c', [{\"line\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"mode\": \"lines\", \"name\": \"A\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}, {\"line\": {\"color\": \"rgba(55, 128, 191, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"mode\": \"lines\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}, {\"connectgaps\": false, \"fill\": \"tozeroy\", \"line\": {\"color\": \"green\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 0.5}, \"mode\": \"lines\", \"name\": \"Spread\", \"showlegend\": false, \"type\": \"scatter\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \"xaxis\": \"x2\", \"y\": [0.3931386912042505, 0.6437319132483335, 0.7323953042912329, \"\", \"\", \"\", 1.294526654721476, \"\", \"\", \"\", 1.0786721525736995, 0.6170731779029573, \"\", 0.29292175604215775, 0.35604795378709153, 1.2923424157651118, 0.5254478624112127, 0.6310257845728178, 1.7444194443759167, \"\", 1.7695634909798035, 2.5802757889750674, 0.48234219241815857, 2.1006572480275008, \"\", 0.5892967197262979, \"\", 1.418679445414047, 2.3294766030040632, 0.9932731732445923, 3.017275821277708, 3.018402330072811, 1.7858313555698593, \"\", \"\", 0.9410989844336906, \"\", \"\", 1.5764143047433703, \"\", 1.266410476290408, \"\", \"\", 0.7083446272629992, \"\", 0.6158454095284791, \"\", 0.4044774265284812, 1.21972557380821, 1.4624002233179745, 0.8149008416149297, 0.14043517720236906, 0.38565089567423355, 2.6684177028352742, \"\", 1.9310999845555457, 1.8450035069678026, 0.39430640819524687, \"\", 1.0106388254361625, \"\", \"\", \"\", \"\", 0.3348258532488357, 1.4969488921680316, \"\", \"\", 1.213582735437038, \"\", 2.8213904398970993, 1.2191454265512862, \"\", \"\", 0.7531792251081537, 0.7238113778246976, \"\", \"\", \"\", 1.9309564343794843, 0.6896482705922489, \"\", 1.1675535214066992, 0.847788900764908, 0.7124155707715303, 1.541105780757185, 0.28239646460464696, \"\", \"\", 1.4708365670965522, \"\", \"\", 2.9127461208272987, \"\", \"\", 0.20672173490110432, \"\", 1.7690209799489347, \"\", 2.0368763617959917], \"yaxis\": \"y2\"}, {\"connectgaps\": false, \"fill\": \"tozeroy\", \"line\": {\"color\": \"red\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 0.5}, \"mode\": \"lines\", \"name\": \"Spread\", \"showlegend\": false, \"type\": \"scatter\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \"xaxis\": \"x2\", \"y\": [\"\", \"\", \"\", -1.1990409473171195, -1.7768692464246727, -3.4502390823050164, \"\", -0.1954296372371383, -1.7389915480184, -0.2668795488937492, \"\", \"\", -1.2452112692045914, \"\", \"\", \"\", \"\", \"\", \"\", -1.6955555018291188, \"\", \"\", \"\", \"\", -2.0446941384039947, \"\", -0.19219492282637907, \"\", \"\", \"\", \"\", \"\", \"\", -1.3753865157177068, -0.9831080784604157, \"\", -0.7528582593367015, -1.420498450207871, \"\", -2.7666033892014608, \"\", -2.119600140613115, -1.6568697431064001, \"\", -0.950079034745388, \"\", -1.2190335556135083, \"\", \"\", \"\", \"\", \"\", \"\", \"\", -0.3191386901799315, \"\", \"\", \"\", -1.6785244658630012, \"\", -0.3518701988154955, -0.45059875656066906, -0.14133517677117113, -0.06406010862692679, \"\", \"\", -0.9555389428921681, -1.0643385983041982, \"\", -2.048561913183912, \"\", \"\", -0.9655751773981122, -0.5706291315897459, \"\", \"\", -2.8608504533643644, -1.4128154675011102, -0.046026082940258395, \"\", \"\", -0.6557969275255325, \"\", \"\", \"\", \"\", \"\", -3.546477657596804, -1.1082611427321039, \"\", -2.439274584080515, -0.31649149286051614, \"\", -1.800080308176359, -2.801072295485666, \"\", -2.2244718222537663, \"\", -1.2009989664446898, \"\"], \"yaxis\": \"y2\"}], {\"hovermode\": \"x\", \"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis2\": {\"anchor\": \"y2\", \"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"showticklabels\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"domain\": [0.3, 1], \"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis2\": {\"domain\": [0, 0.25], \"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"Spread\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('b460a593-440a-4c30-a40b-ff8d3192d37c'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); histogram \u00b6 df [ 'A' ] . iplot ( kind = 'hist' , bins = 25 ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"7df79106-41c2-4781-b52d-a26a4871422b\")) { Plotly.newPlot( '7df79106-41c2-4781-b52d-a26a4871422b', [{\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"A\", \"nbinsx\": 25, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}], {\"barmode\": \"overlay\", \"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('7df79106-41c2-4781-b52d-a26a4871422b'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); df . iplot ( kind = 'bubble' , x = 'A' , y = 'B' , size = 'C' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"46c02392-e6c3-40f3-bc40-096de16f4885\")) { Plotly.newPlot( '46c02392-e6c3-40f3-bc40-096de16f4885', [{\"marker\": {\"color\": [\"rgb(255, 153, 51)\", \"rgb(55, 128, 191)\", \"rgb(50, 171, 96)\", \"rgb(128, 0, 128)\", \"rgb(219, 64, 82)\", \"rgb(0, 128, 128)\", \"rgb(255, 255, 51)\", \"rgb(128, 128, 0)\", \"rgb(251, 128, 114)\", \"rgb(128, 177, 211)\"], \"line\": {\"width\": 1.3}, \"size\": [24, 31, 59, 40, 87, 66, 58, 56, 82, 80, 62, 76, 61, 42, 42, 83, 92, 78, 49, 99, 55, 54, 49, 82, 28, 70, 49, 82, 59, 52, 44, 57, 69, 41, 78, 43, 68, 53, 59, 42, 80, 75, 53, 47, 50, 57, 45, 77, 63, 75, 36, 36, 68, 87, 83, 43, 52, 97, 46, 38, 91, 56, 96, 77, 68, 76, 74, 64, 87, 66, 59, 49, 96, 70, 71, 52, 26, 39, 72, 43, 12, 30, 53, 66, 66, 41, 62, 86, 38, 80, 79, 72, 81, 30, 68, 49, 112, 89, 54, 56], \"symbol\": \"circle\"}, \"mode\": \"markers\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('46c02392-e6c3-40f3-bc40-096de16f4885'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); scatter_matrix() \u00b6 Similar to sns.pairplot() df . scatter_matrix () require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"52beb8f2-3df1-4fd0-9c94-a8d03d2d6010\")) { Plotly.newPlot( '52beb8f2-3df1-4fd0-9c94-a8d03d2d6010', [{\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"A\", \"nbinsx\": 10, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"xaxis\": \"x\", \"yaxis\": \"y\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"A\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"xaxis\": \"x2\", \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"yaxis\": \"y2\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"A\", \"text\": \"\", \"type\": \"scatter\", \"x\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"xaxis\": \"x3\", \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"yaxis\": \"y3\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"A\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"xaxis\": \"x4\", \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"yaxis\": \"y4\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"xaxis\": \"x5\", \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"yaxis\": \"y5\"}, {\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(55, 128, 191, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"B\", \"nbinsx\": 10, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"xaxis\": \"x6\", \"yaxis\": \"y6\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"xaxis\": \"x7\", \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"yaxis\": \"y7\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"xaxis\": \"x8\", \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"yaxis\": \"y8\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"C\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"xaxis\": \"x9\", \"y\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"yaxis\": \"y9\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"C\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"xaxis\": \"x10\", \"y\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"yaxis\": \"y10\"}, {\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(50, 171, 96, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"C\", \"nbinsx\": 10, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"xaxis\": \"x11\", \"yaxis\": \"y11\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"C\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"xaxis\": \"x12\", \"y\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"yaxis\": \"y12\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"D\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"xaxis\": \"x13\", \"y\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"yaxis\": \"y13\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"D\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"xaxis\": \"x14\", \"y\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"yaxis\": \"y14\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"D\", \"text\": \"\", \"type\": \"scatter\", \"x\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"xaxis\": \"x15\", \"y\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"yaxis\": \"y15\"}, {\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(128, 0, 128, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"D\", \"nbinsx\": 10, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"xaxis\": \"x16\", \"yaxis\": \"y16\"}], {\"bargap\": 0.02, \"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"showlegend\": false, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 0.2125], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis10\": {\"anchor\": \"y10\", \"domain\": [0.2625, 0.475], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis11\": {\"anchor\": \"y11\", \"domain\": [0.525, 0.7375], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis12\": {\"anchor\": \"y12\", \"domain\": [0.7875, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis13\": {\"anchor\": \"y13\", \"domain\": [0.0, 0.2125], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis14\": {\"anchor\": \"y14\", \"domain\": [0.2625, 0.475], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis15\": {\"anchor\": \"y15\", \"domain\": [0.525, 0.7375], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis16\": {\"anchor\": \"y16\", \"domain\": [0.7875, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis2\": {\"anchor\": \"y2\", \"domain\": [0.2625, 0.475], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis3\": {\"anchor\": \"y3\", \"domain\": [0.525, 0.7375], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis4\": {\"anchor\": \"y4\", \"domain\": [0.7875, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis5\": {\"anchor\": \"y5\", \"domain\": [0.0, 0.2125], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis6\": {\"anchor\": \"y6\", \"domain\": [0.2625, 0.475], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis7\": {\"anchor\": \"y7\", \"domain\": [0.525, 0.7375], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis8\": {\"anchor\": \"y8\", \"domain\": [0.7875, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis9\": {\"anchor\": \"y9\", \"domain\": [0.0, 0.2125], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.8025, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis10\": {\"anchor\": \"x10\", \"domain\": [0.2675, 0.465], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis11\": {\"anchor\": \"x11\", \"domain\": [0.2675, 0.465], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis12\": {\"anchor\": \"x12\", \"domain\": [0.2675, 0.465], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis13\": {\"anchor\": \"x13\", \"domain\": [0.0, 0.1975], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis14\": {\"anchor\": \"x14\", \"domain\": [0.0, 0.1975], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis15\": {\"anchor\": \"x15\", \"domain\": [0.0, 0.1975], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis16\": {\"anchor\": \"x16\", \"domain\": [0.0, 0.1975], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis2\": {\"anchor\": \"x2\", \"domain\": [0.8025, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis3\": {\"anchor\": \"x3\", \"domain\": [0.8025, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis4\": {\"anchor\": \"x4\", \"domain\": [0.8025, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis5\": {\"anchor\": \"x5\", \"domain\": [0.535, 0.7325], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis6\": {\"anchor\": \"x6\", \"domain\": [0.535, 0.7325], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis7\": {\"anchor\": \"x7\", \"domain\": [0.535, 0.7325], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis8\": {\"anchor\": \"x8\", \"domain\": [0.535, 0.7325], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis9\": {\"anchor\": \"x9\", \"domain\": [0.2675, 0.465], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('52beb8f2-3df1-4fd0-9c94-a8d03d2d6010'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"Plotly and Cufflinks"},{"location":"python_intro/02_11_plotting_ploty.html#installation","text":"In order for this all to work, you'll need to install plotly and cufflinks to call plots directly off of a pandas dataframe. These libraries are not currently available through conda but are available through pip . Install the libraries at your command line/terminal using: pip install plotly pip install cufflinks ** NOTE: Make sure you only have one installation of Python on your computer when you do this, otherwise the installation may not work. **","title":"Installation"},{"location":"python_intro/02_11_plotting_ploty.html#imports-and-set-up","text":"import pandas as pd import numpy as np #%matplotlib inline from plotly import __version__ from plotly.offline import download_plotlyjs , init_notebook_mode , plot , iplot print ( __version__ ) # requires version >= 1.9.0 4.3.0 import cufflinks as cf # For Notebooks init_notebook_mode ( connected = True ) window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); } # For offline use cf . go_offline () window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); }","title":"Imports and Set-up"},{"location":"python_intro/02_11_plotting_ploty.html#fake-data","text":"df = pd . DataFrame ( np . random . randn ( 100 , 4 ), columns = 'A B C D' . split ()) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 1.443094 1.049955 -2.171906 0.493646 1 0.215467 -0.428265 -1.846725 -0.239502 2 -0.540795 -1.273190 -0.326949 0.787827 3 -0.790861 0.408180 -1.324640 1.621891 4 -0.865603 0.911266 1.180761 0.146927 df2 = pd . DataFrame ({ 'Category' :[ 'A' , 'B' , 'C' ], 'Values' :[ 32 , 43 , 50 ]}) df2 . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Category Values 0 A 32 1 B 43 2 C 50","title":"Fake Data"},{"location":"python_intro/02_11_plotting_ploty.html#using-cufflinks-and-iplot","text":"scatter bar box spread ratio heatmap surface histogram bubble","title":"Using Cufflinks and iplot()"},{"location":"python_intro/02_11_plotting_ploty.html#scatter","text":"df . iplot ( kind = 'scatter' , x = 'A' , y = 'B' , mode = 'markers' , size = 10 ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"91765269-716f-4bd2-b1a9-514b53782658\")) { Plotly.newPlot( '91765269-716f-4bd2-b1a9-514b53782658', [{\"line\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 10, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('91765269-716f-4bd2-b1a9-514b53782658'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"Scatter"},{"location":"python_intro/02_11_plotting_ploty.html#bar-plots","text":"df2 . iplot ( kind = 'bar' , x = 'Category' , y = 'Values' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"175d443f-d88d-41c4-87cd-da4fa7be292e\")) { Plotly.newPlot( '175d443f-d88d-41c4-87cd-da4fa7be292e', [{\"marker\": {\"color\": \"rgba(255, 153, 51, 0.6)\", \"line\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"width\": 1}}, \"name\": \"Values\", \"orientation\": \"v\", \"text\": \"\", \"type\": \"bar\", \"x\": [\"A\", \"B\", \"C\"], \"y\": [32, 43, 50]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('175d443f-d88d-41c4-87cd-da4fa7be292e'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); df . count () . iplot ( kind = 'bar' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"8387ca92-054b-42ed-bb9d-e01e412b50af\")) { Plotly.newPlot( '8387ca92-054b-42ed-bb9d-e01e412b50af', [{\"marker\": {\"color\": \"rgba(255, 153, 51, 0.6)\", \"line\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"width\": 1}}, \"name\": \"None\", \"orientation\": \"v\", \"text\": \"\", \"type\": \"bar\", \"x\": [\"A\", \"B\", \"C\", \"D\"], \"y\": [100, 100, 100, 100]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('8387ca92-054b-42ed-bb9d-e01e412b50af'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"Bar Plots"},{"location":"python_intro/02_11_plotting_ploty.html#boxplots","text":"df . iplot ( kind = 'box' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"e678dca6-2769-43dd-bff3-09bfe70eea32\")) { Plotly.newPlot( 'e678dca6-2769-43dd-bff3-09bfe70eea32', [{\"boxpoints\": false, \"line\": {\"width\": 1.3}, \"marker\": {\"color\": \"rgba(255, 153, 51, 1.0)\"}, \"name\": \"A\", \"orientation\": \"v\", \"type\": \"box\", \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}, {\"boxpoints\": false, \"line\": {\"width\": 1.3}, \"marker\": {\"color\": \"rgba(55, 128, 191, 1.0)\"}, \"name\": \"B\", \"orientation\": \"v\", \"type\": \"box\", \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}, {\"boxpoints\": false, \"line\": {\"width\": 1.3}, \"marker\": {\"color\": \"rgba(50, 171, 96, 1.0)\"}, \"name\": \"C\", \"orientation\": \"v\", \"type\": \"box\", \"y\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415]}, {\"boxpoints\": false, \"line\": {\"width\": 1.3}, \"marker\": {\"color\": \"rgba(128, 0, 128, 1.0)\"}, \"name\": \"D\", \"orientation\": \"v\", \"type\": \"box\", \"y\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('e678dca6-2769-43dd-bff3-09bfe70eea32'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"Boxplots"},{"location":"python_intro/02_11_plotting_ploty.html#3d-surface","text":"df3 = pd . DataFrame ({ 'x' :[ 1 , 2 , 3 , 4 , 5 ], 'y' :[ 10 , 20 , 30 , 20 , 10 ], 'z' :[ 5 , 4 , 3 , 2 , 1 ]}) df3 . iplot ( kind = 'surface' , colorscale = 'rdylbu' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"825f4807-44e8-4f6a-8fa7-319ff314df1f\")) { Plotly.newPlot( '825f4807-44e8-4f6a-8fa7-319ff314df1f', [{\"colorscale\": [[0.0, \"rgb(165,0,38)\"], [0.1, \"rgb(215,48,39)\"], [0.2, \"rgb(244,109,67)\"], [0.3, \"rgb(253,174,97)\"], [0.4, \"rgb(254,224,144)\"], [0.5, \"rgb(255,255,191)\"], [0.6, \"rgb(224,243,248)\"], [0.7, \"rgb(171,217,233)\"], [0.8, \"rgb(116,173,209)\"], [0.9, \"rgb(69,117,180)\"], [1.0, \"rgb(49,54,149)\"]], \"type\": \"surface\", \"x\": [0, 1, 2, 3, 4], \"y\": [\"x\", \"y\", \"z\"], \"z\": [[1, 2, 3, 4, 5], [10, 20, 30, 20, 10], [5, 4, 3, 2, 1]]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('825f4807-44e8-4f6a-8fa7-319ff314df1f'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"3d Surface"},{"location":"python_intro/02_11_plotting_ploty.html#spread","text":"df [[ 'A' , 'B' ]] . iplot ( kind = 'spread' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"b460a593-440a-4c30-a40b-ff8d3192d37c\")) { Plotly.newPlot( 'b460a593-440a-4c30-a40b-ff8d3192d37c', [{\"line\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"mode\": \"lines\", \"name\": \"A\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}, {\"line\": {\"color\": \"rgba(55, 128, 191, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"mode\": \"lines\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}, {\"connectgaps\": false, \"fill\": \"tozeroy\", \"line\": {\"color\": \"green\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 0.5}, \"mode\": \"lines\", \"name\": \"Spread\", \"showlegend\": false, \"type\": \"scatter\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \"xaxis\": \"x2\", \"y\": [0.3931386912042505, 0.6437319132483335, 0.7323953042912329, \"\", \"\", \"\", 1.294526654721476, \"\", \"\", \"\", 1.0786721525736995, 0.6170731779029573, \"\", 0.29292175604215775, 0.35604795378709153, 1.2923424157651118, 0.5254478624112127, 0.6310257845728178, 1.7444194443759167, \"\", 1.7695634909798035, 2.5802757889750674, 0.48234219241815857, 2.1006572480275008, \"\", 0.5892967197262979, \"\", 1.418679445414047, 2.3294766030040632, 0.9932731732445923, 3.017275821277708, 3.018402330072811, 1.7858313555698593, \"\", \"\", 0.9410989844336906, \"\", \"\", 1.5764143047433703, \"\", 1.266410476290408, \"\", \"\", 0.7083446272629992, \"\", 0.6158454095284791, \"\", 0.4044774265284812, 1.21972557380821, 1.4624002233179745, 0.8149008416149297, 0.14043517720236906, 0.38565089567423355, 2.6684177028352742, \"\", 1.9310999845555457, 1.8450035069678026, 0.39430640819524687, \"\", 1.0106388254361625, \"\", \"\", \"\", \"\", 0.3348258532488357, 1.4969488921680316, \"\", \"\", 1.213582735437038, \"\", 2.8213904398970993, 1.2191454265512862, \"\", \"\", 0.7531792251081537, 0.7238113778246976, \"\", \"\", \"\", 1.9309564343794843, 0.6896482705922489, \"\", 1.1675535214066992, 0.847788900764908, 0.7124155707715303, 1.541105780757185, 0.28239646460464696, \"\", \"\", 1.4708365670965522, \"\", \"\", 2.9127461208272987, \"\", \"\", 0.20672173490110432, \"\", 1.7690209799489347, \"\", 2.0368763617959917], \"yaxis\": \"y2\"}, {\"connectgaps\": false, \"fill\": \"tozeroy\", \"line\": {\"color\": \"red\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 0.5}, \"mode\": \"lines\", \"name\": \"Spread\", \"showlegend\": false, \"type\": \"scatter\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \"xaxis\": \"x2\", \"y\": [\"\", \"\", \"\", -1.1990409473171195, -1.7768692464246727, -3.4502390823050164, \"\", -0.1954296372371383, -1.7389915480184, -0.2668795488937492, \"\", \"\", -1.2452112692045914, \"\", \"\", \"\", \"\", \"\", \"\", -1.6955555018291188, \"\", \"\", \"\", \"\", -2.0446941384039947, \"\", -0.19219492282637907, \"\", \"\", \"\", \"\", \"\", \"\", -1.3753865157177068, -0.9831080784604157, \"\", -0.7528582593367015, -1.420498450207871, \"\", -2.7666033892014608, \"\", -2.119600140613115, -1.6568697431064001, \"\", -0.950079034745388, \"\", -1.2190335556135083, \"\", \"\", \"\", \"\", \"\", \"\", \"\", -0.3191386901799315, \"\", \"\", \"\", -1.6785244658630012, \"\", -0.3518701988154955, -0.45059875656066906, -0.14133517677117113, -0.06406010862692679, \"\", \"\", -0.9555389428921681, -1.0643385983041982, \"\", -2.048561913183912, \"\", \"\", -0.9655751773981122, -0.5706291315897459, \"\", \"\", -2.8608504533643644, -1.4128154675011102, -0.046026082940258395, \"\", \"\", -0.6557969275255325, \"\", \"\", \"\", \"\", \"\", -3.546477657596804, -1.1082611427321039, \"\", -2.439274584080515, -0.31649149286051614, \"\", -1.800080308176359, -2.801072295485666, \"\", -2.2244718222537663, \"\", -1.2009989664446898, \"\"], \"yaxis\": \"y2\"}], {\"hovermode\": \"x\", \"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis2\": {\"anchor\": \"y2\", \"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"showticklabels\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"domain\": [0.3, 1], \"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis2\": {\"domain\": [0, 0.25], \"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"Spread\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('b460a593-440a-4c30-a40b-ff8d3192d37c'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"Spread"},{"location":"python_intro/02_11_plotting_ploty.html#histogram","text":"df [ 'A' ] . iplot ( kind = 'hist' , bins = 25 ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"7df79106-41c2-4781-b52d-a26a4871422b\")) { Plotly.newPlot( '7df79106-41c2-4781-b52d-a26a4871422b', [{\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"A\", \"nbinsx\": 25, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}], {\"barmode\": \"overlay\", \"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('7df79106-41c2-4781-b52d-a26a4871422b'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); df . iplot ( kind = 'bubble' , x = 'A' , y = 'B' , size = 'C' ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"46c02392-e6c3-40f3-bc40-096de16f4885\")) { Plotly.newPlot( '46c02392-e6c3-40f3-bc40-096de16f4885', [{\"marker\": {\"color\": [\"rgb(255, 153, 51)\", \"rgb(55, 128, 191)\", \"rgb(50, 171, 96)\", \"rgb(128, 0, 128)\", \"rgb(219, 64, 82)\", \"rgb(0, 128, 128)\", \"rgb(255, 255, 51)\", \"rgb(128, 128, 0)\", \"rgb(251, 128, 114)\", \"rgb(128, 177, 211)\"], \"line\": {\"width\": 1.3}, \"size\": [24, 31, 59, 40, 87, 66, 58, 56, 82, 80, 62, 76, 61, 42, 42, 83, 92, 78, 49, 99, 55, 54, 49, 82, 28, 70, 49, 82, 59, 52, 44, 57, 69, 41, 78, 43, 68, 53, 59, 42, 80, 75, 53, 47, 50, 57, 45, 77, 63, 75, 36, 36, 68, 87, 83, 43, 52, 97, 46, 38, 91, 56, 96, 77, 68, 76, 74, 64, 87, 66, 59, 49, 96, 70, 71, 52, 26, 39, 72, 43, 12, 30, 53, 66, 66, 41, 62, 86, 38, 80, 79, 72, 81, 30, 68, 49, 112, 89, 54, 56], \"symbol\": \"circle\"}, \"mode\": \"markers\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"gridcolor\": \"#E1E5ED\", \"showgrid\": true, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('46c02392-e6c3-40f3-bc40-096de16f4885'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"histogram"},{"location":"python_intro/02_11_plotting_ploty.html#scatter_matrix","text":"Similar to sns.pairplot() df . scatter_matrix () require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\"52beb8f2-3df1-4fd0-9c94-a8d03d2d6010\")) { Plotly.newPlot( '52beb8f2-3df1-4fd0-9c94-a8d03d2d6010', [{\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"A\", \"nbinsx\": 10, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"xaxis\": \"x\", \"yaxis\": \"y\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"A\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"xaxis\": \"x2\", \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"yaxis\": \"y2\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"A\", \"text\": \"\", \"type\": \"scatter\", \"x\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"xaxis\": \"x3\", \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"yaxis\": \"y3\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"A\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"xaxis\": \"x4\", \"y\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"yaxis\": \"y4\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"xaxis\": \"x5\", \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"yaxis\": \"y5\"}, {\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(55, 128, 191, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"B\", \"nbinsx\": 10, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"xaxis\": \"x6\", \"yaxis\": \"y6\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"xaxis\": \"x7\", \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"yaxis\": \"y7\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"B\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"xaxis\": \"x8\", \"y\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"yaxis\": \"y8\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"C\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"xaxis\": \"x9\", \"y\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"yaxis\": \"y9\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"C\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"xaxis\": \"x10\", \"y\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"yaxis\": \"y10\"}, {\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(50, 171, 96, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"C\", \"nbinsx\": 10, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"xaxis\": \"x11\", \"yaxis\": \"y11\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"C\", \"text\": \"\", \"type\": \"scatter\", \"x\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"xaxis\": \"x12\", \"y\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"yaxis\": \"y12\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"D\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \"xaxis\": \"x13\", \"y\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"yaxis\": \"y13\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"D\", \"text\": \"\", \"type\": \"scatter\", \"x\": [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \"xaxis\": \"x14\", \"y\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"yaxis\": \"y14\"}, {\"line\": {\"color\": \"rgba(128, 128, 128, 1.0)\", \"dash\": \"solid\", \"shape\": \"linear\", \"width\": 1.3}, \"marker\": {\"size\": 2, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"D\", \"text\": \"\", \"type\": \"scatter\", \"x\": [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \"xaxis\": \"x15\", \"y\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"yaxis\": \"y15\"}, {\"histfunc\": \"count\", \"histnorm\": \"\", \"marker\": {\"color\": \"rgba(128, 0, 128, 1.0)\", \"line\": {\"color\": \"#4D5663\", \"width\": 1.3}}, \"name\": \"D\", \"nbinsx\": 10, \"opacity\": 0.8, \"orientation\": \"v\", \"type\": \"histogram\", \"x\": [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \"xaxis\": \"x16\", \"yaxis\": \"y16\"}], {\"bargap\": 0.02, \"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"showlegend\": false, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"font\": {\"color\": \"#4D5663\"}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 0.2125], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis10\": {\"anchor\": \"y10\", \"domain\": [0.2625, 0.475], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis11\": {\"anchor\": \"y11\", \"domain\": [0.525, 0.7375], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis12\": {\"anchor\": \"y12\", \"domain\": [0.7875, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis13\": {\"anchor\": \"y13\", \"domain\": [0.0, 0.2125], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis14\": {\"anchor\": \"y14\", \"domain\": [0.2625, 0.475], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis15\": {\"anchor\": \"y15\", \"domain\": [0.525, 0.7375], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis16\": {\"anchor\": \"y16\", \"domain\": [0.7875, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis2\": {\"anchor\": \"y2\", \"domain\": [0.2625, 0.475], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis3\": {\"anchor\": \"y3\", \"domain\": [0.525, 0.7375], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis4\": {\"anchor\": \"y4\", \"domain\": [0.7875, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis5\": {\"anchor\": \"y5\", \"domain\": [0.0, 0.2125], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis6\": {\"anchor\": \"y6\", \"domain\": [0.2625, 0.475], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis7\": {\"anchor\": \"y7\", \"domain\": [0.525, 0.7375], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis8\": {\"anchor\": \"y8\", \"domain\": [0.7875, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"xaxis9\": {\"anchor\": \"y9\", \"domain\": [0.0, 0.2125], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.8025, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis10\": {\"anchor\": \"x10\", \"domain\": [0.2675, 0.465], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis11\": {\"anchor\": \"x11\", \"domain\": [0.2675, 0.465], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis12\": {\"anchor\": \"x12\", \"domain\": [0.2675, 0.465], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis13\": {\"anchor\": \"x13\", \"domain\": [0.0, 0.1975], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis14\": {\"anchor\": \"x14\", \"domain\": [0.0, 0.1975], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis15\": {\"anchor\": \"x15\", \"domain\": [0.0, 0.1975], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis16\": {\"anchor\": \"x16\", \"domain\": [0.0, 0.1975], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis2\": {\"anchor\": \"x2\", \"domain\": [0.8025, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis3\": {\"anchor\": \"x3\", \"domain\": [0.8025, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis4\": {\"anchor\": \"x4\", \"domain\": [0.8025, 1.0], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis5\": {\"anchor\": \"x5\", \"domain\": [0.535, 0.7325], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis6\": {\"anchor\": \"x6\", \"domain\": [0.535, 0.7325], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis7\": {\"anchor\": \"x7\", \"domain\": [0.535, 0.7325], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis8\": {\"anchor\": \"x8\", \"domain\": [0.535, 0.7325], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}, \"yaxis9\": {\"anchor\": \"x9\", \"domain\": [0.2675, 0.465], \"gridcolor\": \"#E1E5ED\", \"showgrid\": false, \"tickfont\": {\"color\": \"#4D5663\"}, \"title\": {\"font\": {\"color\": \"#4D5663\"}, \"text\": \"\"}, \"zerolinecolor\": \"#E1E5ED\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true} ).then(function(){ var gd = document.getElementById('52beb8f2-3df1-4fd0-9c94-a8d03d2d6010'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"scatter_matrix()"},{"location":"python_intro/02_12_plotting_choropleth.html","text":"Offline Plotly Usage \u00b6 Get imports and set everything up to be working offline. import chart_studio.plotly as py import plotly.graph_objs as go from plotly.offline import download_plotlyjs , init_notebook_mode , plot , iplot Now set up everything so that the figures show up in the notebook: init_notebook_mode ( connected = True ) window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); } More info on other options for Offline Plotly usage can be found here . Choropleth US Maps \u00b6 Plotly's mapping can be a bit hard to get used to at first, remember to reference the cheat sheet in the data visualization folder, or find it online here . import pandas as pd Now we need to begin to build our data dictionary. Easiest way to do this is to use the dict() function of the general form: type = 'choropleth', locations = list of states locationmode = 'USA-states' colorscale= Either a predefined string: 'pairs' | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu' or create a custom colorscale text= list or array of text to display per point z= array of values on z axis (color of state) colorbar = {'title':'Colorbar Title'}) Here is a simple example: data = dict ( type = 'choropleth' , locations = [ 'AZ' , 'CA' , 'NY' ], locationmode = 'USA-states' , colorscale = 'Portland' , text = [ 'text1' , 'text2' , 'text3' ], z = [ 1.0 , 2.0 , 3.0 ], colorbar = { 'title' : 'Colorbar Title' }) Then we create the layout nested dictionary: layout = dict ( geo = { 'scope' : 'usa' }) Then we use: go . Figure ( data = [ data ] , layout = layout ) to set up the object that finally gets passed into iplot() choromap = go . Figure ( data = [ data ], layout = layout ) iplot ( choromap ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"0ffd83f2-2d09-4b5b-a347-b966e925bea9\")) { Plotly.newPlot( '0ffd83f2-2d09-4b5b-a347-b966e925bea9', [{\"colorbar\": {\"title\": {\"text\": \"Colorbar Title\"}}, \"colorscale\": [[0.0, \"rgb(12,51,131)\"], [0.25, \"rgb(10,136,186)\"], [0.5, \"rgb(242,211,56)\"], [0.75, \"rgb(242,143,56)\"], [1.0, \"rgb(217,30,30)\"]], \"locationmode\": \"USA-states\", \"locations\": [\"AZ\", \"CA\", \"NY\"], \"text\": [\"text1\", \"text2\", \"text3\"], \"type\": \"choropleth\", \"z\": [1.0, 2.0, 3.0]}], {\"geo\": {\"scope\": \"usa\"}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('0ffd83f2-2d09-4b5b-a347-b966e925bea9'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); Real Data US Map Choropleth \u00b6 Now let's show an example with some real data as well as some other options we can add to the dictionaries in data and layout. df = pd . read_csv ( '2011_US_AGRI_Exports' ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } code state category total exports beef pork poultry dairy fruits fresh fruits proc total fruits veggies fresh veggies proc total veggies corn wheat cotton text 0 AL Alabama state 1390.63 34.4 10.6 481.0 4.06 8.0 17.1 25.11 5.5 8.9 14.33 34.9 70.0 317.61 Alabama<br>Beef 34.4 Dairy 4.06<br>Fruits 25.1... 1 AK Alaska state 13.31 0.2 0.1 0.0 0.19 0.0 0.0 0.00 0.6 1.0 1.56 0.0 0.0 0.00 Alaska<br>Beef 0.2 Dairy 0.19<br>Fruits 0.0 Ve... 2 AZ Arizona state 1463.17 71.3 17.9 0.0 105.48 19.3 41.0 60.27 147.5 239.4 386.91 7.3 48.7 423.95 Arizona<br>Beef 71.3 Dairy 105.48<br>Fruits 60... 3 AR Arkansas state 3586.02 53.2 29.4 562.9 3.53 2.2 4.7 6.88 4.4 7.1 11.45 69.5 114.5 665.44 Arkansas<br>Beef 53.2 Dairy 3.53<br>Fruits 6.8... 4 CA California state 16472.88 228.7 11.1 225.4 929.95 2791.8 5944.6 8736.40 803.2 1303.5 2106.79 34.6 249.3 1064.95 California<br>Beef 228.7 Dairy 929.95<br>Frui... Now out data dictionary with some extra marker and colorbar arguments: data = dict ( type = 'choropleth' , colorscale = 'YIOrRd' , locations = df [ 'code' ], z = df [ 'total exports' ], locationmode = 'USA-states' , text = df [ 'text' ], marker = dict ( line = dict ( color = 'rgb(255,255,255)' , width = 2 )), colorbar = { 'title' : \"Millions USD\" } ) And our layout dictionary with some more arguments: layout = dict ( title = '2011 US Agriculture Exports by State' , geo = dict ( scope = 'usa' , showlakes = True , lakecolor = 'rgb(85,173,240)' ) ) choromap = go . Figure ( data = [ data ], layout = layout ) --------------------------------------------------------------------------- ValueError Traceback ( most recent call last ) < ipython - input - 15 - 243104 ae4228 > in < module > ----> 1 choromap = go . Figure ( data = [ data ] , layout = layout ) ~/ . local / lib / python3 .6 / site - packages / plotly / graph_objs / _figure . py in __init__ ( self , data , layout , frames , skip_invalid , ** kwargs ) 606 is invalid AND skip_invalid is False 607 \"\"\" --> 608 super(Figure, self).__init__(data, layout, frames, skip_invalid, **kwargs) 609 610 def add_area( ~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in __init__(self, data, layout_plotly, frames, skip_invalid, **kwargs) 155 156 # ### Import traces ### --> 157 data = self._data_validator.validate_coerce(data, skip_invalid=skip_invalid) 158 159 # ### Save tuple of trace objects ### ~/.local/lib/python3.6/site-packages/_plotly_utils/basevalidators.py in validate_coerce(self, v, skip_invalid) 2643 else: 2644 trace = self.class_map[trace_type]( -> 2645 skip_invalid=skip_invalid, **v_copy 2646 ) 2647 res.append(trace) ~/.local/lib/python3.6/site-packages/plotly/graph_objs/__init__.py in __init__(self, arg, autocolorscale, coloraxis, colorbar, colorscale, customdata, customdatasrc, geo, hoverinfo, hoverinfosrc, hoverlabel, hovertemplate, hovertemplatesrc, hovertext, hovertextsrc, ids, idssrc, locationmode, locations, locationssrc, marker, meta, metasrc, name, reversescale, selected, selectedpoints, showscale, stream, text, textsrc, uid, uirevision, unselected, visible, z, zauto, zmax, zmid, zmin, zsrc, **kwargs) 81395 self[\" colorbar \"] = colorbar if colorbar is not None else _v 81396 _v = arg.pop(\" colorscale \", None) > 81397 self[\" colorscale \"] = colorscale if colorscale is not None else _v 81398 _v = arg.pop(\" customdata \", None) 81399 self[\" customdata \"] = customdata if customdata is not None else _v ~/ . local / lib / python3 .6 / site - packages / plotly / basedatatypes . py in __setitem__ ( self , prop , value ) 3477 # ### Handle simple property ### 3478 else : -> 3479 self . _set_prop ( prop , value ) 3480 3481 # Handle non - scalar case ~/ . local / lib / python3 .6 / site - packages / plotly / basedatatypes . py in _set_prop ( self , prop , val ) 3764 return 3765 else : -> 3766 raise err 3767 3768 # val is None ~/ . local / lib / python3 .6 / site - packages / plotly / basedatatypes . py in _set_prop ( self , prop , val ) 3759 validator = self . _validators . get ( prop ) 3760 try : -> 3761 val = validator . validate_coerce ( val ) 3762 except ValueError as err : 3763 if self . _skip_invalid : ~/ . local / lib / python3 .6 / site - packages / _plotly_utils / basevalidators . py in validate_coerce ( self , v ) 1619 1620 if not v_valid : -> 1621 self . raise_invalid_val ( v ) 1622 1623 return v ~/ . local / lib / python3 .6 / site - packages / _plotly_utils / basevalidators . py in raise_invalid_val ( self , v , inds ) 281 typ = type_str ( v ), 282 v = repr ( v ), --> 283 valid_clr_desc = self . description (), 284 ) 285 ) ValueError : Invalid value of type 'builtins.str' received for the 'colorscale' property of choropleth Received value : 'YIOrRd' The 'colorscale' property is a colorscale and may be specified as : - A list of colors that will be spaced evenly to create the colorscale . Many predefined colorscale lists are included in the sequential , diverging , and cyclical modules in the plotly . colors package . - A list of 2 - element lists where the first element is the normalized color level value ( starting at 0 and ending at 1 ), and the second item is a valid color string . ( e . g . [ [0, 'green' ] , [ 0.5, 'red' ] , [ 1.0, 'rgb(0, 0, 255)' ] ] ) - One of the following named colorscales : [ 'aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance', 'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg', 'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl', 'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric', 'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys', 'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet', 'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges', 'orrd', 'oryel', 'peach', 'phase', 'picnic', 'pinkyl', 'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn', 'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu', 'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar', 'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn', 'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr', 'ylorrd' ] iplot ( choromap ) World Choropleth Map \u00b6 Now let's see an example with a World Map: df = pd . read_csv ( '2014_World_GDP' ) df . head () data = dict ( type = 'choropleth' , locations = df [ 'CODE' ], z = df [ 'GDP (BILLIONS)' ], text = df [ 'COUNTRY' ], colorbar = { 'title' : 'GDP Billions US' }, ) layout = dict ( title = '2014 Global GDP' , geo = dict ( showframe = False , projection = { 'type' : 'Mercator' } ) ) choromap = go . Figure ( data = [ data ], layout = layout ) iplot ( choromap )","title":"Choropleth Maps"},{"location":"python_intro/02_12_plotting_choropleth.html#offline-plotly-usage","text":"Get imports and set everything up to be working offline. import chart_studio.plotly as py import plotly.graph_objs as go from plotly.offline import download_plotlyjs , init_notebook_mode , plot , iplot Now set up everything so that the figures show up in the notebook: init_notebook_mode ( connected = True ) window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); } More info on other options for Offline Plotly usage can be found here .","title":"Offline Plotly Usage"},{"location":"python_intro/02_12_plotting_choropleth.html#choropleth-us-maps","text":"Plotly's mapping can be a bit hard to get used to at first, remember to reference the cheat sheet in the data visualization folder, or find it online here . import pandas as pd Now we need to begin to build our data dictionary. Easiest way to do this is to use the dict() function of the general form: type = 'choropleth', locations = list of states locationmode = 'USA-states' colorscale= Either a predefined string: 'pairs' | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu' or create a custom colorscale text= list or array of text to display per point z= array of values on z axis (color of state) colorbar = {'title':'Colorbar Title'}) Here is a simple example: data = dict ( type = 'choropleth' , locations = [ 'AZ' , 'CA' , 'NY' ], locationmode = 'USA-states' , colorscale = 'Portland' , text = [ 'text1' , 'text2' , 'text3' ], z = [ 1.0 , 2.0 , 3.0 ], colorbar = { 'title' : 'Colorbar Title' }) Then we create the layout nested dictionary: layout = dict ( geo = { 'scope' : 'usa' }) Then we use: go . Figure ( data = [ data ] , layout = layout ) to set up the object that finally gets passed into iplot() choromap = go . Figure ( data = [ data ], layout = layout ) iplot ( choromap ) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"0ffd83f2-2d09-4b5b-a347-b966e925bea9\")) { Plotly.newPlot( '0ffd83f2-2d09-4b5b-a347-b966e925bea9', [{\"colorbar\": {\"title\": {\"text\": \"Colorbar Title\"}}, \"colorscale\": [[0.0, \"rgb(12,51,131)\"], [0.25, \"rgb(10,136,186)\"], [0.5, \"rgb(242,211,56)\"], [0.75, \"rgb(242,143,56)\"], [1.0, \"rgb(217,30,30)\"]], \"locationmode\": \"USA-states\", \"locations\": [\"AZ\", \"CA\", \"NY\"], \"text\": [\"text1\", \"text2\", \"text3\"], \"type\": \"choropleth\", \"z\": [1.0, 2.0, 3.0]}], {\"geo\": {\"scope\": \"usa\"}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('0ffd83f2-2d09-4b5b-a347-b966e925bea9'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"Choropleth US Maps"},{"location":"python_intro/02_12_plotting_choropleth.html#real-data-us-map-choropleth","text":"Now let's show an example with some real data as well as some other options we can add to the dictionaries in data and layout. df = pd . read_csv ( '2011_US_AGRI_Exports' ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } code state category total exports beef pork poultry dairy fruits fresh fruits proc total fruits veggies fresh veggies proc total veggies corn wheat cotton text 0 AL Alabama state 1390.63 34.4 10.6 481.0 4.06 8.0 17.1 25.11 5.5 8.9 14.33 34.9 70.0 317.61 Alabama<br>Beef 34.4 Dairy 4.06<br>Fruits 25.1... 1 AK Alaska state 13.31 0.2 0.1 0.0 0.19 0.0 0.0 0.00 0.6 1.0 1.56 0.0 0.0 0.00 Alaska<br>Beef 0.2 Dairy 0.19<br>Fruits 0.0 Ve... 2 AZ Arizona state 1463.17 71.3 17.9 0.0 105.48 19.3 41.0 60.27 147.5 239.4 386.91 7.3 48.7 423.95 Arizona<br>Beef 71.3 Dairy 105.48<br>Fruits 60... 3 AR Arkansas state 3586.02 53.2 29.4 562.9 3.53 2.2 4.7 6.88 4.4 7.1 11.45 69.5 114.5 665.44 Arkansas<br>Beef 53.2 Dairy 3.53<br>Fruits 6.8... 4 CA California state 16472.88 228.7 11.1 225.4 929.95 2791.8 5944.6 8736.40 803.2 1303.5 2106.79 34.6 249.3 1064.95 California<br>Beef 228.7 Dairy 929.95<br>Frui... Now out data dictionary with some extra marker and colorbar arguments: data = dict ( type = 'choropleth' , colorscale = 'YIOrRd' , locations = df [ 'code' ], z = df [ 'total exports' ], locationmode = 'USA-states' , text = df [ 'text' ], marker = dict ( line = dict ( color = 'rgb(255,255,255)' , width = 2 )), colorbar = { 'title' : \"Millions USD\" } ) And our layout dictionary with some more arguments: layout = dict ( title = '2011 US Agriculture Exports by State' , geo = dict ( scope = 'usa' , showlakes = True , lakecolor = 'rgb(85,173,240)' ) ) choromap = go . Figure ( data = [ data ], layout = layout ) --------------------------------------------------------------------------- ValueError Traceback ( most recent call last ) < ipython - input - 15 - 243104 ae4228 > in < module > ----> 1 choromap = go . Figure ( data = [ data ] , layout = layout ) ~/ . local / lib / python3 .6 / site - packages / plotly / graph_objs / _figure . py in __init__ ( self , data , layout , frames , skip_invalid , ** kwargs ) 606 is invalid AND skip_invalid is False 607 \"\"\" --> 608 super(Figure, self).__init__(data, layout, frames, skip_invalid, **kwargs) 609 610 def add_area( ~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in __init__(self, data, layout_plotly, frames, skip_invalid, **kwargs) 155 156 # ### Import traces ### --> 157 data = self._data_validator.validate_coerce(data, skip_invalid=skip_invalid) 158 159 # ### Save tuple of trace objects ### ~/.local/lib/python3.6/site-packages/_plotly_utils/basevalidators.py in validate_coerce(self, v, skip_invalid) 2643 else: 2644 trace = self.class_map[trace_type]( -> 2645 skip_invalid=skip_invalid, **v_copy 2646 ) 2647 res.append(trace) ~/.local/lib/python3.6/site-packages/plotly/graph_objs/__init__.py in __init__(self, arg, autocolorscale, coloraxis, colorbar, colorscale, customdata, customdatasrc, geo, hoverinfo, hoverinfosrc, hoverlabel, hovertemplate, hovertemplatesrc, hovertext, hovertextsrc, ids, idssrc, locationmode, locations, locationssrc, marker, meta, metasrc, name, reversescale, selected, selectedpoints, showscale, stream, text, textsrc, uid, uirevision, unselected, visible, z, zauto, zmax, zmid, zmin, zsrc, **kwargs) 81395 self[\" colorbar \"] = colorbar if colorbar is not None else _v 81396 _v = arg.pop(\" colorscale \", None) > 81397 self[\" colorscale \"] = colorscale if colorscale is not None else _v 81398 _v = arg.pop(\" customdata \", None) 81399 self[\" customdata \"] = customdata if customdata is not None else _v ~/ . local / lib / python3 .6 / site - packages / plotly / basedatatypes . py in __setitem__ ( self , prop , value ) 3477 # ### Handle simple property ### 3478 else : -> 3479 self . _set_prop ( prop , value ) 3480 3481 # Handle non - scalar case ~/ . local / lib / python3 .6 / site - packages / plotly / basedatatypes . py in _set_prop ( self , prop , val ) 3764 return 3765 else : -> 3766 raise err 3767 3768 # val is None ~/ . local / lib / python3 .6 / site - packages / plotly / basedatatypes . py in _set_prop ( self , prop , val ) 3759 validator = self . _validators . get ( prop ) 3760 try : -> 3761 val = validator . validate_coerce ( val ) 3762 except ValueError as err : 3763 if self . _skip_invalid : ~/ . local / lib / python3 .6 / site - packages / _plotly_utils / basevalidators . py in validate_coerce ( self , v ) 1619 1620 if not v_valid : -> 1621 self . raise_invalid_val ( v ) 1622 1623 return v ~/ . local / lib / python3 .6 / site - packages / _plotly_utils / basevalidators . py in raise_invalid_val ( self , v , inds ) 281 typ = type_str ( v ), 282 v = repr ( v ), --> 283 valid_clr_desc = self . description (), 284 ) 285 ) ValueError : Invalid value of type 'builtins.str' received for the 'colorscale' property of choropleth Received value : 'YIOrRd' The 'colorscale' property is a colorscale and may be specified as : - A list of colors that will be spaced evenly to create the colorscale . Many predefined colorscale lists are included in the sequential , diverging , and cyclical modules in the plotly . colors package . - A list of 2 - element lists where the first element is the normalized color level value ( starting at 0 and ending at 1 ), and the second item is a valid color string . ( e . g . [ [0, 'green' ] , [ 0.5, 'red' ] , [ 1.0, 'rgb(0, 0, 255)' ] ] ) - One of the following named colorscales : [ 'aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance', 'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg', 'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl', 'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric', 'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys', 'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet', 'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges', 'orrd', 'oryel', 'peach', 'phase', 'picnic', 'pinkyl', 'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn', 'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu', 'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar', 'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn', 'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr', 'ylorrd' ] iplot ( choromap )","title":"Real Data US Map Choropleth"},{"location":"python_intro/02_12_plotting_choropleth.html#world-choropleth-map","text":"Now let's see an example with a World Map: df = pd . read_csv ( '2014_World_GDP' ) df . head () data = dict ( type = 'choropleth' , locations = df [ 'CODE' ], z = df [ 'GDP (BILLIONS)' ], text = df [ 'COUNTRY' ], colorbar = { 'title' : 'GDP Billions US' }, ) layout = dict ( title = '2014 Global GDP' , geo = dict ( showframe = False , projection = { 'type' : 'Mercator' } ) ) choromap = go . Figure ( data = [ data ], layout = layout ) iplot ( choromap )","title":"World Choropleth Map"},{"location":"signal_processing/signal_processing.html","text":"In this post, the basics of convolution, sine waves, and fourier transforms will be discussed. This content is largely based on content from Mike X Cohen's book, Analying Neural Data Analysis: Theory and Practice . If you are interested in learning in more detail about the basics of EEG and time-series analyses I highly recommend his accessible introduction. I also encourage you to watch his accompanying freely available lecturelets to learn more about each topic introduced in this notebook. Time Domain \u00b6 A time domain signal is measured at a constant interval over time. The frequency with which a signal is collected is referred to as the sampling frequency. The units are typically described in \\(Hz\\) - or the number of cycles per second. It is critical that the sampling frequency is consistent over the entire measurement of the time series. Dot Product \u00b6 To understand convolution, the dot product needs to be introduced. The dot product is simply the sum of the elements of a vector weighted by the elements of another vector. This method is commonly used in signal processing, and also in statistics as a measure of similarity between two vectors. Finally, there is also a geometric inrepretation which is a mapping between vectors (i.e., the product of the magnitudes of the two vectors scaled by the cosine of the angle between them). For a more in depth overview of the dot product and its relation to convolution, you can watch this video . \\[ dotproduct_{ab}=\\sum\\limits_{i=1}^n a_i b_i \\] Let's create some vectors of random numbers and see how the dot product works. First, the two vectos need to be of the same length. import numpy as np import matplotlib.pyplot as plt a = np . random . randint ( 1 , 10 , 20 ) b = np . random . randint ( 1 , 10 , 20 ) plt . scatter ( a , b ) plt . ylabel ( 'B' , fontsize = 18 ) plt . xlabel ( 'A' , fontsize = 18 ) plt . title ( 'Scatterplot' , fontsize = 18 ) print ( 'Dot Product: %s ' % np . dot ( a , b )) What happens when the two variables are more similar? In the next example, gaussian noise is added on top of one of the vectors. b = a + np . random . randn ( 20 ) plt . scatter ( a , b ) plt . ylabel ( 'B' , fontsize = 18 ) plt . xlabel ( 'A' , fontsize = 18 ) plt . title ( 'Scatterplot' , fontsize = 18 ) print ( f 'Dot Product: { np . dot ( a , b ) } ' ) Convolution \u00b6 Convolution in the time domain is an extension of the dot product in which the dot product is computed iteratively over time. One way to think about it is that one signal weights each time point of the other signal and then slides forward over time. Let's call the timeseries variable signal and the other vector the kernel . Importantly, the kernel will almost always be smaller than the signal, otherwise you would only have one scalar value afterwards. To gain an intuition of how convolution works, we will create some data. First, a time series of spikes will be created. Next, the signal will be convolved with a boxcar kernel. n_samples = 100 signal = np . zeros ( n_samples ) signal [ np . random . randint ( 0 , n_samples , 5 )] = 1 kernel = np . zeros ( 10 ) kernel [ 2 : 8 ] = 1 f , a = plt . subplots ( ncols = 2 , figsize = ( 20 , 5 )) a [ 0 ] . plot ( signal , linewidth = 2 ) a [ 0 ] . set_xlabel ( 'Time' , fontsize = 18 ) a [ 0 ] . set_ylabel ( 'Signal Intensity' , fontsize = 18 ) a [ 0 ] . set_title ( 'Signal ' , fontsize = 18 ) a [ 1 ] . plot ( kernel , linewidth = 2 , color = 'red' ) a [ 1 ] . set_xlabel ( 'Time' , fontsize = 18 ) a [ 1 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 1 ] . set_title ( 'Kernel ' , fontsize = 18 ) Notice how the kernel is only 10 samples long and the boxcar width is about 6 seconds, while the signal is 100 samples long with 5 single pulses. Now let's convolve the signal with the kernel by taking the dot product of the kernel with each time point of the signal. This can be illustrated by creating a matrix of the kernel shifted each time point of the signal. This will be illustrated using a heatmap, where the change in the color reflects the intensity. Notice that this is simply moving the boxcar kernel, which is 6 seconds in duration forward in time for each sample. shifted_kernel = np . zeros (( n_samples , n_samples + len ( kernel ) - 1 )) for i in range ( n_samples ): shifted_kernel [ i , i : i + len ( kernel )] = kernel plt . figure ( figsize = ( 8 , 8 )) plt . imshow ( shifted_kernel , cmap = 'Reds' ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . ylabel ( 'Time' , fontsize = 18 ) plt . title ( 'Time Shifted Kernels' , fontsize = 18 ) Now, take the dot product of the signal with this matrix. Matrix multiplication consists of taking the dot product of the signal vector with each row of this expanded kernel matrix. convolved_signal = np . dot ( signal , shifted_kernel ) plt . figure ( figsize = ( 12 , 5 )) plt . plot ( convolved_signal , linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Signal convolved with boxcar kernel' , fontsize = 18 ) You can see that after convolution, each spike has now become the shape of the kernel. Spikes that were closer in time, compound if the boxes overlap. Notice also how the shape of the final signal is the length of the combined signal and kernel minus one. print ( f \"Signal Length: { len ( signal ) } \" ) print ( f \"Kernel Length: { len ( kernel ) } \" ) print ( f \"Convolved Signal Length: { len ( convolved_signal ) } \" ) This process of iteratively taking the dot product of the kernel with each timepoint of the signal and summing all of the values can be performed by using the convolution function from numpy np.convolve plt . figure ( figsize = ( 12 , 5 )) plt . plot ( np . convolve ( signal , kernel ), linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Signal convolved with boxcar kernel' , fontsize = 18 ) What happens if the spikes have different intensities, reflected by different heights? signal = np . zeros ( n_samples ) signal [ np . random . randint ( 0 , n_samples , 5 )] = np . random . randint ( 1 , 5 , 5 ) f , a = plt . subplots ( nrows = 2 , figsize = ( 18 , 6 ), sharex = True ) a [ 0 ] . plot ( signal , linewidth = 2 ) a [ 0 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 0 ] . set_title ( 'Timeseries of spikes with varying intensities' , fontsize = 18 ) a [ 1 ] . plot ( np . convolve ( signal , kernel ), linewidth = 2 ) a [ 1 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 1 ] . set_title ( 'Signal convolved with boxcar kernel' , fontsize = 18 ) a [ 1 ] . set_xlabel ( 'Time' , fontsize = 18 ) Now what happens if the boxcar kernel is changed for something with a more interesting shape, say a hemodynamic response function? Here we will use a double gamma hemodynamic function (HRF) developed by Gary Glover. Note : If you haven't install nltools yet run python -m pip install nltools . from nltools.external import glover_hrf tr = 2 hrf = glover_hrf ( tr , oversampling = 20 ) plt . plot ( hrf , linewidth = 2 , color = 'red' ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Hemodynamic Response Function' , fontsize = 18 ) For this example, we oversampled the function to make it more smooth. In practice we will want to make sure that the kernel is the correct shape given our sampling resolution. Be sure to se the oversampling to 1. Notice how the function looks more jagged now? hrf = glover_hrf ( tr , oversampling = 1 ) plt . plot ( hrf , linewidth = 2 , color = 'red' ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Hemodynamic Response Function' , fontsize = 18 ) Now let's try convolving our event pulses with this HRF kernel. signal = np . zeros ( n_samples ) signal [ np . random . randint ( 0 , n_samples , 5 )] = np . random . randint ( 1 , 5 , 5 ) f , a = plt . subplots ( nrows = 2 , figsize = ( 18 , 6 ), sharex = True ) a [ 0 ] . plot ( signal , linewidth = 2 ) a [ 1 ] . plot ( np . convolve ( signal , hrf ), linewidth = 2 ) a [ 0 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 0 ] . set_title ( 'Timeseries of spikes with varying intensities' , fontsize = 18 ) a [ 1 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 1 ] . set_xlabel ( 'Time' , fontsize = 18 ) a [ 1 ] . set_title ( 'Signal convolved with boxcar kernel' , fontsize = 18 ) If you are interested in a more detailed overview of convolution in the time domain, I encourage you to watch this video by Mike X Cohen. For more details about convolution and the HRF function, see this overview using python examples. Oscillations \u00b6 Ok, now let's move on to studying time-varying signals that have the shape of oscillating waves. Let's watch a short video by Mike X Cohen to get some more background on sine waves. Don't worry too much about the matlab code as we will work through similar Python examples in this notebook. from IPython.display import YouTubeVideo YouTubeVideo ( '9RvZXZ46FRQ' ) Oscillations can be described mathematically as: \\[ A\\sin(2 \\pi ft + \\theta) \\] where \\(f\\) is the frequency or the speed of the oscillation described in the number of cycles per second - \\(Hz\\) . Amplitude \\(A\\) refers to the height of the waves, which is half the distance of the peak to the trough. Finally, \\(\\theta\\) describes the phase angle offset, which is in radians. Here we will plot a simple sine wave. Try playing with the different parameters (i.e., amplitude, frequency, & theta) to gain an intuition of how they each impact the shape of the wave. from numpy import sin, pi, arange sampling_freq = 500 time = arange(-1, 1 + 1/sampling_freq, 1/sampling_freq) amplitude = 5 freq = 5 theta = 0 simulation = amplitude * sin(2 * pi * freq * time + theta) plt.figure(figsize=(12, 5)) plt.plot(time, simulation, linewidth=2) plt.title('Sine Wave', fontsize=18) plt.xlabel('Time', fontsize=18) plt.ylabel('Amplitude', fontsize=18) We can also see the impact of different parameters using interactive widgets. Here you can move the sliders to see the impact of varying the amplitude, frequency, and theta parameter on a sine wave. We also show the complex components of the sine wave in the right panel. from ipywidgets import interact , FloatSlider from numpy import sin , pi , arange , real , imag def plot_oscillation ( amplitude = 5 , frequency = 5 , theta = 1 ): sampling_frequency = 500 time = arange ( - 1 , 1 + 1 / sampling_frequency , 1 / sampling_frequency ) simulation = amplitude * sin ( 2 * pi * frequency * time + theta ) z = np . exp ( 1 j * ( 2 * pi * frequency * time + theta )) fig = plt . figure ( figsize = ( 20 , 4 )) gs = plt . GridSpec ( 1 , 6 , left = 0.05 , right = 0.48 , wspace = 0.05 ) ax1 = fig . add_subplot ( gs [ 0 , : 4 ]) ax1 . plot ( time , simulation , linewidth = 2 ) ax1 . set_ylabel ( 'Amplitude' , fontsize = 18 ) ax1 . set_xlabel ( 'Time' , fontsize = 18 ) ax2 = fig . add_subplot ( gs [ 0 , 5 :], polar = True ) ax2 . plot ( real ( simulation ), imag ( simulation )) plt . tight_layout () interact ( plot_oscillation , amplitude = FloatSlider ( value = 5 , min = 0 , max = 10 , step = 0.5 ), frequency = FloatSlider ( value = 5 , min = 0 , max = 10 , step = 0.5 ), theta = FloatSlider ( value = 0 , min =- 5 , max = 5 , step = 0.5 )) Next we will generate a simulation combining multiple sine waves oscillating at different frequencies. sampling_freq = 500 freq = [ 3 , 10 , 5 , 15 , 35 ] amplitude = [ 5 , 15 , 10 , 5 , 7 ] phases = pi * np . array ([ 1 / 7 , 1 / 8 , 1 , 1 / 2 , - 1 / 4 ]) time = arange ( - 1 , 1 + 1 / sampling_freq , 1 / sampling_freq ) sine_waves = [] for i , f in enumerate ( freq ): sine_waves . append ( amplitude [ i ] * sin ( 2 * pi * f * time + phases [ i ])) sine_waves = np . array ( sine_waves ) f , a = plt . subplots ( nrows = 5 , ncols = 1 , figsize = ( 12 , 5 ), sharex = True ) for i , x in enumerate ( freq ): a [ i ] . plot ( sine_waves [ i ,:], linewidth = 2 ) a [ 0 ] . set_title ( \"Sine waves oscillating at different frequencies\" , fontsize = 18 ) a [ i ] . set_xlabel ( \"Time\" , fontsize = 18 ) plt . tight_layout () Let's add all of those signals together to get a more complex signal. plt . figure ( figsize = ( 12 , 3 )) plt . plot ( np . sum ( sine_waves , axis = 0 ), linewidth = 2 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( \"Sum of all of the sine waves\" , fontsize = 18 ) plt . xlabel ( \"Time\" , fontsize = 18 ) plt . tight_layout () What is the effect of changing the sampling frequency on our ability to measure these oscillations? Try dropping it to be very low (e.g., less than 70 hz.) Notice that signals will alias when the sampling frequency is below the nyquist frequency of a signal. To observe the oscillations, we need to be sampling at least two times for each oscillation cycle. This will result in a jagged view of the data, but we can still theoretically observe the frequency. Practically, higher sampling rates allow us to better observe the underlying signals. sampling_freq = 60 freq = [ 3 , 10 , 5 , 15 , 35 ] amplitude = [ 5 , 15 , 10 , 5 , 7 ] phases = pi * np . array ([ 1 / 7 , 1 / 8 , 1 , 1 / 2 , - 1 / 4 ]) time = arange ( - 1 , 1 + 1 / sampling_freq , 1 / sampling_freq ) sine_waves = [] for i , f in enumerate ( freq ): sine_waves . append ( amplitude [ i ] * sin ( 2 * pi * f * time + phases [ i ])) sine_waves = np . array ( sine_waves ) f , a = plt . subplots ( nrows = 5 , ncols = 1 , figsize = ( 12 , 5 ), sharex = True ) for i , x in enumerate ( freq ): a [ i ] . plot ( sine_waves [ i ,:], linewidth = 2 ) a [ 0 ] . set_title ( \"Sine waves oscillating at different frequencies\" , fontsize = 18 ) a [ i ] . set_xlabel ( \"Time\" , fontsize = 18 ) plt . tight_layout () plt . figure ( figsize = ( 12 , 3 )) plt . plot ( np . sum ( sine_waves , axis = 0 ), linewidth = 2 ) plt . title ( \"Sum of all of the sine waves\" , fontsize = 18 ) plt . xlabel ( \"Time\" , fontsize = 18 ) plt . tight_layout () Notice the jagged lines for frequencies that are above the nyquist frequency? That's because we don't have enough samples to accurately see the oscillations. Ok, let's increase the sampling frequency to remove the aliasing. We can add a little bit of gaussian (white) noise on top of this signal to make it even more realistic. Try varying the amount of noise by adjusting the scaling on the noise. sampling_freq = 500 freq = [ 3 , 10 , 5 , 15 , 35 ] amplitude = [ 5 , 15 , 10 , 5 , 7 ] phases = pi * np . array ([ 1 / 7 , 1 / 8 , 1 , 1 / 2 , - 1 / 4 ]) time = arange ( - 1 , 1 + 1 / sampling_freq , 1 / sampling_freq ) sine_waves = [] for i , f in enumerate ( freq ): sine_waves . append ( amplitude [ i ] * sin ( 2 * pi * f * time + phases [ i ])) sine_waves = np . array ( sine_waves ) noise = 5 * np . random . randn ( sine_waves . shape [ 1 ]) signal = np . sum ( sine_waves , axis = 0 ) + noise plt . figure ( figsize = ( 12 , 3 )) plt . plot ( signal , linewidth = 2 ) plt . title ( \"Sum of sine waves plus white noise\" , fontsize = 18 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) Time & Frequency Domains \u00b6 We have seen above how to represent signals in the time domain. However, these signals can also be represented in the frequency domain. Let's get started by watching a short video by Mike X Cohen to get an overview of how a signal can be represented in both of these different domains. YouTubeVideo ( 'fYtVHhk3xJ0' ) Frequency Domain \u00b6 In the previous example, we generated a complex signal composed of multiple sine waves oscillating at different frequencies. Typically in data analysis, we only observe the signal and are trying to uncover the generative processes that gave rise to the signal. In this section, we will introduce the frequency domain and how we can identify if there are any frequencies oscillating at a consistent frequency in our signal using the fourier transform. The fourier transform is essentially convolving different frequencies of sine waves with our data. One important assumption to note is that the fourier transformations assume that your oscillatory signals are stationary, which means that the generative processes giving rise to the oscillations do not vary over time. See this video for a more in depth discussion on stationarity. In practice, this assumption is rarely true. Often it can be useful to use other techniques such as wavelets to look at time x frequency representations. We will not be covering wavelets here, but see this series of videos for more information. Discrete Time Fourier Transform \u00b6 We will gain an intution of how the fourier transform works by building our own discrete time fourier transform. Let's watch this short video about the fourier transform by Mike X Cohen. Don't worry too much about the details of the discussion on the matlab code as we will be exploring these concepts in python below. YouTubeVideo ( '_htCsieA0_U' ) The discrete Fourier transform of variable \\(x\\) at frequency \\(f\\) can be defined as: \\[ X_f = \\sum\\limits_{k=0}^{n-1} x_k e^{-i2\\pi f(k-1)n^{-1}} \\] where \\(n\\) refers to the number of data points in vector \\(x\\) , and the capital letter \\(X_f\\) is the fourier coefficient of time series variable \\(x\\) at frequency \\(f\\) . Essentially, we create a bank of complex sine waves at different frequencies that are linearly spaced. The zero frequency component reflects the mean offset over the entire signal and will simply be zero in our example. Complex Sine Waves \u00b6 You may have noticed that we are computing complex sine waves using the np.exp function instead of the np.sin function. \\[ \\text{complex sine wave} = e^{i(2\\pi ft + \\theta)} \\] We will not spend too much time on the details, but basically complex sine waves have three components: time, a real part of the sine wave, and the imaginary part of the sine wave, which are basically phase shifted by \\(\\frac{\\pi}{2}\\) . 1j is how we can specify a complex number in python. We can extract the real components using np.real or the imaginary using np.imag . We can visualize complex sine waves in three dimensions. For more information, watch this video . If you need a refresher on complex numbers, you may want to watch this video . In this plot we show this complex signal in 3 dimensions and also project on two dimensional planes to show that the real and imaginary create a unit circle, and are phase offset by \\(\\frac{\\pi}{2}\\) with respect to time. from mpl_toolkits import mplot3d frequency = 5 z = np . exp ( 1 j * ( 2 * pi * frequency * time + theta )) fig = plt . figure ( figsize = ( 15 , 10 )) ax = fig . add_subplot ( 2 , 2 , 1 , projection = '3d' ) ax . plot ( np . arange ( 0 , len ( time )) / sampling_freq , real ( z ), imag ( z )) ax . set_xlabel ( 'Time (sec)' , fontsize = 16 ) ax . set_ylabel ( 'Real(z)' , fontsize = 16 ) ax . set_zlabel ( 'Imaginary(z)' , fontsize = 16 ) ax . set_title ( 'Complex Sine Wave' , fontsize = 18 ) ax . view_init ( 15 , 250 ) ax = fig . add_subplot ( 2 , 2 , 2 ) ax . plot ( real ( z ), imag ( z )) ax . set_xlabel ( 'Real(z)' , fontsize = 16 ) ax . set_ylabel ( 'Imaginary(z)' , fontsize = 16 ) ax . set_title ( 'Projecting on Real and Imaginary' , fontsize = 18 ) ax = fig . add_subplot ( 2 , 2 , 3 ) ax . plot ( np . arange ( 0 , len ( time )) / sampling_freq , real ( z )) ax . set_xlabel ( 'Time (sec)' , fontsize = 16 ) ax . set_ylabel ( 'Real(z)' , fontsize = 16 ) ax . set_title ( 'Projecting on Real and Time' , fontsize = 18 ) ax = fig . add_subplot ( 2 , 2 , 4 ,) ax . plot ( np . arange ( 0 , len ( time )) / sampling_freq , imag ( z )) ax . set_xlabel ( 'Time (sec)' , fontsize = 16 ) ax . set_ylabel ( 'Imaginary(z)' , fontsize = 16 ) ax . set_title ( 'Projecting on Imaginary and Time' , fontsize = 18 ) plt . tight_layout () Create a filter bank \u00b6 Ok, now let's create a bank of n-1 linearly spaced complex sine waves and plot first 5 waves to see their frequencies. Remember the first basis function is zero frequency component and reflects the mean offset over the entire signal. import numpy as np from numpy import exp time = np . arange ( 0 , len ( signal ), 1 ) / len ( signal ) sine_waves = [] for i in range ( len ( signal )): sine_waves . append ( exp ( - 1 j * 2 * pi * i * time )) sine_waves = np . array ( sine_waves ) f , a = plt . subplots ( nrows = 5 , figsize = ( 12 , 8 ), sharex = True ) for i in range ( 0 , 5 ): a [ i ] . plot ( sine_waves [ i ,:], linewidth = 2 ) a [ 0 ] . set_title ( 'Bank of sine waves' , fontsize = 18 ) a [ i ] . set_xlabel ( 'Time' , fontsize = 18 ) plt . tight_layout () We can visualize all of the sine waves simultaneously using a heatmap representation. Each row is a different sine wave, and columns reflect time. The intensity of the value is like if the sine wave was coming towards and away rather than up and down. Notice how it looks like that the second half of the sine waves appear to be a mirror image of the first half. This is because the first half contain the positive frequencies, while the second half contains the negative frequencies. Negative frequencies capture sine waves that travel in reverse order around the complex plane compared to that travel forward. This becomes more relevant with the hilbert transform, but for the purposes of this tutorial we will be ignoring the negative frequencies. plt . figure ( figsize = ( 12 , 12 )) plt . imshow ( np . real ( sine_waves )) plt . ylabel ( 'Frequency' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) Estimate Fourier Coefficients \u00b6 Now let's take the dot product of each of the sine wave basis set with our signal to get the fourier coefficients. We can scale the coefficients to be more interpretable by dividing by the number of time points and multiplying by 2. Watch this video if you're interested in a more detailed explanation. Basically, this only needs to be done if you want the amplitude to be in the same units as the original data. In practice, this scaling factor will not change your interpretation of the spectrum. fourier = 2 * np . dot ( signal , sine_waves ) / len ( signal ) Visualizing Fourier Coefficients \u00b6 Now that we have computed the fourier transform, we might want to examine the results. The fourier transform provides a 3-D representation of the data including frquency, power, and phase. Typically, the phase information is ignored when plotting the results of a fourier analysis. The traditional way to view the information is plot the data as amplitude on the y-axis and frequency on the x-axis . We will extract amplitude by taking the absolute value of the fourier coefficients. Remember that we are only focusing on the positive frequencies (the 1 st half of the sine wave basis functions). Here the x axis simply reflects the index of the frequency. The actual frequency is \\(N/2 + 1\\) as we are only able estimate frequencies that are half the sampling frequency, this is called the Nyquist frequency. Also, note that we are only plotting the first half of the frequencies. This is because we are only plotting the positive frequencies. We will ignore frequencies above the nyquist frequency (i.e., \\(\\frac{\\text{fs}}{2}\\) ), which are called negative frequencies. Watch this video if you'd like more information about why. Watch this video to hear more about frequencies and zero padding. plt . figure ( figsize = ( 12 , 5 )) plt . plot ( np . abs ( fourier [ 0 : int ( np . ceil ( len ( fourier ) / 2 ))]), linewidth = 2 ) plt . xlabel ( 'Frequency (index)' , fontsize = 18 ) plt . ylabel ( 'Amplitude' , fontsize = 18 ) plt . title ( 'Power spectrum derived from discrete fourier transform' , fontsize = 18 ) Notice that there are 5 different frequencies that have varying amplitudes. Recall that when we simulated this data we added 5 different sine waves with different frequencies and amplitudes. freq = [3, 10, 5 ,15, 35] amplitude = [5, 15, 10, 5, 7] Let's zoom in a bit more to see this more clearly and also add the correct frequency labels in \\(Hz\\) . We will use the numpy fftfreq function to help convert frequency indices to \\(Hz\\) . from numpy.fft import fftfreq freq = fftfreq ( len ( signal ), 1 / sampling_freq ) plt . figure ( figsize = ( 12 , 5 )) plt . plot ( freq [: 80 ], np . abs ( fourier )[ 0 : 80 ], linewidth = 2 ) plt . xlabel ( 'Frequency (Hz)' , fontsize = 18 ) plt . ylabel ( 'Amplitude' , fontsize = 18 ) plt . title ( 'Power spectrum derived from discrete fourier transform' , fontsize = 18 ) Ok, now that we've created our own discrete fourier transform, let's learn a few more important details that are important to consider. YouTubeVideo ( 'RHjqvcKVopg' ) Inverse Fourier Transform \u00b6 The fourier transform allows you to represent a time series in the frequency domain. This is a lossless operation, meaning that no information in the original signal is lost by the transform. This means that we can reconstruct the original signal by inverting the operation. Thus, we can create a time series with only the frequency domain information using the inverse fourier transform . Watch this video if you would like a more in depth explanation. \\[ x_k = \\sum\\limits_{k=0}^{n-1} X_k e^{i2\\pi f(k-1)n^{-1}} \\] Notice that we are computing the dot product between the complex sine wave and the fourier coefficients \\(X\\) instead of the time series data \\(x\\) . plt . figure ( figsize = ( 12 , 5 )) plt . plot ( np . dot ( fourier , sine_waves ) / 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Reconstructed Time Series Signal' , fontsize = 18 ) Fast Fourier Transform \u00b6 The discrete time fourier transform is useful to understand the relationship between the time and frequency domains. However, in practice this method is rarely used as there are more faster and efficient methods to perform this computation. One popular algorithm is called the fast fourier transform (FFT). This function is also in numpy np.fft.fft . Don't forget to divide by the number of samples to keep the scaling. from numpy.fft import fft , ifft , fftfreq fourier_fft = fft ( signal ) plt . figure ( figsize = ( 12 , 5 )) plt . plot (( np . arange ( 0 , 80 ) / 2 ), 2 * np . abs ( fourier_fft [ 0 : 80 ]) / len ( signal ), linewidth = 2 ) plt . ylabel ( 'Amplitude' , fontsize = 18 ) plt . xlabel ( 'Frequency (Hz)' , fontsize = 18 ) plt . title ( 'Frequency domain representation of signal derived from fast fourier transform' , fontsize = 18 ) We can also use the ifft to perform an inverse fourier transform. plt . figure ( figsize = ( 12 , 5 )) plt . plot ( ifft ( fourier_fft ), linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Reconstructed Time Series Signal' , fontsize = 18 ) Convolution Theorem \u00b6 Convolution in the time domain is the same multiplication in the frequency domain. This means that time domain convolution computations can be performed much more efficiently in the frequency domain via simple multiplication. (The opposite is also true that multiplication in the time domain is the same as convolution in the frequency domain. Watch this video for an overview of the convolution theorem and convolution in the frequency domain. Filters \u00b6 Filters can be classified as finite impulse response (FIR) or infinite impulse response (IIR). These terms describe how a filter responds to a single input impulse. FIR filters have a response that ends at a disrete point in time, while IIR filters have a response that continues indefinitely. Filters are constructed in the frequency domain and several properties that need to be considers. ripple in the pass-band attenuation in the stop-band steepness of roll-off filter order (i.e., length for FIR filters) time-domain ringing In general, there is a frequency by time tradeoff. The sharper something is in frequency, the broader it is in time, and vice versa. Here we will use IIR butterworth filters as an example. High Pass \u00b6 High pass filters only allow high frequency signals to remain, effectively removing any low frequency information. Here we will construct a high pass butterworth filter and plot it in frequency space. Note : this example requires using scipy 1.2.1+. from scipy.signal import butter , filtfilt , freqz filter_order = 3 frequency_cutoff = 25 sampling_frequency = 500 # Create the filter b , a = butter ( filter_order , frequency_cutoff , btype = 'high' , output = 'ba' , fs = sampling_frequency ) def rad_sample_to_hz ( x , fs ): return ( x * fs ) / ( 2 * np . pi ) def plot_filter ( b , a , fs ): plt . figure ( figsize = ( 20 , 5 )) w , h = freqz ( b , a , worN = 512 * 2 , whole = False ) plt . plot ( rad_sample_to_hz ( w , fs ), abs ( h ), linewidth = 3 ) plt . ylabel ( 'Gain' , fontsize = 18 ) plt . xlabel ( 'Frequency' , fontsize = 18 ) plot_filter ( b , a , sampling_frequency ) Notice how the gain scales from [0,1]? Filters can be multiplied by the FFT of a signal to apply the filter in the frequency domain. When the resulting signal is transformed back in the time domain using the inverse FFT, the new signal will be filtered. This can be much faster than applying filters in the time domain. The filter_order parameter adjusts the sharpness of the cutoff in the frequency domain. Try playing with different values to see how it changes the filter plot. filter_order = 2 frequency_cutoff = 25 sampling_frequency = 500 b , a = butter ( filter_order , frequency_cutoff , btype = 'high' , output = 'ba' , fs = sampling_frequency ) plot_filter ( b , a , sampling_frequency ) What does the filter look like in the temporal domain? Let's take the inverse FFT and plot it to see what it looks like as a kernel in the temporal domain. Notice how changing the filter order adds more ripples in the time domain. from scipy.signal import sosfreqz filter_order = 8 sos = butter ( filter_order , frequency_cutoff , btype = 'high' , output = 'sos' , fs = sampling_frequency ) w_sos , h_sos = sosfreqz ( sos ) plt . plot ( ifft ( h_sos )[ 0 : 100 ], linewidth = 3 ) plt . ylabel ( 'Amplitude' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) Now let's apply the filter to our data. We will be applying the filter to the signal in the time domain using the filtfilt function. This is a good default option, even though there are several other functions to apply the filter. filtfilt applies the filter forward and then in reverse ensuring that there is zero-phase distortion. filtered = filtfilt ( b , a , signal ) plt . figure ( figsize = ( 20 , 5 )) plt . plot ( signal , linewidth = 2 ) plt . plot ( filtered , linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . legend ([ 'Original' , 'Filtered' ], fontsize = 18 ) Low Pass \u00b6 Low pass filters only retain low frequency signals, which removes any high frequency information. from scipy.signal import butter , filtfilt filter_order = 2 frequency_cutoff = 10 sampling_frequency = 500 # Create the filter b , a = butter ( filter_order , frequency_cutoff , btype = 'low' , output = 'ba' , fs = sampling_frequency ) # Apply the filter filtered = filtfilt ( b , a , signal ) plt . figure ( figsize = ( 20 , 5 )) plt . plot ( signal , linewidth = 2 ) plt . plot ( filtered , linewidth = 4 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . legend ([ 'Original' , 'Filtered' ], fontsize = 18 ) What does the filter look like? filter_order = 10 frequency_cutoff = 10 sampling_frequency = 500 # Create the filter b , a = butter ( filter_order , frequency_cutoff , btype = 'low' , output = 'ba' , fs = sampling_frequency ) plot_filter ( b , a , sampling_frequency ) Bandpass \u00b6 Bandpass filters permit retaining only a specific frequency. Morlet wavelets are an example of a bandpass filter. or example a Morlet wavelet is a gaussian with the peak frequency at the center of a bandpass filter. Let's try selecting removing specific frequencies filter_order = 2 lowcut = 7 highcut = 13 # Create the filter b , a = butter ( filter_order , [ lowcut , highcut ], btype = 'bandpass' , output = 'ba' , fs = sampling_frequency ) # Apply the filter filtered = filtfilt ( b , a , signal ) plt . figure ( figsize = ( 20 , 5 )) plt . plot ( signal , linewidth = 2 ) plt . plot ( filtered , linewidth = 4 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . legend ([ 'Original' , 'Filtered' ], fontsize = 18 ) Band-Stop \u00b6 Bandstop filters remove a specific frequency from the signal filter_order = 2 lowcut = 8 highcut = 12 # Create the filter b , a = butter ( filter_order , [ lowcut , highcut ], btype = 'bandstop' , output = 'ba' , fs = sampling_frequency ) # Plot the filter plot_filter ( b , a , sampling_frequency ) # Apply the filter filtered = filtfilt ( b , a , signal ) plt . figure ( figsize = ( 20 , 5 )) plt . plot ( signal , linewidth = 2 ) plt . plot ( filtered , linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . legend ([ 'Original' , 'Filtered' ], fontsize = 18 )","title":"Introduction"},{"location":"signal_processing/signal_processing.html#time-domain","text":"A time domain signal is measured at a constant interval over time. The frequency with which a signal is collected is referred to as the sampling frequency. The units are typically described in \\(Hz\\) - or the number of cycles per second. It is critical that the sampling frequency is consistent over the entire measurement of the time series.","title":"Time Domain"},{"location":"signal_processing/signal_processing.html#dot-product","text":"To understand convolution, the dot product needs to be introduced. The dot product is simply the sum of the elements of a vector weighted by the elements of another vector. This method is commonly used in signal processing, and also in statistics as a measure of similarity between two vectors. Finally, there is also a geometric inrepretation which is a mapping between vectors (i.e., the product of the magnitudes of the two vectors scaled by the cosine of the angle between them). For a more in depth overview of the dot product and its relation to convolution, you can watch this video . \\[ dotproduct_{ab}=\\sum\\limits_{i=1}^n a_i b_i \\] Let's create some vectors of random numbers and see how the dot product works. First, the two vectos need to be of the same length. import numpy as np import matplotlib.pyplot as plt a = np . random . randint ( 1 , 10 , 20 ) b = np . random . randint ( 1 , 10 , 20 ) plt . scatter ( a , b ) plt . ylabel ( 'B' , fontsize = 18 ) plt . xlabel ( 'A' , fontsize = 18 ) plt . title ( 'Scatterplot' , fontsize = 18 ) print ( 'Dot Product: %s ' % np . dot ( a , b )) What happens when the two variables are more similar? In the next example, gaussian noise is added on top of one of the vectors. b = a + np . random . randn ( 20 ) plt . scatter ( a , b ) plt . ylabel ( 'B' , fontsize = 18 ) plt . xlabel ( 'A' , fontsize = 18 ) plt . title ( 'Scatterplot' , fontsize = 18 ) print ( f 'Dot Product: { np . dot ( a , b ) } ' )","title":"Dot Product"},{"location":"signal_processing/signal_processing.html#convolution","text":"Convolution in the time domain is an extension of the dot product in which the dot product is computed iteratively over time. One way to think about it is that one signal weights each time point of the other signal and then slides forward over time. Let's call the timeseries variable signal and the other vector the kernel . Importantly, the kernel will almost always be smaller than the signal, otherwise you would only have one scalar value afterwards. To gain an intuition of how convolution works, we will create some data. First, a time series of spikes will be created. Next, the signal will be convolved with a boxcar kernel. n_samples = 100 signal = np . zeros ( n_samples ) signal [ np . random . randint ( 0 , n_samples , 5 )] = 1 kernel = np . zeros ( 10 ) kernel [ 2 : 8 ] = 1 f , a = plt . subplots ( ncols = 2 , figsize = ( 20 , 5 )) a [ 0 ] . plot ( signal , linewidth = 2 ) a [ 0 ] . set_xlabel ( 'Time' , fontsize = 18 ) a [ 0 ] . set_ylabel ( 'Signal Intensity' , fontsize = 18 ) a [ 0 ] . set_title ( 'Signal ' , fontsize = 18 ) a [ 1 ] . plot ( kernel , linewidth = 2 , color = 'red' ) a [ 1 ] . set_xlabel ( 'Time' , fontsize = 18 ) a [ 1 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 1 ] . set_title ( 'Kernel ' , fontsize = 18 ) Notice how the kernel is only 10 samples long and the boxcar width is about 6 seconds, while the signal is 100 samples long with 5 single pulses. Now let's convolve the signal with the kernel by taking the dot product of the kernel with each time point of the signal. This can be illustrated by creating a matrix of the kernel shifted each time point of the signal. This will be illustrated using a heatmap, where the change in the color reflects the intensity. Notice that this is simply moving the boxcar kernel, which is 6 seconds in duration forward in time for each sample. shifted_kernel = np . zeros (( n_samples , n_samples + len ( kernel ) - 1 )) for i in range ( n_samples ): shifted_kernel [ i , i : i + len ( kernel )] = kernel plt . figure ( figsize = ( 8 , 8 )) plt . imshow ( shifted_kernel , cmap = 'Reds' ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . ylabel ( 'Time' , fontsize = 18 ) plt . title ( 'Time Shifted Kernels' , fontsize = 18 ) Now, take the dot product of the signal with this matrix. Matrix multiplication consists of taking the dot product of the signal vector with each row of this expanded kernel matrix. convolved_signal = np . dot ( signal , shifted_kernel ) plt . figure ( figsize = ( 12 , 5 )) plt . plot ( convolved_signal , linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Signal convolved with boxcar kernel' , fontsize = 18 ) You can see that after convolution, each spike has now become the shape of the kernel. Spikes that were closer in time, compound if the boxes overlap. Notice also how the shape of the final signal is the length of the combined signal and kernel minus one. print ( f \"Signal Length: { len ( signal ) } \" ) print ( f \"Kernel Length: { len ( kernel ) } \" ) print ( f \"Convolved Signal Length: { len ( convolved_signal ) } \" ) This process of iteratively taking the dot product of the kernel with each timepoint of the signal and summing all of the values can be performed by using the convolution function from numpy np.convolve plt . figure ( figsize = ( 12 , 5 )) plt . plot ( np . convolve ( signal , kernel ), linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Signal convolved with boxcar kernel' , fontsize = 18 ) What happens if the spikes have different intensities, reflected by different heights? signal = np . zeros ( n_samples ) signal [ np . random . randint ( 0 , n_samples , 5 )] = np . random . randint ( 1 , 5 , 5 ) f , a = plt . subplots ( nrows = 2 , figsize = ( 18 , 6 ), sharex = True ) a [ 0 ] . plot ( signal , linewidth = 2 ) a [ 0 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 0 ] . set_title ( 'Timeseries of spikes with varying intensities' , fontsize = 18 ) a [ 1 ] . plot ( np . convolve ( signal , kernel ), linewidth = 2 ) a [ 1 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 1 ] . set_title ( 'Signal convolved with boxcar kernel' , fontsize = 18 ) a [ 1 ] . set_xlabel ( 'Time' , fontsize = 18 ) Now what happens if the boxcar kernel is changed for something with a more interesting shape, say a hemodynamic response function? Here we will use a double gamma hemodynamic function (HRF) developed by Gary Glover. Note : If you haven't install nltools yet run python -m pip install nltools . from nltools.external import glover_hrf tr = 2 hrf = glover_hrf ( tr , oversampling = 20 ) plt . plot ( hrf , linewidth = 2 , color = 'red' ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Hemodynamic Response Function' , fontsize = 18 ) For this example, we oversampled the function to make it more smooth. In practice we will want to make sure that the kernel is the correct shape given our sampling resolution. Be sure to se the oversampling to 1. Notice how the function looks more jagged now? hrf = glover_hrf ( tr , oversampling = 1 ) plt . plot ( hrf , linewidth = 2 , color = 'red' ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Hemodynamic Response Function' , fontsize = 18 ) Now let's try convolving our event pulses with this HRF kernel. signal = np . zeros ( n_samples ) signal [ np . random . randint ( 0 , n_samples , 5 )] = np . random . randint ( 1 , 5 , 5 ) f , a = plt . subplots ( nrows = 2 , figsize = ( 18 , 6 ), sharex = True ) a [ 0 ] . plot ( signal , linewidth = 2 ) a [ 1 ] . plot ( np . convolve ( signal , hrf ), linewidth = 2 ) a [ 0 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 0 ] . set_title ( 'Timeseries of spikes with varying intensities' , fontsize = 18 ) a [ 1 ] . set_ylabel ( 'Intensity' , fontsize = 18 ) a [ 1 ] . set_xlabel ( 'Time' , fontsize = 18 ) a [ 1 ] . set_title ( 'Signal convolved with boxcar kernel' , fontsize = 18 ) If you are interested in a more detailed overview of convolution in the time domain, I encourage you to watch this video by Mike X Cohen. For more details about convolution and the HRF function, see this overview using python examples.","title":"Convolution"},{"location":"signal_processing/signal_processing.html#oscillations","text":"Ok, now let's move on to studying time-varying signals that have the shape of oscillating waves. Let's watch a short video by Mike X Cohen to get some more background on sine waves. Don't worry too much about the matlab code as we will work through similar Python examples in this notebook. from IPython.display import YouTubeVideo YouTubeVideo ( '9RvZXZ46FRQ' ) Oscillations can be described mathematically as: \\[ A\\sin(2 \\pi ft + \\theta) \\] where \\(f\\) is the frequency or the speed of the oscillation described in the number of cycles per second - \\(Hz\\) . Amplitude \\(A\\) refers to the height of the waves, which is half the distance of the peak to the trough. Finally, \\(\\theta\\) describes the phase angle offset, which is in radians. Here we will plot a simple sine wave. Try playing with the different parameters (i.e., amplitude, frequency, & theta) to gain an intuition of how they each impact the shape of the wave. from numpy import sin, pi, arange sampling_freq = 500 time = arange(-1, 1 + 1/sampling_freq, 1/sampling_freq) amplitude = 5 freq = 5 theta = 0 simulation = amplitude * sin(2 * pi * freq * time + theta) plt.figure(figsize=(12, 5)) plt.plot(time, simulation, linewidth=2) plt.title('Sine Wave', fontsize=18) plt.xlabel('Time', fontsize=18) plt.ylabel('Amplitude', fontsize=18) We can also see the impact of different parameters using interactive widgets. Here you can move the sliders to see the impact of varying the amplitude, frequency, and theta parameter on a sine wave. We also show the complex components of the sine wave in the right panel. from ipywidgets import interact , FloatSlider from numpy import sin , pi , arange , real , imag def plot_oscillation ( amplitude = 5 , frequency = 5 , theta = 1 ): sampling_frequency = 500 time = arange ( - 1 , 1 + 1 / sampling_frequency , 1 / sampling_frequency ) simulation = amplitude * sin ( 2 * pi * frequency * time + theta ) z = np . exp ( 1 j * ( 2 * pi * frequency * time + theta )) fig = plt . figure ( figsize = ( 20 , 4 )) gs = plt . GridSpec ( 1 , 6 , left = 0.05 , right = 0.48 , wspace = 0.05 ) ax1 = fig . add_subplot ( gs [ 0 , : 4 ]) ax1 . plot ( time , simulation , linewidth = 2 ) ax1 . set_ylabel ( 'Amplitude' , fontsize = 18 ) ax1 . set_xlabel ( 'Time' , fontsize = 18 ) ax2 = fig . add_subplot ( gs [ 0 , 5 :], polar = True ) ax2 . plot ( real ( simulation ), imag ( simulation )) plt . tight_layout () interact ( plot_oscillation , amplitude = FloatSlider ( value = 5 , min = 0 , max = 10 , step = 0.5 ), frequency = FloatSlider ( value = 5 , min = 0 , max = 10 , step = 0.5 ), theta = FloatSlider ( value = 0 , min =- 5 , max = 5 , step = 0.5 )) Next we will generate a simulation combining multiple sine waves oscillating at different frequencies. sampling_freq = 500 freq = [ 3 , 10 , 5 , 15 , 35 ] amplitude = [ 5 , 15 , 10 , 5 , 7 ] phases = pi * np . array ([ 1 / 7 , 1 / 8 , 1 , 1 / 2 , - 1 / 4 ]) time = arange ( - 1 , 1 + 1 / sampling_freq , 1 / sampling_freq ) sine_waves = [] for i , f in enumerate ( freq ): sine_waves . append ( amplitude [ i ] * sin ( 2 * pi * f * time + phases [ i ])) sine_waves = np . array ( sine_waves ) f , a = plt . subplots ( nrows = 5 , ncols = 1 , figsize = ( 12 , 5 ), sharex = True ) for i , x in enumerate ( freq ): a [ i ] . plot ( sine_waves [ i ,:], linewidth = 2 ) a [ 0 ] . set_title ( \"Sine waves oscillating at different frequencies\" , fontsize = 18 ) a [ i ] . set_xlabel ( \"Time\" , fontsize = 18 ) plt . tight_layout () Let's add all of those signals together to get a more complex signal. plt . figure ( figsize = ( 12 , 3 )) plt . plot ( np . sum ( sine_waves , axis = 0 ), linewidth = 2 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( \"Sum of all of the sine waves\" , fontsize = 18 ) plt . xlabel ( \"Time\" , fontsize = 18 ) plt . tight_layout () What is the effect of changing the sampling frequency on our ability to measure these oscillations? Try dropping it to be very low (e.g., less than 70 hz.) Notice that signals will alias when the sampling frequency is below the nyquist frequency of a signal. To observe the oscillations, we need to be sampling at least two times for each oscillation cycle. This will result in a jagged view of the data, but we can still theoretically observe the frequency. Practically, higher sampling rates allow us to better observe the underlying signals. sampling_freq = 60 freq = [ 3 , 10 , 5 , 15 , 35 ] amplitude = [ 5 , 15 , 10 , 5 , 7 ] phases = pi * np . array ([ 1 / 7 , 1 / 8 , 1 , 1 / 2 , - 1 / 4 ]) time = arange ( - 1 , 1 + 1 / sampling_freq , 1 / sampling_freq ) sine_waves = [] for i , f in enumerate ( freq ): sine_waves . append ( amplitude [ i ] * sin ( 2 * pi * f * time + phases [ i ])) sine_waves = np . array ( sine_waves ) f , a = plt . subplots ( nrows = 5 , ncols = 1 , figsize = ( 12 , 5 ), sharex = True ) for i , x in enumerate ( freq ): a [ i ] . plot ( sine_waves [ i ,:], linewidth = 2 ) a [ 0 ] . set_title ( \"Sine waves oscillating at different frequencies\" , fontsize = 18 ) a [ i ] . set_xlabel ( \"Time\" , fontsize = 18 ) plt . tight_layout () plt . figure ( figsize = ( 12 , 3 )) plt . plot ( np . sum ( sine_waves , axis = 0 ), linewidth = 2 ) plt . title ( \"Sum of all of the sine waves\" , fontsize = 18 ) plt . xlabel ( \"Time\" , fontsize = 18 ) plt . tight_layout () Notice the jagged lines for frequencies that are above the nyquist frequency? That's because we don't have enough samples to accurately see the oscillations. Ok, let's increase the sampling frequency to remove the aliasing. We can add a little bit of gaussian (white) noise on top of this signal to make it even more realistic. Try varying the amount of noise by adjusting the scaling on the noise. sampling_freq = 500 freq = [ 3 , 10 , 5 , 15 , 35 ] amplitude = [ 5 , 15 , 10 , 5 , 7 ] phases = pi * np . array ([ 1 / 7 , 1 / 8 , 1 , 1 / 2 , - 1 / 4 ]) time = arange ( - 1 , 1 + 1 / sampling_freq , 1 / sampling_freq ) sine_waves = [] for i , f in enumerate ( freq ): sine_waves . append ( amplitude [ i ] * sin ( 2 * pi * f * time + phases [ i ])) sine_waves = np . array ( sine_waves ) noise = 5 * np . random . randn ( sine_waves . shape [ 1 ]) signal = np . sum ( sine_waves , axis = 0 ) + noise plt . figure ( figsize = ( 12 , 3 )) plt . plot ( signal , linewidth = 2 ) plt . title ( \"Sum of sine waves plus white noise\" , fontsize = 18 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 )","title":"Oscillations"},{"location":"signal_processing/signal_processing.html#time-frequency-domains","text":"We have seen above how to represent signals in the time domain. However, these signals can also be represented in the frequency domain. Let's get started by watching a short video by Mike X Cohen to get an overview of how a signal can be represented in both of these different domains. YouTubeVideo ( 'fYtVHhk3xJ0' )","title":"Time &amp; Frequency Domains"},{"location":"signal_processing/signal_processing.html#frequency-domain","text":"In the previous example, we generated a complex signal composed of multiple sine waves oscillating at different frequencies. Typically in data analysis, we only observe the signal and are trying to uncover the generative processes that gave rise to the signal. In this section, we will introduce the frequency domain and how we can identify if there are any frequencies oscillating at a consistent frequency in our signal using the fourier transform. The fourier transform is essentially convolving different frequencies of sine waves with our data. One important assumption to note is that the fourier transformations assume that your oscillatory signals are stationary, which means that the generative processes giving rise to the oscillations do not vary over time. See this video for a more in depth discussion on stationarity. In practice, this assumption is rarely true. Often it can be useful to use other techniques such as wavelets to look at time x frequency representations. We will not be covering wavelets here, but see this series of videos for more information.","title":"Frequency Domain"},{"location":"signal_processing/signal_processing.html#discrete-time-fourier-transform","text":"We will gain an intution of how the fourier transform works by building our own discrete time fourier transform. Let's watch this short video about the fourier transform by Mike X Cohen. Don't worry too much about the details of the discussion on the matlab code as we will be exploring these concepts in python below. YouTubeVideo ( '_htCsieA0_U' ) The discrete Fourier transform of variable \\(x\\) at frequency \\(f\\) can be defined as: \\[ X_f = \\sum\\limits_{k=0}^{n-1} x_k e^{-i2\\pi f(k-1)n^{-1}} \\] where \\(n\\) refers to the number of data points in vector \\(x\\) , and the capital letter \\(X_f\\) is the fourier coefficient of time series variable \\(x\\) at frequency \\(f\\) . Essentially, we create a bank of complex sine waves at different frequencies that are linearly spaced. The zero frequency component reflects the mean offset over the entire signal and will simply be zero in our example.","title":"Discrete Time Fourier Transform"},{"location":"signal_processing/signal_processing.html#complex-sine-waves","text":"You may have noticed that we are computing complex sine waves using the np.exp function instead of the np.sin function. \\[ \\text{complex sine wave} = e^{i(2\\pi ft + \\theta)} \\] We will not spend too much time on the details, but basically complex sine waves have three components: time, a real part of the sine wave, and the imaginary part of the sine wave, which are basically phase shifted by \\(\\frac{\\pi}{2}\\) . 1j is how we can specify a complex number in python. We can extract the real components using np.real or the imaginary using np.imag . We can visualize complex sine waves in three dimensions. For more information, watch this video . If you need a refresher on complex numbers, you may want to watch this video . In this plot we show this complex signal in 3 dimensions and also project on two dimensional planes to show that the real and imaginary create a unit circle, and are phase offset by \\(\\frac{\\pi}{2}\\) with respect to time. from mpl_toolkits import mplot3d frequency = 5 z = np . exp ( 1 j * ( 2 * pi * frequency * time + theta )) fig = plt . figure ( figsize = ( 15 , 10 )) ax = fig . add_subplot ( 2 , 2 , 1 , projection = '3d' ) ax . plot ( np . arange ( 0 , len ( time )) / sampling_freq , real ( z ), imag ( z )) ax . set_xlabel ( 'Time (sec)' , fontsize = 16 ) ax . set_ylabel ( 'Real(z)' , fontsize = 16 ) ax . set_zlabel ( 'Imaginary(z)' , fontsize = 16 ) ax . set_title ( 'Complex Sine Wave' , fontsize = 18 ) ax . view_init ( 15 , 250 ) ax = fig . add_subplot ( 2 , 2 , 2 ) ax . plot ( real ( z ), imag ( z )) ax . set_xlabel ( 'Real(z)' , fontsize = 16 ) ax . set_ylabel ( 'Imaginary(z)' , fontsize = 16 ) ax . set_title ( 'Projecting on Real and Imaginary' , fontsize = 18 ) ax = fig . add_subplot ( 2 , 2 , 3 ) ax . plot ( np . arange ( 0 , len ( time )) / sampling_freq , real ( z )) ax . set_xlabel ( 'Time (sec)' , fontsize = 16 ) ax . set_ylabel ( 'Real(z)' , fontsize = 16 ) ax . set_title ( 'Projecting on Real and Time' , fontsize = 18 ) ax = fig . add_subplot ( 2 , 2 , 4 ,) ax . plot ( np . arange ( 0 , len ( time )) / sampling_freq , imag ( z )) ax . set_xlabel ( 'Time (sec)' , fontsize = 16 ) ax . set_ylabel ( 'Imaginary(z)' , fontsize = 16 ) ax . set_title ( 'Projecting on Imaginary and Time' , fontsize = 18 ) plt . tight_layout ()","title":"Complex Sine Waves"},{"location":"signal_processing/signal_processing.html#create-a-filter-bank","text":"Ok, now let's create a bank of n-1 linearly spaced complex sine waves and plot first 5 waves to see their frequencies. Remember the first basis function is zero frequency component and reflects the mean offset over the entire signal. import numpy as np from numpy import exp time = np . arange ( 0 , len ( signal ), 1 ) / len ( signal ) sine_waves = [] for i in range ( len ( signal )): sine_waves . append ( exp ( - 1 j * 2 * pi * i * time )) sine_waves = np . array ( sine_waves ) f , a = plt . subplots ( nrows = 5 , figsize = ( 12 , 8 ), sharex = True ) for i in range ( 0 , 5 ): a [ i ] . plot ( sine_waves [ i ,:], linewidth = 2 ) a [ 0 ] . set_title ( 'Bank of sine waves' , fontsize = 18 ) a [ i ] . set_xlabel ( 'Time' , fontsize = 18 ) plt . tight_layout () We can visualize all of the sine waves simultaneously using a heatmap representation. Each row is a different sine wave, and columns reflect time. The intensity of the value is like if the sine wave was coming towards and away rather than up and down. Notice how it looks like that the second half of the sine waves appear to be a mirror image of the first half. This is because the first half contain the positive frequencies, while the second half contains the negative frequencies. Negative frequencies capture sine waves that travel in reverse order around the complex plane compared to that travel forward. This becomes more relevant with the hilbert transform, but for the purposes of this tutorial we will be ignoring the negative frequencies. plt . figure ( figsize = ( 12 , 12 )) plt . imshow ( np . real ( sine_waves )) plt . ylabel ( 'Frequency' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 )","title":"Create a filter bank"},{"location":"signal_processing/signal_processing.html#estimate-fourier-coefficients","text":"Now let's take the dot product of each of the sine wave basis set with our signal to get the fourier coefficients. We can scale the coefficients to be more interpretable by dividing by the number of time points and multiplying by 2. Watch this video if you're interested in a more detailed explanation. Basically, this only needs to be done if you want the amplitude to be in the same units as the original data. In practice, this scaling factor will not change your interpretation of the spectrum. fourier = 2 * np . dot ( signal , sine_waves ) / len ( signal )","title":"Estimate Fourier Coefficients"},{"location":"signal_processing/signal_processing.html#visualizing-fourier-coefficients","text":"Now that we have computed the fourier transform, we might want to examine the results. The fourier transform provides a 3-D representation of the data including frquency, power, and phase. Typically, the phase information is ignored when plotting the results of a fourier analysis. The traditional way to view the information is plot the data as amplitude on the y-axis and frequency on the x-axis . We will extract amplitude by taking the absolute value of the fourier coefficients. Remember that we are only focusing on the positive frequencies (the 1 st half of the sine wave basis functions). Here the x axis simply reflects the index of the frequency. The actual frequency is \\(N/2 + 1\\) as we are only able estimate frequencies that are half the sampling frequency, this is called the Nyquist frequency. Also, note that we are only plotting the first half of the frequencies. This is because we are only plotting the positive frequencies. We will ignore frequencies above the nyquist frequency (i.e., \\(\\frac{\\text{fs}}{2}\\) ), which are called negative frequencies. Watch this video if you'd like more information about why. Watch this video to hear more about frequencies and zero padding. plt . figure ( figsize = ( 12 , 5 )) plt . plot ( np . abs ( fourier [ 0 : int ( np . ceil ( len ( fourier ) / 2 ))]), linewidth = 2 ) plt . xlabel ( 'Frequency (index)' , fontsize = 18 ) plt . ylabel ( 'Amplitude' , fontsize = 18 ) plt . title ( 'Power spectrum derived from discrete fourier transform' , fontsize = 18 ) Notice that there are 5 different frequencies that have varying amplitudes. Recall that when we simulated this data we added 5 different sine waves with different frequencies and amplitudes. freq = [3, 10, 5 ,15, 35] amplitude = [5, 15, 10, 5, 7] Let's zoom in a bit more to see this more clearly and also add the correct frequency labels in \\(Hz\\) . We will use the numpy fftfreq function to help convert frequency indices to \\(Hz\\) . from numpy.fft import fftfreq freq = fftfreq ( len ( signal ), 1 / sampling_freq ) plt . figure ( figsize = ( 12 , 5 )) plt . plot ( freq [: 80 ], np . abs ( fourier )[ 0 : 80 ], linewidth = 2 ) plt . xlabel ( 'Frequency (Hz)' , fontsize = 18 ) plt . ylabel ( 'Amplitude' , fontsize = 18 ) plt . title ( 'Power spectrum derived from discrete fourier transform' , fontsize = 18 ) Ok, now that we've created our own discrete fourier transform, let's learn a few more important details that are important to consider. YouTubeVideo ( 'RHjqvcKVopg' )","title":"Visualizing Fourier Coefficients"},{"location":"signal_processing/signal_processing.html#inverse-fourier-transform","text":"The fourier transform allows you to represent a time series in the frequency domain. This is a lossless operation, meaning that no information in the original signal is lost by the transform. This means that we can reconstruct the original signal by inverting the operation. Thus, we can create a time series with only the frequency domain information using the inverse fourier transform . Watch this video if you would like a more in depth explanation. \\[ x_k = \\sum\\limits_{k=0}^{n-1} X_k e^{i2\\pi f(k-1)n^{-1}} \\] Notice that we are computing the dot product between the complex sine wave and the fourier coefficients \\(X\\) instead of the time series data \\(x\\) . plt . figure ( figsize = ( 12 , 5 )) plt . plot ( np . dot ( fourier , sine_waves ) / 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Reconstructed Time Series Signal' , fontsize = 18 )","title":"Inverse Fourier Transform"},{"location":"signal_processing/signal_processing.html#fast-fourier-transform","text":"The discrete time fourier transform is useful to understand the relationship between the time and frequency domains. However, in practice this method is rarely used as there are more faster and efficient methods to perform this computation. One popular algorithm is called the fast fourier transform (FFT). This function is also in numpy np.fft.fft . Don't forget to divide by the number of samples to keep the scaling. from numpy.fft import fft , ifft , fftfreq fourier_fft = fft ( signal ) plt . figure ( figsize = ( 12 , 5 )) plt . plot (( np . arange ( 0 , 80 ) / 2 ), 2 * np . abs ( fourier_fft [ 0 : 80 ]) / len ( signal ), linewidth = 2 ) plt . ylabel ( 'Amplitude' , fontsize = 18 ) plt . xlabel ( 'Frequency (Hz)' , fontsize = 18 ) plt . title ( 'Frequency domain representation of signal derived from fast fourier transform' , fontsize = 18 ) We can also use the ifft to perform an inverse fourier transform. plt . figure ( figsize = ( 12 , 5 )) plt . plot ( ifft ( fourier_fft ), linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . title ( 'Reconstructed Time Series Signal' , fontsize = 18 )","title":"Fast Fourier Transform"},{"location":"signal_processing/signal_processing.html#convolution-theorem","text":"Convolution in the time domain is the same multiplication in the frequency domain. This means that time domain convolution computations can be performed much more efficiently in the frequency domain via simple multiplication. (The opposite is also true that multiplication in the time domain is the same as convolution in the frequency domain. Watch this video for an overview of the convolution theorem and convolution in the frequency domain.","title":"Convolution Theorem"},{"location":"signal_processing/signal_processing.html#filters","text":"Filters can be classified as finite impulse response (FIR) or infinite impulse response (IIR). These terms describe how a filter responds to a single input impulse. FIR filters have a response that ends at a disrete point in time, while IIR filters have a response that continues indefinitely. Filters are constructed in the frequency domain and several properties that need to be considers. ripple in the pass-band attenuation in the stop-band steepness of roll-off filter order (i.e., length for FIR filters) time-domain ringing In general, there is a frequency by time tradeoff. The sharper something is in frequency, the broader it is in time, and vice versa. Here we will use IIR butterworth filters as an example.","title":"Filters"},{"location":"signal_processing/signal_processing.html#high-pass","text":"High pass filters only allow high frequency signals to remain, effectively removing any low frequency information. Here we will construct a high pass butterworth filter and plot it in frequency space. Note : this example requires using scipy 1.2.1+. from scipy.signal import butter , filtfilt , freqz filter_order = 3 frequency_cutoff = 25 sampling_frequency = 500 # Create the filter b , a = butter ( filter_order , frequency_cutoff , btype = 'high' , output = 'ba' , fs = sampling_frequency ) def rad_sample_to_hz ( x , fs ): return ( x * fs ) / ( 2 * np . pi ) def plot_filter ( b , a , fs ): plt . figure ( figsize = ( 20 , 5 )) w , h = freqz ( b , a , worN = 512 * 2 , whole = False ) plt . plot ( rad_sample_to_hz ( w , fs ), abs ( h ), linewidth = 3 ) plt . ylabel ( 'Gain' , fontsize = 18 ) plt . xlabel ( 'Frequency' , fontsize = 18 ) plot_filter ( b , a , sampling_frequency ) Notice how the gain scales from [0,1]? Filters can be multiplied by the FFT of a signal to apply the filter in the frequency domain. When the resulting signal is transformed back in the time domain using the inverse FFT, the new signal will be filtered. This can be much faster than applying filters in the time domain. The filter_order parameter adjusts the sharpness of the cutoff in the frequency domain. Try playing with different values to see how it changes the filter plot. filter_order = 2 frequency_cutoff = 25 sampling_frequency = 500 b , a = butter ( filter_order , frequency_cutoff , btype = 'high' , output = 'ba' , fs = sampling_frequency ) plot_filter ( b , a , sampling_frequency ) What does the filter look like in the temporal domain? Let's take the inverse FFT and plot it to see what it looks like as a kernel in the temporal domain. Notice how changing the filter order adds more ripples in the time domain. from scipy.signal import sosfreqz filter_order = 8 sos = butter ( filter_order , frequency_cutoff , btype = 'high' , output = 'sos' , fs = sampling_frequency ) w_sos , h_sos = sosfreqz ( sos ) plt . plot ( ifft ( h_sos )[ 0 : 100 ], linewidth = 3 ) plt . ylabel ( 'Amplitude' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) Now let's apply the filter to our data. We will be applying the filter to the signal in the time domain using the filtfilt function. This is a good default option, even though there are several other functions to apply the filter. filtfilt applies the filter forward and then in reverse ensuring that there is zero-phase distortion. filtered = filtfilt ( b , a , signal ) plt . figure ( figsize = ( 20 , 5 )) plt . plot ( signal , linewidth = 2 ) plt . plot ( filtered , linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . legend ([ 'Original' , 'Filtered' ], fontsize = 18 )","title":"High Pass"},{"location":"signal_processing/signal_processing.html#low-pass","text":"Low pass filters only retain low frequency signals, which removes any high frequency information. from scipy.signal import butter , filtfilt filter_order = 2 frequency_cutoff = 10 sampling_frequency = 500 # Create the filter b , a = butter ( filter_order , frequency_cutoff , btype = 'low' , output = 'ba' , fs = sampling_frequency ) # Apply the filter filtered = filtfilt ( b , a , signal ) plt . figure ( figsize = ( 20 , 5 )) plt . plot ( signal , linewidth = 2 ) plt . plot ( filtered , linewidth = 4 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . legend ([ 'Original' , 'Filtered' ], fontsize = 18 ) What does the filter look like? filter_order = 10 frequency_cutoff = 10 sampling_frequency = 500 # Create the filter b , a = butter ( filter_order , frequency_cutoff , btype = 'low' , output = 'ba' , fs = sampling_frequency ) plot_filter ( b , a , sampling_frequency )","title":"Low Pass"},{"location":"signal_processing/signal_processing.html#bandpass","text":"Bandpass filters permit retaining only a specific frequency. Morlet wavelets are an example of a bandpass filter. or example a Morlet wavelet is a gaussian with the peak frequency at the center of a bandpass filter. Let's try selecting removing specific frequencies filter_order = 2 lowcut = 7 highcut = 13 # Create the filter b , a = butter ( filter_order , [ lowcut , highcut ], btype = 'bandpass' , output = 'ba' , fs = sampling_frequency ) # Apply the filter filtered = filtfilt ( b , a , signal ) plt . figure ( figsize = ( 20 , 5 )) plt . plot ( signal , linewidth = 2 ) plt . plot ( filtered , linewidth = 4 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . legend ([ 'Original' , 'Filtered' ], fontsize = 18 )","title":"Bandpass"},{"location":"signal_processing/signal_processing.html#band-stop","text":"Bandstop filters remove a specific frequency from the signal filter_order = 2 lowcut = 8 highcut = 12 # Create the filter b , a = butter ( filter_order , [ lowcut , highcut ], btype = 'bandstop' , output = 'ba' , fs = sampling_frequency ) # Plot the filter plot_filter ( b , a , sampling_frequency ) # Apply the filter filtered = filtfilt ( b , a , signal ) plt . figure ( figsize = ( 20 , 5 )) plt . plot ( signal , linewidth = 2 ) plt . plot ( filtered , linewidth = 2 ) plt . ylabel ( 'Intensity' , fontsize = 18 ) plt . xlabel ( 'Time' , fontsize = 18 ) plt . legend ([ 'Original' , 'Filtered' ], fontsize = 18 )","title":"Band-Stop"}]}